/*
* generated by Xtext
*/
package cz.cvut.earlgrey.statemodel.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import cz.cvut.earlgrey.statemodel.services.StatemodelGrammarAccess;

public class StatemodelParser extends AbstractContentAssistParser {
	
	@Inject
	private StatemodelGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected cz.cvut.earlgrey.statemodel.ui.contentassist.antlr.internal.InternalStatemodelParser createParser() {
		cz.cvut.earlgrey.statemodel.ui.contentassist.antlr.internal.InternalStatemodelParser result = new cz.cvut.earlgrey.statemodel.ui.contentassist.antlr.internal.InternalStatemodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
					put(grammarAccess.getStateTypeAccess().getAlternatives(), "rule__StateType__Alternatives");
					put(grammarAccess.getStatemodelAccess().getGroup(), "rule__Statemodel__Group__0");
					put(grammarAccess.getStatemachineAccess().getGroup(), "rule__Statemachine__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getStatemodelAccess().getImportsAssignment_0(), "rule__Statemodel__ImportsAssignment_0");
					put(grammarAccess.getStatemodelAccess().getStatemachineAssignment_1(), "rule__Statemodel__StatemachineAssignment_1");
					put(grammarAccess.getStatemachineAccess().getNameAssignment_1(), "rule__Statemachine__NameAssignment_1");
					put(grammarAccess.getStatemachineAccess().getStateAssignment_3(), "rule__Statemachine__StateAssignment_3");
					put(grammarAccess.getStateAccess().getTypeAssignment_0(), "rule__State__TypeAssignment_0");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_3(), "rule__State__TransitionsAssignment_3");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_0(), "rule__Transition__GuardAssignment_0");
					put(grammarAccess.getTransitionAccess().getEventAssignment_1(), "rule__Transition__EventAssignment_1");
					put(grammarAccess.getTransitionAccess().getStateAssignment_3(), "rule__Transition__StateAssignment_3");
					put(grammarAccess.getEventAccess().getNameAssignment(), "rule__Event__NameAssignment");
					put(grammarAccess.getGuardAccess().getCondAssignment_1(), "rule__Guard__CondAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			cz.cvut.earlgrey.statemodel.ui.contentassist.antlr.internal.InternalStatemodelParser typedParser = (cz.cvut.earlgrey.statemodel.ui.contentassist.antlr.internal.InternalStatemodelParser) parser;
			typedParser.entryRuleStatemodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StatemodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StatemodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
