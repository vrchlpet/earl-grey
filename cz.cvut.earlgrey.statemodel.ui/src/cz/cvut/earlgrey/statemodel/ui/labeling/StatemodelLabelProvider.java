/*
 * generated by Xtext
 */
package cz.cvut.earlgrey.statemodel.ui.labeling;

import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import com.google.inject.Inject;
import cz.cvut.earlgrey.statemodel.statemodel.Import;
import cz.cvut.earlgrey.statemodel.statemodel.State;
import cz.cvut.earlgrey.statemodel.statemodel.StateType;
import cz.cvut.earlgrey.statemodel.statemodel.Statemachine;
import cz.cvut.earlgrey.statemodel.statemodel.Statemodel;
import cz.cvut.earlgrey.statemodel.statemodel.Transition;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class StatemodelLabelProvider extends DefaultEObjectLabelProvider {

	private static final String STATEMODEL = "Model.gif";
	private static final String TRANSITION = "Transition.gif";
	private static final String IMPORT = "Import.gif";
	private static final String STATEMACHINE = "Statemachine.gif";
	private static Map<StateType, String> states = new HashMap<StateType, String>();
	static {
		states.put(StateType.FINAL, "FinalState.gif");
		states.put(StateType.INITIAL, "InitialNode.gif");
		states.put(StateType.NONE, "State.gif");
	}

	@Inject
	public StatemodelLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	/**
	 * Returns Import's image used in Outline View.
	 * 
	 * @param ele Instance of an Import
	 * @return image's filename as String
	 */
	String image(Import ele) {
		return IMPORT;
	}

	/**
	 * Returns Statemachine's image used in Outline View.
	 * 
	 * @param ele Instance of an Statemachine
	 * @return image's filename as String
	 */
	String image(Statemachine ele) {
		return STATEMACHINE;
	}

	/**
	 * Returns State's image used in Outline View.
	 * 
	 * @param ele Instance of an State
	 * @return image's filename as String
	 */
	String image(State ele) {
		if (ele != null) {
			return states.get(ele.getType());
		}
		return states.get(StateType.NONE);
	}

	/**
	 * Returns Transition's image used in Outline View.
	 * 
	 * @param ele Instance of an Transition
	 * @return image's filename as String
	 */
	String image(Transition ele) {
		return TRANSITION;
	}

	/**
	 * Returns Statemodel's image used in Outline View.
	 * 
	 * @param ele Instance of an Statemodel
	 * @return image's filename as String
	 */
	String image(Statemodel ele) {
		return STATEMODEL;
	}
}
