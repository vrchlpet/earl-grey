/*
* generated by Xtext
*/
grammar InternalAnnotation;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package cz.cvut.earlgrey.annotation.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.annotation.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import cz.cvut.earlgrey.annotation.services.AnnotationGrammarAccess;

}

@parser::members {
 
 	private AnnotationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AnnotationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignParameter
entryRuleAssignParameter 
:
{ before(grammarAccess.getAssignParameterRule()); }
	 ruleAssignParameter
{ after(grammarAccess.getAssignParameterRule()); } 
	 EOF 
;

// Rule AssignParameter
ruleAssignParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignParameterAccess().getGroup()); }
(rule__AssignParameter__Group__0)
{ after(grammarAccess.getAssignParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueParameter
entryRuleValueParameter 
:
{ before(grammarAccess.getValueParameterRule()); }
	 ruleValueParameter
{ after(grammarAccess.getValueParameterRule()); } 
	 EOF 
;

// Rule ValueParameter
ruleValueParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueParameterAccess().getValueAssignment()); }
(rule__ValueParameter__ValueAssignment)
{ after(grammarAccess.getValueParameterAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtendedID
entryRuleExtendedID 
:
{ before(grammarAccess.getExtendedIDRule()); }
	 ruleExtendedID
{ after(grammarAccess.getExtendedIDRule()); } 
	 EOF 
;

// Rule ExtendedID
ruleExtendedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup()); }
(rule__ExtendedID__Group__0)
{ after(grammarAccess.getExtendedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleReal
entryRuleReal 
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealAccess().getGroup()); }
(rule__Real__Group__0)
{ after(grammarAccess.getRealAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAssignParameterParserRuleCall_0()); }
	ruleAssignParameter
{ after(grammarAccess.getParameterAccess().getAssignParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getValueParameterParserRuleCall_1()); }
	ruleValueParameter
{ after(grammarAccess.getParameterAccess().getValueParameterParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
	ruleExtendedID
{ after(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
	RULE_BOOLEAN
{ after(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
	RULE_NULL
{ after(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
	ruleReal
{ after(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Real__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }

	'e' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }

	'E' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Alternatives_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }

	'+' 

{ after(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }

	'-' 

{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
(rule__Annotation__NameAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
(
	'(' 
)
{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
(rule__Annotation__ParameterAssignment_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
	rule__Annotation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
(rule__Annotation__Group_2_2__0)*
{ after(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Annotation__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__0__Impl
	rule__Annotation__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
(rule__Annotation__ParameterAssignment_2_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__0__Impl
	rule__AssignParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getNameAssignment_0()); }
(rule__AssignParameter__NameAssignment_0)
{ after(grammarAccess.getAssignParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__1__Impl
	rule__AssignParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignParameterAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getValueAssignment_2()); }
(rule__AssignParameter__ValueAssignment_2)
{ after(grammarAccess.getAssignParameterAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtendedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__0__Impl
	rule__ExtendedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup_1()); }
(rule__ExtendedID__Group_1__0)*
{ after(grammarAccess.getExtendedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__0__Impl
	rule__ExtendedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Real__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__1__Impl
	rule__Real__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__2__Impl
	rule__Real__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRealAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__3__Impl
	rule__Real__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getGroup_4()); }
(rule__Real__Group_4__0)?
{ after(grammarAccess.getRealAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Real__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__0__Impl
	rule__Real__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_0()); }
(rule__Real__Alternatives_4_0)
{ after(grammarAccess.getRealAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__1__Impl
	rule__Real__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_1()); }
(rule__Real__Alternatives_4_1)
{ after(grammarAccess.getRealAccess().getAlternatives_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Annotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getNameExtendedIDParserRuleCall_0_0()); }
	ruleExtendedID{ after(grammarAccess.getAssignParameterAccess().getNameExtendedIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getAssignParameterAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueParameter__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueParameterAccess().getValueValueParserRuleCall_0()); }
	ruleValue{ after(grammarAccess.getValueParameterAccess().getValueValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OPERATOR : ('++'|'--'|'=='|'>='|'<='|'!='|'<>'|'||'|'&&'|'-='|'+='|'='|'>>'|'<<'|'|=');

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : ('null'|'nil'|'NULL');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NATURAL : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


