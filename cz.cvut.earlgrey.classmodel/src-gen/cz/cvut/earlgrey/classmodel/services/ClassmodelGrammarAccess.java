/*
* generated by Xtext
*/

package cz.cvut.earlgrey.classmodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ClassmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ClassmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		/// **
		// * Defines root node of a model.
		// * Resource imports must be defined before other elements.
		// * / Classmodel:
		//	imports+=Import* elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* elements+=AbstractElement*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	Package | Entity | Relation;
		public ParserRule getRule() { return rule; }

		//Package | Entity | Relation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }

		//Relation
		public RuleCall getRelationParserRuleCall_2() { return cRelationParserRuleCall_2; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//	"package" name=ID "{" elements+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=ID "{" elements+=AbstractElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Class | Enum;
		public ParserRule getRule() { return rule; }

		//Class | Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cClassAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cClassClassKeyword_0_0_0_0 = (Keyword)cClassAssignment_0_0_0.eContents().get(0);
		private final Assignment cInterfaceAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cInterfaceInterfaceKeyword_0_0_1_0 = (Keyword)cInterfaceAssignment_0_0_1.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0_2 = (Assignment)cAlternatives_0_0.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_0_2_0 = (Keyword)cAbstractAssignment_0_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureFeatureParserRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Class returns Entity:
		//	=> (class?="class" | interface?="interface" | abstract?="abstract") name=ID "{" feature+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//=> (class?="class" | interface?="interface" | abstract?="abstract") name=ID "{" feature+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//=> (class?="class" | interface?="interface" | abstract?="abstract")
		public Group getGroup_0() { return cGroup_0; }

		//class?="class" | interface?="interface" | abstract?="abstract"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//class?="class"
		public Assignment getClassAssignment_0_0_0() { return cClassAssignment_0_0_0; }

		//"class"
		public Keyword getClassClassKeyword_0_0_0_0() { return cClassClassKeyword_0_0_0_0; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_0_0_1() { return cInterfaceAssignment_0_0_1; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_0_0_1_0() { return cInterfaceInterfaceKeyword_0_0_1_0; }

		//abstract?="abstract"
		public Assignment getAbstractAssignment_0_0_2() { return cAbstractAssignment_0_0_2; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0_2_0() { return cAbstractAbstractKeyword_0_0_2_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//feature+=Feature*
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_3_0() { return cFeatureFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumerationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEnumerationEnumKeyword_0_0 = (Keyword)cEnumerationAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureEnumConstantParserRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enum returns Entity:
		//	enumeration?="enum" name=ID "{" feature+=EnumConstant* "}";
		public ParserRule getRule() { return rule; }

		//enumeration?="enum" name=ID "{" feature+=EnumConstant* "}"
		public Group getGroup() { return cGroup; }

		//enumeration?="enum"
		public Assignment getEnumerationAssignment_0() { return cEnumerationAssignment_0; }

		//"enum"
		public Keyword getEnumerationEnumKeyword_0_0() { return cEnumerationEnumKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//feature+=EnumConstant*
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//EnumConstant
		public RuleCall getFeatureEnumConstantParserRuleCall_3_0() { return cFeatureEnumConstantParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImplicitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImplicitIntValueParserRuleCall_1_1_0 = (RuleCall)cImplicitAssignment_1_1.eContents().get(0);
		
		//EnumConstant returns Attribute:
		//	name=ID ("=" implicit+=IntValue)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" implicit+=IntValue)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(=> "=" implicit+=IntValue)?
		public Group getGroup_1() { return cGroup_1; }

		//=> "="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//implicit+=IntValue
		public Assignment getImplicitAssignment_1_1() { return cImplicitAssignment_1_1; }

		//IntValue
		public RuleCall getImplicitIntValueParserRuleCall_1_1_0() { return cImplicitIntValueParserRuleCall_1_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		/// **
		// * Entity reference, supports n-dimension arrays.
		// * / Reference:
		//	type=[Entity|QualifiedName] array+=Array*;
		public ParserRule getRule() { return rule; }

		//type=[Entity|QualifiedName] array+=Array*
		public Group getGroup() { return cGroup; }

		//type=[Entity|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Entity|QualifiedName]
		public CrossReference getTypeEntityCrossReference_0_0() { return cTypeEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeEntityQualifiedNameParserRuleCall_0_0_1() { return cTypeEntityQualifiedNameParserRuleCall_0_0_1; }

		//array+=Array*
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} "[" size=INT? "]";
		public ParserRule getRule() { return rule; }

		//{Array} "[" size=INT? "]"
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=INT?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Attribute | Operation;
		public ParserRule getRule() { return rule; }

		//Attribute | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cModifierVisibilityEnumRuleCall_0_0_0 = (RuleCall)cModifierAssignment_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_0 = (Keyword)cStaticAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnReferenceParserRuleCall_6_0 = (RuleCall)cReturnAssignment_6.eContents().get(0);
		
		////i.e.: +setAll(Parameter[]) : void
		//Operation:
		//	(modifier=Visibility? & static?="static"?) name=ID "(" (=> parameters+=Parameter ("," parameters+=Parameter)*)? ")"
		//	":" return=Reference;
		public ParserRule getRule() { return rule; }

		//(modifier=Visibility? & static?="static"?) name=ID "(" (=> parameters+=Parameter ("," parameters+=Parameter)*)? ")" ":"
		//return=Reference
		public Group getGroup() { return cGroup; }

		//modifier=Visibility? & static?="static"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//modifier=Visibility?
		public Assignment getModifierAssignment_0_0() { return cModifierAssignment_0_0; }

		//Visibility
		public RuleCall getModifierVisibilityEnumRuleCall_0_0_0() { return cModifierVisibilityEnumRuleCall_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_0_1() { return cStaticAssignment_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_0_1_0() { return cStaticStaticKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(=> parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//return=Reference
		public Assignment getReturnAssignment_6() { return cReturnAssignment_6; }

		//Reference
		public RuleCall getReturnReferenceParserRuleCall_6_0() { return cReturnReferenceParserRuleCall_6_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplicitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImplicitValueParserRuleCall_3_1_0 = (RuleCall)cImplicitAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cImplicitAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cImplicitValueParserRuleCall_3_2_1_0 = (RuleCall)cImplicitAssignment_3_2_1.eContents().get(0);
		
		//Parameter:
		//	name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Reference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Reference
		public RuleCall getTypeReferenceParserRuleCall_2_0() { return cTypeReferenceParserRuleCall_2_0; }

		//(=> "=" implicit+=Value ("," implicit+=Value)*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//implicit+=Value
		public Assignment getImplicitAssignment_3_1() { return cImplicitAssignment_3_1; }

		//Value
		public RuleCall getImplicitValueParserRuleCall_3_1_0() { return cImplicitValueParserRuleCall_3_1_0; }

		//("," implicit+=Value)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//implicit+=Value
		public Assignment getImplicitAssignment_3_2_1() { return cImplicitAssignment_3_2_1; }

		//Value
		public RuleCall getImplicitValueParserRuleCall_3_2_1_0() { return cImplicitValueParserRuleCall_3_2_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cModifierVisibilityEnumRuleCall_0_0_0 = (RuleCall)cModifierAssignment_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_0 = (Keyword)cStaticAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplicitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplicitValueParserRuleCall_4_1_0 = (RuleCall)cImplicitAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplicitAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplicitValueParserRuleCall_4_2_1_0 = (RuleCall)cImplicitAssignment_4_2_1.eContents().get(0);
		
		//Attribute:
		//	(modifier=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?;
		public ParserRule getRule() { return rule; }

		//(modifier=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?
		public Group getGroup() { return cGroup; }

		//modifier=Visibility? & static?="static"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//modifier=Visibility?
		public Assignment getModifierAssignment_0_0() { return cModifierAssignment_0_0; }

		//Visibility
		public RuleCall getModifierVisibilityEnumRuleCall_0_0_0() { return cModifierVisibilityEnumRuleCall_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_0_1() { return cStaticAssignment_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_0_1_0() { return cStaticStaticKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Reference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Reference
		public RuleCall getTypeReferenceParserRuleCall_3_0() { return cTypeReferenceParserRuleCall_3_0; }

		//(=> "=" implicit+=Value ("," implicit+=Value)*)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//implicit+=Value
		public Assignment getImplicitAssignment_4_1() { return cImplicitAssignment_4_1; }

		//Value
		public RuleCall getImplicitValueParserRuleCall_4_1_0() { return cImplicitValueParserRuleCall_4_1_0; }

		//("," implicit+=Value)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implicit+=Value
		public Assignment getImplicitAssignment_4_2_1() { return cImplicitAssignment_4_2_1; }

		//Value
		public RuleCall getImplicitValueParserRuleCall_4_2_1_0() { return cImplicitValueParserRuleCall_4_2_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value returns ecore::EString:
		//	"null" | STRING | IntValue;
		public ParserRule getRule() { return rule; }

		//"null" | STRING | IntValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//"null"
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_2() { return cIntValueParserRuleCall_2; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue returns ecore::EString:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOriginAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOriginEntityCrossReference_0_0 = (CrossReference)cOriginAssignment_0.eContents().get(0);
		private final RuleCall cOriginEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cOriginEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cCardinalityFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinalityFromCardinalityParserRuleCall_1_0 = (RuleCall)cCardinalityFromAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRelationTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cCardinalityToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalityToCardinalityParserRuleCall_3_0 = (RuleCall)cCardinalityToAssignment_3.eContents().get(0);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDestinationEntityCrossReference_4_0 = (CrossReference)cDestinationAssignment_4.eContents().get(0);
		private final RuleCall cDestinationEntityQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cDestinationEntityCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//Relation:
		//	origin=[Entity|QualifiedName] cardinalityFrom=Cardinality? type=RelationType cardinalityTo=Cardinality?
		//	destination=[Entity|QualifiedName] (":" label=STRING)?;
		public ParserRule getRule() { return rule; }

		//origin=[Entity|QualifiedName] cardinalityFrom=Cardinality? type=RelationType cardinalityTo=Cardinality?
		//destination=[Entity|QualifiedName] (":" label=STRING)?
		public Group getGroup() { return cGroup; }

		//origin=[Entity|QualifiedName]
		public Assignment getOriginAssignment_0() { return cOriginAssignment_0; }

		//[Entity|QualifiedName]
		public CrossReference getOriginEntityCrossReference_0_0() { return cOriginEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getOriginEntityQualifiedNameParserRuleCall_0_0_1() { return cOriginEntityQualifiedNameParserRuleCall_0_0_1; }

		//cardinalityFrom=Cardinality?
		public Assignment getCardinalityFromAssignment_1() { return cCardinalityFromAssignment_1; }

		//Cardinality
		public RuleCall getCardinalityFromCardinalityParserRuleCall_1_0() { return cCardinalityFromCardinalityParserRuleCall_1_0; }

		//type=RelationType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//RelationType
		public RuleCall getTypeRelationTypeEnumRuleCall_2_0() { return cTypeRelationTypeEnumRuleCall_2_0; }

		//cardinalityTo=Cardinality?
		public Assignment getCardinalityToAssignment_3() { return cCardinalityToAssignment_3; }

		//Cardinality
		public RuleCall getCardinalityToCardinalityParserRuleCall_3_0() { return cCardinalityToCardinalityParserRuleCall_3_0; }

		//destination=[Entity|QualifiedName]
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }

		//[Entity|QualifiedName]
		public CrossReference getDestinationEntityCrossReference_4_0() { return cDestinationEntityCrossReference_4_0; }

		//QualifiedName
		public RuleCall getDestinationEntityQualifiedNameParserRuleCall_4_0_1() { return cDestinationEntityQualifiedNameParserRuleCall_4_0_1; }

		//(":" label=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCardinalityValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCardinalityValueParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Cardinality returns ecore::EString:
		//	CardinalityValue (".." CardinalityValue)?;
		public ParserRule getRule() { return rule; }

		//CardinalityValue (".." CardinalityValue)?
		public Group getGroup() { return cGroup; }

		//CardinalityValue
		public RuleCall getCardinalityValueParserRuleCall_0() { return cCardinalityValueParserRuleCall_0; }

		//(".." CardinalityValue)?
		public Group getGroup_1() { return cGroup_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }

		//CardinalityValue
		public RuleCall getCardinalityValueParserRuleCall_1_1() { return cCardinalityValueParserRuleCall_1_1; }
	}

	public class CardinalityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CardinalityValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CardinalityValue returns ecore::EString:
		//	INT | "*";
		public ParserRule getRule() { return rule; }

		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////TODO: Add constrain rule
		////terminal CONSTRAIN:
		////    '{'->'}';
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)* //TODO: Add constrain rule
		////terminal CONSTRAIN:
		////    '{'->'}';
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID //TODO: Add constrain rule
		////terminal CONSTRAIN:
		////    '{'->'}';
		//)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class RelationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSOCIATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSOCIATIONAssociatesKeyword_0_0 = (Keyword)cASSOCIATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEPENCYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEPENCYDependsKeyword_1_0 = (Keyword)cDEPENCYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGENERALIZATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGENERALIZATIONExtendsKeyword_2_0 = (Keyword)cGENERALIZATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREALIZATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREALIZATIONImplementsKeyword_3_0 = (Keyword)cREALIZATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAGGREGATIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAGGREGATIONAggregatesKeyword_4_0 = (Keyword)cAGGREGATIONEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITIONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOMPOSITIONComposedOfKeyword_5_0 = (Keyword)cCOMPOSITIONEnumLiteralDeclaration_5.eContents().get(0);
		
		/// **
		// * Relation type:
		// * A is in relationship with B
		// * 
		// * i.e.: A extends B
		// * / enum RelationType:
		//	ASSOCIATION= //A is in assocition with B 
		//
		//	"associates" | DEPENCY= //A depends on B
		//
		//	"depends" | GENERALIZATION= //A extends B
		//
		//	"extends" | REALIZATION= //A implements B
		//
		//	"implements" | AGGREGATION= //A aggregates B (A consists of B(s), but A can exist without B)
		//
		//	"aggregates" | COMPOSITION= //A x B (A is composed of B(s), but can't exist without B)
		//
		//	"composedOf";
		public EnumRule getRule() { return rule; }

		//ASSOCIATION= //A is in assocition with B 
		//
		//"associates" | DEPENCY= //A depends on B
		//
		//"depends" | GENERALIZATION= //A extends B
		//
		//"extends" | REALIZATION= //A implements B
		//
		//"implements" | AGGREGATION= //A aggregates B (A consists of B(s), but A can exist without B)
		//
		//"aggregates" | COMPOSITION= //A x B (A is composed of B(s), but can't exist without B)
		//
		//"composedOf"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASSOCIATION= //A is in assocition with B 
		//
		//"associates"
		public EnumLiteralDeclaration getASSOCIATIONEnumLiteralDeclaration_0() { return cASSOCIATIONEnumLiteralDeclaration_0; }

		////A is in assocition with B 
		//
		//"associates"
		public Keyword getASSOCIATIONAssociatesKeyword_0_0() { return cASSOCIATIONAssociatesKeyword_0_0; }

		//DEPENCY= //A depends on B
		//
		//"depends"
		public EnumLiteralDeclaration getDEPENCYEnumLiteralDeclaration_1() { return cDEPENCYEnumLiteralDeclaration_1; }

		////A depends on B
		//
		//"depends"
		public Keyword getDEPENCYDependsKeyword_1_0() { return cDEPENCYDependsKeyword_1_0; }

		//GENERALIZATION= //A extends B
		//
		//"extends"
		public EnumLiteralDeclaration getGENERALIZATIONEnumLiteralDeclaration_2() { return cGENERALIZATIONEnumLiteralDeclaration_2; }

		////A extends B
		//
		//"extends"
		public Keyword getGENERALIZATIONExtendsKeyword_2_0() { return cGENERALIZATIONExtendsKeyword_2_0; }

		//REALIZATION= //A implements B
		//
		//"implements"
		public EnumLiteralDeclaration getREALIZATIONEnumLiteralDeclaration_3() { return cREALIZATIONEnumLiteralDeclaration_3; }

		////A implements B
		//
		//"implements"
		public Keyword getREALIZATIONImplementsKeyword_3_0() { return cREALIZATIONImplementsKeyword_3_0; }

		//AGGREGATION= //A aggregates B (A consists of B(s), but A can exist without B)
		//
		//"aggregates"
		public EnumLiteralDeclaration getAGGREGATIONEnumLiteralDeclaration_4() { return cAGGREGATIONEnumLiteralDeclaration_4; }

		////A aggregates B (A consists of B(s), but A can exist without B)
		//
		//"aggregates"
		public Keyword getAGGREGATIONAggregatesKeyword_4_0() { return cAGGREGATIONAggregatesKeyword_4_0; }

		//COMPOSITION= //A x B (A is composed of B(s), but can't exist without B)
		//
		//"composedOf"
		public EnumLiteralDeclaration getCOMPOSITIONEnumLiteralDeclaration_5() { return cCOMPOSITIONEnumLiteralDeclaration_5; }

		////A x B (A is composed of B(s), but can't exist without B)
		//
		//"composedOf"
		public Keyword getCOMPOSITIONComposedOfKeyword_5_0() { return cCOMPOSITIONComposedOfKeyword_5_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPlusSignKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEHyphenMinusKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDNumberSignKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGE_PRIVATEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPACKAGE_PRIVATETildeKeyword_3_0 = (Keyword)cPACKAGE_PRIVATEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~";
		public EnumRule getRule() { return rule; }

		//PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PUBLIC="+"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPUBLICPlusSignKeyword_0_0() { return cPUBLICPlusSignKeyword_0_0; }

		//PRIVATE="-"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getPRIVATEHyphenMinusKeyword_1_0() { return cPRIVATEHyphenMinusKeyword_1_0; }

		//PROTECTED="#"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"#"
		public Keyword getPROTECTEDNumberSignKeyword_2_0() { return cPROTECTEDNumberSignKeyword_2_0; }

		//PACKAGE_PRIVATE="~"
		public EnumLiteralDeclaration getPACKAGE_PRIVATEEnumLiteralDeclaration_3() { return cPACKAGE_PRIVATEEnumLiteralDeclaration_3; }

		//"~"
		public Keyword getPACKAGE_PRIVATETildeKeyword_3_0() { return cPACKAGE_PRIVATETildeKeyword_3_0; }
	}

	public class EntityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCLASSClassKeyword_0_0 = (Keyword)cCLASSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERFACEInterfaceKeyword_1_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cABSTRACTAbstractKeyword_2_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cENUMEnumKeyword_3_0 = (Keyword)cENUMEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EntityType:
		//	CLASS="class" | INTERFACE="interface" | ABSTRACT="abstract" | ENUM="enum";
		public EnumRule getRule() { return rule; }

		//CLASS="class" | INTERFACE="interface" | ABSTRACT="abstract" | ENUM="enum"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CLASS="class"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_0() { return cCLASSEnumLiteralDeclaration_0; }

		//"class"
		public Keyword getCLASSClassKeyword_0_0() { return cCLASSClassKeyword_0_0; }

		//INTERFACE="interface"
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_1() { return cINTERFACEEnumLiteralDeclaration_1; }

		//"interface"
		public Keyword getINTERFACEInterfaceKeyword_1_0() { return cINTERFACEInterfaceKeyword_1_0; }

		//ABSTRACT="abstract"
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_2() { return cABSTRACTEnumLiteralDeclaration_2; }

		//"abstract"
		public Keyword getABSTRACTAbstractKeyword_2_0() { return cABSTRACTAbstractKeyword_2_0; }

		//ENUM="enum"
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration_3() { return cENUMEnumLiteralDeclaration_3; }

		//"enum"
		public Keyword getENUMEnumKeyword_3_0() { return cENUMEnumKeyword_3_0; }
	}
	
	private ClassmodelElements pClassmodel;
	private AbstractElementElements pAbstractElement;
	private PackageElements pPackage;
	private ImportElements pImport;
	private EntityElements pEntity;
	private ClassElements pClass;
	private EnumElements pEnum;
	private EnumConstantElements pEnumConstant;
	private ReferenceElements pReference;
	private ArrayElements pArray;
	private FeatureElements pFeature;
	private OperationElements pOperation;
	private ParameterElements pParameter;
	private AttributeElements pAttribute;
	private ValueElements pValue;
	private IntValueElements pIntValue;
	private RelationElements pRelation;
	private CardinalityElements pCardinality;
	private CardinalityValueElements pCardinalityValue;
	private RelationTypeElements unknownRuleRelationType;
	private VisibilityElements unknownRuleVisibility;
	private EntityTypeElements unknownRuleEntityType;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ClassmodelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// **
	// * Defines root node of a model.
	// * Resource imports must be defined before other elements.
	// * / Classmodel:
	//	imports+=Import* elements+=AbstractElement*;
	public ClassmodelElements getClassmodelAccess() {
		return (pClassmodel != null) ? pClassmodel : (pClassmodel = new ClassmodelElements());
	}
	
	public ParserRule getClassmodelRule() {
		return getClassmodelAccess().getRule();
	}

	//AbstractElement:
	//	Package | Entity | Relation;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Package:
	//	"package" name=ID "{" elements+=AbstractElement* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Entity:
	//	Class | Enum;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Class returns Entity:
	//	=> (class?="class" | interface?="interface" | abstract?="abstract") name=ID "{" feature+=Feature* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Enum returns Entity:
	//	enumeration?="enum" name=ID "{" feature+=EnumConstant* "}";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumConstant returns Attribute:
	//	name=ID ("=" implicit+=IntValue)?;
	public EnumConstantElements getEnumConstantAccess() {
		return (pEnumConstant != null) ? pEnumConstant : (pEnumConstant = new EnumConstantElements());
	}
	
	public ParserRule getEnumConstantRule() {
		return getEnumConstantAccess().getRule();
	}

	/// **
	// * Entity reference, supports n-dimension arrays.
	// * / Reference:
	//	type=[Entity|QualifiedName] array+=Array*;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Array:
	//	{Array} "[" size=INT? "]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Feature:
	//	Attribute | Operation;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	////i.e.: +setAll(Parameter[]) : void
	//Operation:
	//	(modifier=Visibility? & static?="static"?) name=ID "(" (=> parameters+=Parameter ("," parameters+=Parameter)*)? ")"
	//	":" return=Reference;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Parameter:
	//	name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Attribute:
	//	(modifier=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=Value ("," implicit+=Value)*)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Value returns ecore::EString:
	//	"null" | STRING | IntValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//IntValue returns ecore::EString:
	//	INT;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//Relation:
	//	origin=[Entity|QualifiedName] cardinalityFrom=Cardinality? type=RelationType cardinalityTo=Cardinality?
	//	destination=[Entity|QualifiedName] (":" label=STRING)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Cardinality returns ecore::EString:
	//	CardinalityValue (".." CardinalityValue)?;
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//CardinalityValue returns ecore::EString:
	//	INT | "*";
	public CardinalityValueElements getCardinalityValueAccess() {
		return (pCardinalityValue != null) ? pCardinalityValue : (pCardinalityValue = new CardinalityValueElements());
	}
	
	public ParserRule getCardinalityValueRule() {
		return getCardinalityValueAccess().getRule();
	}

	/// **
	// * Relation type:
	// * A is in relationship with B
	// * 
	// * i.e.: A extends B
	// * / enum RelationType:
	//	ASSOCIATION= //A is in assocition with B 
	//
	//	"associates" | DEPENCY= //A depends on B
	//
	//	"depends" | GENERALIZATION= //A extends B
	//
	//	"extends" | REALIZATION= //A implements B
	//
	//	"implements" | AGGREGATION= //A aggregates B (A consists of B(s), but A can exist without B)
	//
	//	"aggregates" | COMPOSITION= //A x B (A is composed of B(s), but can't exist without B)
	//
	//	"composedOf";
	public RelationTypeElements getRelationTypeAccess() {
		return (unknownRuleRelationType != null) ? unknownRuleRelationType : (unknownRuleRelationType = new RelationTypeElements());
	}
	
	public EnumRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//enum Visibility:
	//	PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum EntityType:
	//	CLASS="class" | INTERFACE="interface" | ABSTRACT="abstract" | ENUM="enum";
	public EntityTypeElements getEntityTypeAccess() {
		return (unknownRuleEntityType != null) ? unknownRuleEntityType : (unknownRuleEntityType = new EntityTypeElements());
	}
	
	public EnumRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	////TODO: Add constrain rule
	////terminal CONSTRAIN:
	////    '{'->'}';
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
