/*
* generated by Xtext
*/

package cz.cvut.earlgrey.classmodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import cz.cvut.earlgrey.annotation.services.AnnotationGrammarAccess;

@Singleton
public class ClassmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* //(annotation+=Annotation*) => 
		//	elements+=Element*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* //(annotation+=Annotation*) => 
		//elements+=Element*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationshipParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDatatypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInterfaceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Element:
		//	Relationship | Classifier | Package | Datatype | Enumeration | Interface;
		public ParserRule getRule() { return rule; }

		//Relationship | Classifier | Package | Datatype | Enumeration | Interface
		public Alternatives getAlternatives() { return cAlternatives; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_0() { return cRelationshipParserRuleCall_0; }

		//Classifier
		public RuleCall getClassifierParserRuleCall_1() { return cClassifierParserRuleCall_1; }

		//Package
		public RuleCall getPackageParserRuleCall_2() { return cPackageParserRuleCall_2; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_3() { return cDatatypeParserRuleCall_3; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_5() { return cInterfaceParserRuleCall_5; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// e.g.: datatype int
		//Datatype:
		//	annotation+=Annotation* => "datatype" name=ID;
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "datatype" name=ID
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "datatype"
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementElementParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// e.g.: package utils / *..* / end
		//Package:
		//	annotation+=Annotation* => "package" name=ID element+=Element* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "package" name=ID element+=Element* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//element+=Element*
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }

		//Element
		public RuleCall getElementElementParserRuleCall_3_0() { return cElementElementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cGeneralizationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneralizationGeneralizationParserRuleCall_3_0 = (RuleCall)cGeneralizationAssignment_3.eContents().get(0);
		private final Assignment cConstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_4_0 = (RuleCall)cConstraintAssignment_4.eContents().get(0);
		private final Assignment cFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeatureFeatureParserRuleCall_5_0 = (RuleCall)cFeatureAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// e.g.: class node / *..* / end
		//Classifier:
		//	annotation+=Annotation* => "class" name=ID => generalization=Generalization? constraint=CONSTRAINT? feature+=Feature*
		//	"end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "class" name=ID => generalization=Generalization? constraint=CONSTRAINT? feature+=Feature*
		//"end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//=> generalization=Generalization?
		public Assignment getGeneralizationAssignment_3() { return cGeneralizationAssignment_3; }

		//Generalization
		public RuleCall getGeneralizationGeneralizationParserRuleCall_3_0() { return cGeneralizationGeneralizationParserRuleCall_3_0; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_4() { return cConstraintAssignment_4; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_4_0() { return cConstraintCONSTRAINTTerminalRuleCall_4_0; }

		//feature+=Feature*
		public Assignment getFeatureAssignment_5() { return cFeatureAssignment_5; }

		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_5_0() { return cFeatureFeatureParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassifierTypeParserRuleCall_1_0 = (RuleCall)cClassifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClassifierTypeParserRuleCall_2_1_0 = (RuleCall)cClassifierAssignment_2_1.eContents().get(0);
		
		//// e.g.: class Apple isA +Fruit
		//Generalization:
		//	"isA" classifier+=Type ("," classifier+=Type)*;
		public ParserRule getRule() { return rule; }

		//"isA" classifier+=Type ("," classifier+=Type)*
		public Group getGroup() { return cGroup; }

		//"isA"
		public Keyword getIsAKeyword_0() { return cIsAKeyword_0; }

		//classifier+=Type
		public Assignment getClassifierAssignment_1() { return cClassifierAssignment_1; }

		//Type
		public RuleCall getClassifierTypeParserRuleCall_1_0() { return cClassifierTypeParserRuleCall_1_0; }

		//("," classifier+=Type)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//classifier+=Type
		public Assignment getClassifierAssignment_2_1() { return cClassifierAssignment_2_1; }

		//Type
		public RuleCall getClassifierTypeParserRuleCall_2_1_0() { return cClassifierTypeParserRuleCall_2_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// e.g.: isA +Fruit
		//Type:
		//	visibility=Visibility? name=ExtendedID;
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? name=ExtendedID
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//name=ExtendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		//Feature:
		//	(Attribute | Operation | Constant) constraint=CONSTRAINT?;
		public ParserRule getRule() { return rule; }

		//(Attribute | Operation | Constant) constraint=CONSTRAINT?
		public Group getGroup() { return cGroup; }

		//Attribute | Operation | Constant
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0_0() { return cAttributeParserRuleCall_0_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_0_1() { return cOperationParserRuleCall_0_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_0_2() { return cConstantParserRuleCall_0_2; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_1_0() { return cConstraintCONSTRAINTTerminalRuleCall_1_0; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		private final Assignment cEnumeratorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_4_0 = (RuleCall)cEnumeratorAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// e.g.: enum Weekend Saturday Sunday end
		//Enumeration:
		//	annotation+=Annotation* => "enum" name=ID constraint=CONSTRAINT? enumerator+=Enumerator* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "enum" name=ID constraint=CONSTRAINT? enumerator+=Enumerator* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_3_0() { return cConstraintCONSTRAINTTerminalRuleCall_3_0; }

		//enumerator+=Enumerator*
		public Assignment getEnumeratorAssignment_4() { return cEnumeratorAssignment_4; }

		//Enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_4_0() { return cEnumeratorEnumeratorParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueImplicitValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//// An element of an Enumeration
		//Enumerator returns Feature:
		//	name=ID ("=" value=ImplicitValue)? constraint=CONSTRAINT?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" value=ImplicitValue)? constraint=CONSTRAINT?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(=> "=" value=ImplicitValue)?
		public Group getGroup_1() { return cGroup_1; }

		//=> "="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=ImplicitValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//ImplicitValue
		public RuleCall getValueImplicitValueParserRuleCall_1_1_0() { return cValueImplicitValueParserRuleCall_1_1_0; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_2_0() { return cConstraintCONSTRAINTTerminalRuleCall_2_0; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cGeneralizationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneralizationGeneralizationParserRuleCall_3_0 = (RuleCall)cGeneralizationAssignment_3.eContents().get(0);
		private final Assignment cConstraintAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_4_0 = (RuleCall)cConstraintAssignment_4.eContents().get(0);
		private final Assignment cFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeatureInterfaceFeatureParserRuleCall_5_0 = (RuleCall)cFeatureAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// e.g.: interface Fruit end
		//Interface:
		//	annotation+=Annotation* => "interface" name=ID => generalization=Generalization? constraint=CONSTRAINT?
		//	feature+=InterfaceFeature* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "interface" name=ID => generalization=Generalization? constraint=CONSTRAINT?
		//feature+=InterfaceFeature* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//=> generalization=Generalization?
		public Assignment getGeneralizationAssignment_3() { return cGeneralizationAssignment_3; }

		//Generalization
		public RuleCall getGeneralizationGeneralizationParserRuleCall_3_0() { return cGeneralizationGeneralizationParserRuleCall_3_0; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_4() { return cConstraintAssignment_4; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_4_0() { return cConstraintCONSTRAINTTerminalRuleCall_4_0; }

		//feature+=InterfaceFeature*
		public Assignment getFeatureAssignment_5() { return cFeatureAssignment_5; }

		//InterfaceFeature
		public RuleCall getFeatureInterfaceFeatureParserRuleCall_5_0() { return cFeatureInterfaceFeatureParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class InterfaceFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintCONSTRAINTTerminalRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		//// An element of an Interface
		//InterfaceFeature returns Feature:
		//	(Operation | Constant) constraint=CONSTRAINT?;
		public ParserRule getRule() { return rule; }

		//(Operation | Constant) constraint=CONSTRAINT?
		public Group getGroup() { return cGroup; }

		//Operation | Constant
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_0_0() { return cOperationParserRuleCall_0_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_0_1() { return cConstantParserRuleCall_0_1; }

		//constraint=CONSTRAINT?
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//CONSTRAINT
		public RuleCall getConstraintCONSTRAINTTerminalRuleCall_1_0() { return cConstraintCONSTRAINTTerminalRuleCall_1_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRelationshipTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Assignment cHeadNavigableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHeadNavigableNavigableKeyword_3_0 = (Keyword)cHeadNavigableAssignment_3.eContents().get(0);
		private final Assignment cHeadMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeadMultiplicityMultiplicityParserRuleCall_4_0 = (RuleCall)cHeadMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cHeadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHeadExtendedIDParserRuleCall_5_0 = (RuleCall)cHeadAssignment_5.eContents().get(0);
		private final Assignment cHeadLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeadLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cHeadLabelAssignment_6.eContents().get(0);
		private final Assignment cTailNavigableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cTailNavigableNavigableKeyword_7_0 = (Keyword)cTailNavigableAssignment_7.eContents().get(0);
		private final Assignment cTailMultiplicityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTailMultiplicityMultiplicityParserRuleCall_8_0 = (RuleCall)cTailMultiplicityAssignment_8.eContents().get(0);
		private final Assignment cTailAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTailExtendedIDParserRuleCall_9_0 = (RuleCall)cTailAssignment_9.eContents().get(0);
		private final Assignment cTailLabelAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTailLabelSTRINGTerminalRuleCall_10_0 = (RuleCall)cTailLabelAssignment_10.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// e.g.: composition 0..1 Tree 0..* Leaf end
		//Relationship:
		//	annotation+=Annotation* => type=RelationshipType label=STRING? headNavigable?="navigable"?
		//	headMultiplicity=Multiplicity? head=ExtendedID / *':'* / headLabel=STRING? tailNavigable?="navigable"?
		//	tailMultiplicity=Multiplicity? tail=ExtendedID / *':'* / tailLabel=STRING? "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => type=RelationshipType label=STRING? headNavigable?="navigable"?
		//headMultiplicity=Multiplicity? head=ExtendedID / *':'* / headLabel=STRING? tailNavigable?="navigable"?
		//tailMultiplicity=Multiplicity? tail=ExtendedID / *':'* / tailLabel=STRING? "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> type=RelationshipType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//RelationshipType
		public RuleCall getTypeRelationshipTypeEnumRuleCall_1_0() { return cTypeRelationshipTypeEnumRuleCall_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//headNavigable?="navigable"?
		public Assignment getHeadNavigableAssignment_3() { return cHeadNavigableAssignment_3; }

		//"navigable"
		public Keyword getHeadNavigableNavigableKeyword_3_0() { return cHeadNavigableNavigableKeyword_3_0; }

		//headMultiplicity=Multiplicity?
		public Assignment getHeadMultiplicityAssignment_4() { return cHeadMultiplicityAssignment_4; }

		//Multiplicity
		public RuleCall getHeadMultiplicityMultiplicityParserRuleCall_4_0() { return cHeadMultiplicityMultiplicityParserRuleCall_4_0; }

		//head=ExtendedID
		public Assignment getHeadAssignment_5() { return cHeadAssignment_5; }

		//ExtendedID
		public RuleCall getHeadExtendedIDParserRuleCall_5_0() { return cHeadExtendedIDParserRuleCall_5_0; }

		/// *':'* / headLabel=STRING?
		public Assignment getHeadLabelAssignment_6() { return cHeadLabelAssignment_6; }

		//STRING
		public RuleCall getHeadLabelSTRINGTerminalRuleCall_6_0() { return cHeadLabelSTRINGTerminalRuleCall_6_0; }

		//tailNavigable?="navigable"?
		public Assignment getTailNavigableAssignment_7() { return cTailNavigableAssignment_7; }

		//"navigable"
		public Keyword getTailNavigableNavigableKeyword_7_0() { return cTailNavigableNavigableKeyword_7_0; }

		//tailMultiplicity=Multiplicity?
		public Assignment getTailMultiplicityAssignment_8() { return cTailMultiplicityAssignment_8; }

		//Multiplicity
		public RuleCall getTailMultiplicityMultiplicityParserRuleCall_8_0() { return cTailMultiplicityMultiplicityParserRuleCall_8_0; }

		//tail=ExtendedID
		public Assignment getTailAssignment_9() { return cTailAssignment_9; }

		//ExtendedID
		public RuleCall getTailExtendedIDParserRuleCall_9_0() { return cTailExtendedIDParserRuleCall_9_0; }

		/// *':'* / tailLabel=STRING?
		public Assignment getTailLabelAssignment_10() { return cTailLabelAssignment_10; }

		//STRING
		public RuleCall getTailLabelSTRINGTerminalRuleCall_10_0() { return cTailLabelSTRINGTerminalRuleCall_10_0; }

		//"end"
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpperMultiplicityValueParserRuleCall_0_0 = (RuleCall)cUpperAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLowerMultiplicityValueParserRuleCall_1_1_0 = (RuleCall)cLowerAssignment_1_1.eContents().get(0);
		
		//// e.g.: 0..1
		//Multiplicity:
		//	upper=MultiplicityValue (".." lower=MultiplicityValue)?;
		public ParserRule getRule() { return rule; }

		//upper=MultiplicityValue (".." lower=MultiplicityValue)?
		public Group getGroup() { return cGroup; }

		//upper=MultiplicityValue
		public Assignment getUpperAssignment_0() { return cUpperAssignment_0; }

		//MultiplicityValue
		public RuleCall getUpperMultiplicityValueParserRuleCall_0_0() { return cUpperMultiplicityValueParserRuleCall_0_0; }

		//(=> ".." lower=MultiplicityValue)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ".."
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }

		//lower=MultiplicityValue
		public Assignment getLowerAssignment_1_1() { return cLowerAssignment_1_1; }

		//MultiplicityValue
		public RuleCall getLowerMultiplicityValueParserRuleCall_1_1_0() { return cLowerMultiplicityValueParserRuleCall_1_1_0; }
	}

	public class MultiplicityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiplicityValue returns ecore::EString:
		//	NATURAL | "*";
		public ParserRule getRule() { return rule; }

		//NATURAL | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_0() { return cNATURALTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueImplicitValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// e.g.: BUFFER_LENGTH = 512
		//Constant:
		//	visibility=Visibility? name=ID "=" value=ImplicitValue;
		public ParserRule getRule() { return rule; }

		//visibility=Visibility? name=ID "=" value=ImplicitValue
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=ImplicitValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ImplicitValue
		public RuleCall getValueImplicitValueParserRuleCall_3_0() { return cValueImplicitValueParserRuleCall_3_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_0 = (Keyword)cStaticAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_3_0_0 = (RuleCall)cParameterAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_1_0 = (RuleCall)cParameterAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnReferenceParserRuleCall_5_1_0 = (RuleCall)cReturnAssignment_5_1.eContents().get(0);
		
		//// e.g.: +add(Name : String) : void
		//Operation:
		//	(visibility=Visibility? & static?="static"?) name=ID "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")"
		//	(":" return=Reference)?;
		public ParserRule getRule() { return rule; }

		//(visibility=Visibility? & static?="static"?) name=ID "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")" (":"
		//return=Reference)?
		public Group getGroup() { return cGroup; }

		//visibility=Visibility? & static?="static"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_0_1() { return cStaticAssignment_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_0_1_0() { return cStaticStaticKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_3_0() { return cParameterAssignment_3_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_0_0() { return cParameterParameterParserRuleCall_3_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1_1() { return cParameterAssignment_3_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_1_0() { return cParameterParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" return=Reference)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//return=Reference
		public Assignment getReturnAssignment_5_1() { return cReturnAssignment_5_1; }

		//Reference
		public RuleCall getReturnReferenceParserRuleCall_5_1_0() { return cReturnReferenceParserRuleCall_5_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplicitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImplicitImplicitValueParserRuleCall_3_1_0 = (RuleCall)cImplicitAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cImplicitAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cImplicitImplicitValueParserRuleCall_3_2_1_0 = (RuleCall)cImplicitAssignment_3_2_1.eContents().get(0);
		
		//// e.g.: Name : String = "John"
		//Parameter:
		//	name=ID ":" type=Reference ("=" implicit+=ImplicitValue ("," implicit+=ImplicitValue)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=Reference ("=" implicit+=ImplicitValue ("," implicit+=ImplicitValue)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Reference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Reference
		public RuleCall getTypeReferenceParserRuleCall_2_0() { return cTypeReferenceParserRuleCall_2_0; }

		//(=> "=" implicit+=ImplicitValue ("," implicit+=ImplicitValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//implicit+=ImplicitValue
		public Assignment getImplicitAssignment_3_1() { return cImplicitAssignment_3_1; }

		//ImplicitValue
		public RuleCall getImplicitImplicitValueParserRuleCall_3_1_0() { return cImplicitImplicitValueParserRuleCall_3_1_0; }

		//("," implicit+=ImplicitValue)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//implicit+=ImplicitValue
		public Assignment getImplicitAssignment_3_2_1() { return cImplicitAssignment_3_2_1; }

		//ImplicitValue
		public RuleCall getImplicitImplicitValueParserRuleCall_3_2_1_0() { return cImplicitImplicitValueParserRuleCall_3_2_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0_0 = (RuleCall)cVisibilityAssignment_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_0 = (Keyword)cStaticAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplicitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplicitImplicitValueParserRuleCall_4_1_0 = (RuleCall)cImplicitAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplicitAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplicitImplicitValueParserRuleCall_4_2_1_0 = (RuleCall)cImplicitAssignment_4_2_1.eContents().get(0);
		
		//// e.g.: +matrix : int[5][5]
		//Attribute:
		//	(visibility=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=ImplicitValue (","
		//	implicit+=ImplicitValue)*)?;
		public ParserRule getRule() { return rule; }

		//(visibility=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=ImplicitValue (","
		//implicit+=ImplicitValue)*)?
		public Group getGroup() { return cGroup; }

		//visibility=Visibility? & static?="static"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0_0() { return cVisibilityAssignment_0_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_0_1() { return cStaticAssignment_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_0_1_0() { return cStaticStaticKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Reference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Reference
		public RuleCall getTypeReferenceParserRuleCall_3_0() { return cTypeReferenceParserRuleCall_3_0; }

		//(=> "=" implicit+=ImplicitValue ("," implicit+=ImplicitValue)*)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//implicit+=ImplicitValue
		public Assignment getImplicitAssignment_4_1() { return cImplicitAssignment_4_1; }

		//ImplicitValue
		public RuleCall getImplicitImplicitValueParserRuleCall_4_1_0() { return cImplicitImplicitValueParserRuleCall_4_1_0; }

		//("," implicit+=ImplicitValue)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implicit+=ImplicitValue
		public Assignment getImplicitAssignment_4_2_1() { return cImplicitAssignment_4_2_1; }

		//ImplicitValue
		public RuleCall getImplicitImplicitValueParserRuleCall_4_2_1_0() { return cImplicitImplicitValueParserRuleCall_4_2_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeExtendedIDParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		//Reference:
		//	type=ExtendedID array+=Array*;
		public ParserRule getRule() { return rule; }

		//type=ExtendedID array+=Array*
		public Group getGroup() { return cGroup; }

		//type=ExtendedID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ExtendedID
		public RuleCall getTypeExtendedIDParserRuleCall_0_0() { return cTypeExtendedIDParserRuleCall_0_0; }

		//array+=Array*
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeNATURALTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} "[" size=NATURAL? "]";
		public ParserRule getRule() { return rule; }

		//{Array} "[" size=NATURAL? "]"
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=NATURAL?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//NATURAL
		public RuleCall getSizeNATURALTerminalRuleCall_2_0() { return cSizeNATURALTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ImplicitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicitValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNULLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRealParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ImplicitValue returns ecore::EString:
		//	NULL | BOOLEAN | STRING | Integer | Real | ID;
		public ParserRule getRule() { return rule; }

		//NULL | BOOLEAN | STRING | Integer | Real | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//NULL
		public RuleCall getNULLTerminalRuleCall_0() { return cNULLTerminalRuleCall_0; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_1() { return cBOOLEANTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//Integer
		public RuleCall getIntegerParserRuleCall_3() { return cIntegerParserRuleCall_3; }

		//Real
		public RuleCall getRealParserRuleCall_4() { return cRealParserRuleCall_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_5() { return cIDTerminalRuleCall_5; }
	}
	
	
	public class RelationshipTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSOCIATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSOCIATIONAssociationKeyword_0_0 = (Keyword)cASSOCIATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEPENCYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEPENCYDepencyKeyword_1_0 = (Keyword)cDEPENCYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGENERALIZATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGENERALIZATIONGeneralizationKeyword_2_0 = (Keyword)cGENERALIZATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREALIZATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREALIZATIONRealizationKeyword_3_0 = (Keyword)cREALIZATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAGGREGATIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAGGREGATIONAggregationKeyword_4_0 = (Keyword)cAGGREGATIONEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITIONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOMPOSITIONCompositionKeyword_5_0 = (Keyword)cCOMPOSITIONEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationshipType:
		//	ASSOCIATION="association" | DEPENCY="depency" | GENERALIZATION="generalization" | REALIZATION="realization" |
		//	AGGREGATION="aggregation" | COMPOSITION="composition";
		public EnumRule getRule() { return rule; }

		//ASSOCIATION="association" | DEPENCY="depency" | GENERALIZATION="generalization" | REALIZATION="realization" |
		//AGGREGATION="aggregation" | COMPOSITION="composition"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASSOCIATION="association"
		public EnumLiteralDeclaration getASSOCIATIONEnumLiteralDeclaration_0() { return cASSOCIATIONEnumLiteralDeclaration_0; }

		//"association"
		public Keyword getASSOCIATIONAssociationKeyword_0_0() { return cASSOCIATIONAssociationKeyword_0_0; }

		//DEPENCY="depency"
		public EnumLiteralDeclaration getDEPENCYEnumLiteralDeclaration_1() { return cDEPENCYEnumLiteralDeclaration_1; }

		//"depency"
		public Keyword getDEPENCYDepencyKeyword_1_0() { return cDEPENCYDepencyKeyword_1_0; }

		//GENERALIZATION="generalization"
		public EnumLiteralDeclaration getGENERALIZATIONEnumLiteralDeclaration_2() { return cGENERALIZATIONEnumLiteralDeclaration_2; }

		//"generalization"
		public Keyword getGENERALIZATIONGeneralizationKeyword_2_0() { return cGENERALIZATIONGeneralizationKeyword_2_0; }

		//REALIZATION="realization"
		public EnumLiteralDeclaration getREALIZATIONEnumLiteralDeclaration_3() { return cREALIZATIONEnumLiteralDeclaration_3; }

		//"realization"
		public Keyword getREALIZATIONRealizationKeyword_3_0() { return cREALIZATIONRealizationKeyword_3_0; }

		//AGGREGATION="aggregation"
		public EnumLiteralDeclaration getAGGREGATIONEnumLiteralDeclaration_4() { return cAGGREGATIONEnumLiteralDeclaration_4; }

		//"aggregation"
		public Keyword getAGGREGATIONAggregationKeyword_4_0() { return cAGGREGATIONAggregationKeyword_4_0; }

		//COMPOSITION="composition"
		public EnumLiteralDeclaration getCOMPOSITIONEnumLiteralDeclaration_5() { return cCOMPOSITIONEnumLiteralDeclaration_5; }

		//"composition"
		public Keyword getCOMPOSITIONCompositionKeyword_5_0() { return cCOMPOSITIONCompositionKeyword_5_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPlusSignKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEHyphenMinusKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDNumberSignKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGE_PRIVATEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPACKAGE_PRIVATETildeKeyword_3_0 = (Keyword)cPACKAGE_PRIVATEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~";
		public EnumRule getRule() { return rule; }

		//PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PUBLIC="+"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPUBLICPlusSignKeyword_0_0() { return cPUBLICPlusSignKeyword_0_0; }

		//PRIVATE="-"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getPRIVATEHyphenMinusKeyword_1_0() { return cPRIVATEHyphenMinusKeyword_1_0; }

		//PROTECTED="#"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"#"
		public Keyword getPROTECTEDNumberSignKeyword_2_0() { return cPROTECTEDNumberSignKeyword_2_0; }

		//PACKAGE_PRIVATE="~"
		public EnumLiteralDeclaration getPACKAGE_PRIVATEEnumLiteralDeclaration_3() { return cPACKAGE_PRIVATEEnumLiteralDeclaration_3; }

		//"~"
		public Keyword getPACKAGE_PRIVATETildeKeyword_3_0() { return cPACKAGE_PRIVATETildeKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private ElementElements pElement;
	private DatatypeElements pDatatype;
	private PackageElements pPackage;
	private ClassifierElements pClassifier;
	private GeneralizationElements pGeneralization;
	private TypeElements pType;
	private FeatureElements pFeature;
	private EnumerationElements pEnumeration;
	private EnumeratorElements pEnumerator;
	private InterfaceElements pInterface;
	private InterfaceFeatureElements pInterfaceFeature;
	private RelationshipElements pRelationship;
	private MultiplicityElements pMultiplicity;
	private MultiplicityValueElements pMultiplicityValue;
	private ConstantElements pConstant;
	private OperationElements pOperation;
	private ParameterElements pParameter;
	private AttributeElements pAttribute;
	private ReferenceElements pReference;
	private ArrayElements pArray;
	private ImplicitValueElements pImplicitValue;
	private RelationshipTypeElements unknownRuleRelationshipType;
	private VisibilityElements unknownRuleVisibility;
	private TerminalRule tCONSTRAINT;
	
	private final GrammarProvider grammarProvider;

	private AnnotationGrammarAccess gaAnnotation;

	@Inject
	public ClassmodelGrammarAccess(GrammarProvider grammarProvider,
		AnnotationGrammarAccess gaAnnotation) {
		this.grammarProvider = grammarProvider;
		this.gaAnnotation = gaAnnotation;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public AnnotationGrammarAccess getAnnotationGrammarAccess() {
		return gaAnnotation;
	}

	
	//Model:
	//	imports+=Import* //(annotation+=Annotation*) => 
	//	elements+=Element*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Element:
	//	Relationship | Classifier | Package | Datatype | Enumeration | Interface;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//// e.g.: datatype int
	//Datatype:
	//	annotation+=Annotation* => "datatype" name=ID;
	public DatatypeElements getDatatypeAccess() {
		return (pDatatype != null) ? pDatatype : (pDatatype = new DatatypeElements());
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//// e.g.: package utils / *..* / end
	//Package:
	//	annotation+=Annotation* => "package" name=ID element+=Element* "end";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//// e.g.: class node / *..* / end
	//Classifier:
	//	annotation+=Annotation* => "class" name=ID => generalization=Generalization? constraint=CONSTRAINT? feature+=Feature*
	//	"end";
	public ClassifierElements getClassifierAccess() {
		return (pClassifier != null) ? pClassifier : (pClassifier = new ClassifierElements());
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//// e.g.: class Apple isA +Fruit
	//Generalization:
	//	"isA" classifier+=Type ("," classifier+=Type)*;
	public GeneralizationElements getGeneralizationAccess() {
		return (pGeneralization != null) ? pGeneralization : (pGeneralization = new GeneralizationElements());
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}

	//// e.g.: isA +Fruit
	//Type:
	//	visibility=Visibility? name=ExtendedID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Feature:
	//	(Attribute | Operation | Constant) constraint=CONSTRAINT?;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//// e.g.: enum Weekend Saturday Sunday end
	//Enumeration:
	//	annotation+=Annotation* => "enum" name=ID constraint=CONSTRAINT? enumerator+=Enumerator* "end";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//// An element of an Enumeration
	//Enumerator returns Feature:
	//	name=ID ("=" value=ImplicitValue)? constraint=CONSTRAINT?;
	public EnumeratorElements getEnumeratorAccess() {
		return (pEnumerator != null) ? pEnumerator : (pEnumerator = new EnumeratorElements());
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}

	//// e.g.: interface Fruit end
	//Interface:
	//	annotation+=Annotation* => "interface" name=ID => generalization=Generalization? constraint=CONSTRAINT?
	//	feature+=InterfaceFeature* "end";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//// An element of an Interface
	//InterfaceFeature returns Feature:
	//	(Operation | Constant) constraint=CONSTRAINT?;
	public InterfaceFeatureElements getInterfaceFeatureAccess() {
		return (pInterfaceFeature != null) ? pInterfaceFeature : (pInterfaceFeature = new InterfaceFeatureElements());
	}
	
	public ParserRule getInterfaceFeatureRule() {
		return getInterfaceFeatureAccess().getRule();
	}

	//// e.g.: composition 0..1 Tree 0..* Leaf end
	//Relationship:
	//	annotation+=Annotation* => type=RelationshipType label=STRING? headNavigable?="navigable"?
	//	headMultiplicity=Multiplicity? head=ExtendedID / *':'* / headLabel=STRING? tailNavigable?="navigable"?
	//	tailMultiplicity=Multiplicity? tail=ExtendedID / *':'* / tailLabel=STRING? "end";
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//// e.g.: 0..1
	//Multiplicity:
	//	upper=MultiplicityValue (".." lower=MultiplicityValue)?;
	public MultiplicityElements getMultiplicityAccess() {
		return (pMultiplicity != null) ? pMultiplicity : (pMultiplicity = new MultiplicityElements());
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//MultiplicityValue returns ecore::EString:
	//	NATURAL | "*";
	public MultiplicityValueElements getMultiplicityValueAccess() {
		return (pMultiplicityValue != null) ? pMultiplicityValue : (pMultiplicityValue = new MultiplicityValueElements());
	}
	
	public ParserRule getMultiplicityValueRule() {
		return getMultiplicityValueAccess().getRule();
	}

	//// e.g.: BUFFER_LENGTH = 512
	//Constant:
	//	visibility=Visibility? name=ID "=" value=ImplicitValue;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//// e.g.: +add(Name : String) : void
	//Operation:
	//	(visibility=Visibility? & static?="static"?) name=ID "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")"
	//	(":" return=Reference)?;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//// e.g.: Name : String = "John"
	//Parameter:
	//	name=ID ":" type=Reference ("=" implicit+=ImplicitValue ("," implicit+=ImplicitValue)*)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// e.g.: +matrix : int[5][5]
	//Attribute:
	//	(visibility=Visibility? & static?="static"?) name=ID ":" type=Reference ("=" implicit+=ImplicitValue (","
	//	implicit+=ImplicitValue)*)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Reference:
	//	type=ExtendedID array+=Array*;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Array:
	//	{Array} "[" size=NATURAL? "]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//ImplicitValue returns ecore::EString:
	//	NULL | BOOLEAN | STRING | Integer | Real | ID;
	public ImplicitValueElements getImplicitValueAccess() {
		return (pImplicitValue != null) ? pImplicitValue : (pImplicitValue = new ImplicitValueElements());
	}
	
	public ParserRule getImplicitValueRule() {
		return getImplicitValueAccess().getRule();
	}

	//enum RelationshipType:
	//	ASSOCIATION="association" | DEPENCY="depency" | GENERALIZATION="generalization" | REALIZATION="realization" |
	//	AGGREGATION="aggregation" | COMPOSITION="composition";
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return (unknownRuleRelationshipType != null) ? unknownRuleRelationshipType : (unknownRuleRelationshipType = new RelationshipTypeElements());
	}
	
	public EnumRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}

	//enum Visibility:
	//	PUBLIC="+" | PRIVATE="-" | PROTECTED="#" | PACKAGE_PRIVATE="~";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//// {name.length > 0}
	//terminal CONSTRAINT:
	//	"{"->"}";
	public TerminalRule getCONSTRAINTRule() {
		return (tCONSTRAINT != null) ? tCONSTRAINT : (tCONSTRAINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONSTRAINT"));
	} 

	//// e.g.: @Generate(Java)
	//Annotation:
	//	"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?;
	public AnnotationGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotation.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// e.g.: @Generate(language = Java)
	//AssignParameter returns Parameter:
	//	name=ExtendedID "=" value=Value;
	public AnnotationGrammarAccess.AssignParameterElements getAssignParameterAccess() {
		return gaAnnotation.getAssignParameterAccess();
	}
	
	public ParserRule getAssignParameterRule() {
		return getAssignParameterAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//ValueParameter returns Parameter:
	//	value=Value;
	public AnnotationGrammarAccess.ValueParameterElements getValueParameterAccess() {
		return gaAnnotation.getValueParameterAccess();
	}
	
	public ParserRule getValueParameterRule() {
		return getValueParameterAccess().getRule();
	}

	//// e.g.: null
	//Value returns ecore::EString:
	//	Integer | STRING | ExtendedID | BOOLEAN | NULL | Real;
	public AnnotationGrammarAccess.ValueElements getValueAccess() {
		return gaAnnotation.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ExtendedID:
	//	ID ("." ID)*;
	public AnnotationGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotation.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// e.g.: Extended Value with whitespace support. In order to make
	//// this rule works, use hidden() as in following example:
	//// Guard hidden(): 'if ' expr=Expression ' then';   
	//ValueWithSpaces hidden():
	//	(Value | ANY_OTHER | WS)*;
	public AnnotationGrammarAccess.ValueWithSpacesElements getValueWithSpacesAccess() {
		return gaAnnotation.getValueWithSpacesAccess();
	}
	
	public ParserRule getValueWithSpacesRule() {
		return getValueWithSpacesAccess().getRule();
	}

	//CompositeID returns ecore::EString:
	//	ExtendedID | STRING;
	public AnnotationGrammarAccess.CompositeIDElements getCompositeIDAccess() {
		return gaAnnotation.getCompositeIDAccess();
	}
	
	public ParserRule getCompositeIDRule() {
		return getCompositeIDAccess().getRule();
	}

	//Real returns ecore::EDouble:
	//	"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?;
	public AnnotationGrammarAccess.RealElements getRealAccess() {
		return gaAnnotation.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer returns ecore::EInt:
	//	"-"? NATURAL;
	public AnnotationGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotation.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// FIXME: http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B
	//terminal OPERATOR:
	//	"++" | "--" | "==" | ">=" | "<=" | "!=" | "<>" | "||" | "&&" | "-=" | "+=" | "=" | ">>" | "<<" | "|=";
	public TerminalRule getOPERATORRule() {
		return gaAnnotation.getOPERATORRule();
	} 

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaAnnotation.getBOOLEANRule();
	} 

	//terminal NULL:
	//	"null" | "nil" | "NULL";
	public TerminalRule getNULLRule() {
		return gaAnnotation.getNULLRule();
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaAnnotation.getIDRule();
	} 

	//terminal NATURAL returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getNATURALRule() {
		return gaAnnotation.getNATURALRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAnnotation.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotation.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotation.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAnnotation.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaAnnotation.getANY_OTHERRule();
	} 
}
