/*
* generated by Xtext
*/
grammar InternalClassmodel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cz.cvut.earlgrey.classmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.classmodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cz.cvut.earlgrey.classmodel.services.ClassmodelGrammarAccess;

}

@parser::members {

 	private ClassmodelGrammarAccess grammarAccess;
 	
    public InternalClassmodelParser(TokenStream input, ClassmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ClassmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getRelationshipParserRuleCall_0()); 
    }
    this_Relationship_0=ruleRelationship
    { 
        $current = $this_Relationship_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getClassifierParserRuleCall_1()); 
    }
    this_Classifier_1=ruleClassifier
    { 
        $current = $this_Classifier_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getPackageParserRuleCall_2()); 
    }
    this_Package_2=rulePackage
    { 
        $current = $this_Package_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getDatatypeParserRuleCall_3()); 
    }
    this_Datatype_3=ruleDatatype
    { 
        $current = $this_Datatype_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDatatype
entryRuleDatatype returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	 iv_ruleDatatype=ruleDatatype 
	 { $current=$iv_ruleDatatype.current; } 
	 EOF 
;

// Rule Datatype
ruleDatatype returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='datatype' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatatypeAccess().getDatatypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatatypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getElementElementParserRuleCall_2_0()); 
	    }
		lv_element_2_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPackageAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleClassifier
entryRuleClassifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifierRule()); }
	 iv_ruleClassifier=ruleClassifier 
	 { $current=$iv_ruleClassifier.current; } 
	 EOF 
;

// Rule Classifier
ruleClassifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassifierAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassifierAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
ruleGeneralization
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierAccess().getGeneralizationGeneralizationParserRuleCall_2_0()); 
	    }
		lv_generalization_2_0=ruleGeneralization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierRule());
	        }
       		set(
       			$current, 
       			"generalization",
        		lv_generalization_2_0, 
        		"Generalization");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_constraint_3_0=RULE_CONSTRAINT
		{
			newLeafNode(lv_constraint_3_0, grammarAccess.getClassifierAccess().getConstraintCONSTRAINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"CONSTRAINT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierAccess().getFeatureFeatureParserRuleCall_4_0()); 
	    }
		lv_feature_4_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierRule());
	        }
       		add(
       			$current, 
       			"feature",
        		lv_feature_4_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassifierAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_3_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleGeneralization
entryRuleGeneralization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneralizationRule()); }
	 iv_ruleGeneralization=ruleGeneralization 
	 { $current=$iv_ruleGeneralization.current; } 
	 EOF 
;

// Rule Generalization
ruleGeneralization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isA' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGeneralizationAccess().getIsAKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneralizationAccess().getClassifierExtendedIDParserRuleCall_1_0()); 
	    }
		lv_classifier_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneralizationRule());
	        }
       		add(
       			$current, 
       			"classifier",
        		lv_classifier_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGeneralizationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneralizationAccess().getClassifierExtendedIDParserRuleCall_2_1_0()); 
	    }
		lv_classifier_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneralizationRule());
	        }
       		add(
       			$current, 
       			"classifier",
        		lv_classifier_3_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getOperationParserRuleCall_0_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getConstantParserRuleCall_0_2()); 
    }
    this_Constant_2=ruleConstant
    { 
        $current = $this_Constant_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		lv_constraint_3_0=RULE_CONSTRAINT
		{
			newLeafNode(lv_constraint_3_0, grammarAccess.getFeatureAccess().getConstraintCONSTRAINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"CONSTRAINT");
	    }

)
)?)
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getTypeRelationshipTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleRelationshipType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"RelationshipType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_label_1_0=RULE_STRING
		{
			newLeafNode(lv_label_1_0, grammarAccess.getRelationshipAccess().getLabelSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"STRING");
	    }

)
)?(
(
		lv_headNavigable_2_0=	'navigable' 
    {
        newLeafNode(lv_headNavigable_2_0, grammarAccess.getRelationshipAccess().getHeadNavigableNavigableKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
       		setWithLastConsumed($current, "headNavigable", true, "navigable");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getHeadMultiplicityMultiplicityParserRuleCall_3_0()); 
	    }
		lv_headMultiplicity_3_0=ruleMultiplicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"headMultiplicity",
        		lv_headMultiplicity_3_0, 
        		"Multiplicity");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getHeadExtendedIDParserRuleCall_4_0()); 
	    }
		lv_head_4_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_4_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRelationshipAccess().getColonKeyword_5_0());
    }
(
(
		lv_headLabel_6_0=RULE_STRING
		{
			newLeafNode(lv_headLabel_6_0, grammarAccess.getRelationshipAccess().getHeadLabelSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"headLabel",
        		lv_headLabel_6_0, 
        		"STRING");
	    }

)
))?(
(
		lv_tailNavigable_7_0=	'navigable' 
    {
        newLeafNode(lv_tailNavigable_7_0, grammarAccess.getRelationshipAccess().getTailNavigableNavigableKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
       		setWithLastConsumed($current, "tailNavigable", true, "navigable");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getTailMultiplicityMultiplicityParserRuleCall_7_0()); 
	    }
		lv_tailMultiplicity_8_0=ruleMultiplicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"tailMultiplicity",
        		lv_tailMultiplicity_8_0, 
        		"Multiplicity");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getTailExtendedIDParserRuleCall_8_0()); 
	    }
		lv_tail_9_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		set(
       			$current, 
       			"tail",
        		lv_tail_9_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRelationshipAccess().getColonKeyword_9_0());
    }
(
(
		lv_tailLabel_11_0=RULE_STRING
		{
			newLeafNode(lv_tailLabel_11_0, grammarAccess.getRelationshipAccess().getTailLabelSTRINGTerminalRuleCall_9_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tailLabel",
        		lv_tailLabel_11_0, 
        		"STRING");
	    }

)
))?	otherlv_12='end' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRelationshipAccess().getEndKeyword_10());
    }
)
;





// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	 iv_ruleMultiplicity=ruleMultiplicity 
	 { $current=$iv_ruleMultiplicity.current; } 
	 EOF 
;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicityAccess().getUpperMultiplicityValueParserRuleCall_0_0()); 
	    }
		lv_upper_0_0=ruleMultiplicityValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicityRule());
	        }
       		set(
       			$current, 
       			"upper",
        		lv_upper_0_0, 
        		"MultiplicityValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='..' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicityAccess().getLowerMultiplicityValueParserRuleCall_1_1_0()); 
	    }
		lv_lower_2_0=ruleMultiplicityValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicityRule());
	        }
       		set(
       			$current, 
       			"lower",
        		lv_lower_2_0, 
        		"MultiplicityValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplicityValue
entryRuleMultiplicityValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicityValueRule()); } 
	 iv_ruleMultiplicityValue=ruleMultiplicityValue 
	 { $current=$iv_ruleMultiplicityValue.current.getText(); }  
	 EOF 
;

// Rule MultiplicityValue
ruleMultiplicityValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicityValueAccess().getIntegerParserRuleCall_0()); 
    }
    this_Integer_0=ruleInteger    {
		$current.merge(this_Integer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplicityValueAccess().getAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getModifierVisibilityEnumRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleVisibility		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"Visibility");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueImplicitValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleImplicitValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"ImplicitValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getModifierVisibilityEnumRuleCall_0_0_0()); 
	    }
		lv_modifier_1_0=ruleVisibility		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"Visibility");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 1);
	 				}
					({true}?=>(
(
		lv_static_2_0=	'static' 
    {
        newLeafNode(lv_static_2_0, grammarAccess.getOperationAccess().getStaticStaticKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	}

)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2());
    }
(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_0_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_parameter_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOperationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOperationAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getReturnReferenceParserRuleCall_6_0()); 
	    }
		lv_return_10_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_10_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'=' 
)=>	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getEqualsSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_1_0()); 
	    }
		lv_implicit_4_0=ruleImplicitValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		add(
       			$current, 
       			"implicit",
        		lv_implicit_4_0, 
        		"ImplicitValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParameterAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_2_1_0()); 
	    }
		lv_implicit_6_0=ruleImplicitValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		add(
       			$current, 
       			"implicit",
        		lv_implicit_6_0, 
        		"ImplicitValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getModifierVisibilityEnumRuleCall_0_0_0()); 
	    }
		lv_modifier_1_0=ruleVisibility		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"Visibility");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 1);
	 				}
					({true}?=>(
(
		lv_static_2_0=	'static' 
    {
        newLeafNode(lv_static_2_0, grammarAccess.getAttributeAccess().getStaticStaticKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	}

)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeReferenceParserRuleCall_3_0()); 
	    }
		lv_type_5_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'=' 
)=>	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getEqualsSignKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_1_0()); 
	    }
		lv_implicit_7_0=ruleImplicitValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		add(
       			$current, 
       			"implicit",
        		lv_implicit_7_0, 
        		"ImplicitValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAttributeAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_2_1_0()); 
	    }
		lv_implicit_9_0=ruleImplicitValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		add(
       			$current, 
       			"implicit",
        		lv_implicit_9_0, 
        		"ImplicitValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getTypeExtendedIDParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getArrayArrayParserRuleCall_1_0()); 
	    }
		lv_array_1_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		add(
       			$current, 
       			"array",
        		lv_array_1_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayAccess().getArrayAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_size_2_0=RULE_INT
		{
			newLeafNode(lv_size_2_0, grammarAccess.getArrayAccess().getSizeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"INT");
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleImplicitValue
entryRuleImplicitValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicitValueRule()); } 
	 iv_ruleImplicitValue=ruleImplicitValue 
	 { $current=$iv_ruleImplicitValue.current.getText(); }  
	 EOF 
;

// Rule ImplicitValue
ruleImplicitValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NULL_0=RULE_NULL    {
		$current.merge(this_NULL_0);
    }

    { 
    newLeafNode(this_NULL_0, grammarAccess.getImplicitValueAccess().getNULLTerminalRuleCall_0()); 
    }

    |    this_FALSE_1=RULE_FALSE    {
		$current.merge(this_FALSE_1);
    }

    { 
    newLeafNode(this_FALSE_1, grammarAccess.getImplicitValueAccess().getFALSETerminalRuleCall_1()); 
    }

    |    this_TRUE_2=RULE_TRUE    {
		$current.merge(this_TRUE_2);
    }

    { 
    newLeafNode(this_TRUE_2, grammarAccess.getImplicitValueAccess().getTRUETerminalRuleCall_2()); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getImplicitValueAccess().getSTRINGTerminalRuleCall_3()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitValueAccess().getIntegerParserRuleCall_4()); 
    }
    this_Integer_4=ruleInteger    {
		$current.merge(this_Integer_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImplicitValueAccess().getDoubleParserRuleCall_5()); 
    }
    this_Double_5=ruleDouble    {
		$current.merge(this_Double_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getImplicitValueAccess().getIDTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntegerAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule RelationshipType
ruleRelationshipType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='association' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getASSOCIATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationshipTypeAccess().getASSOCIATIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='depency' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getDEPENCYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationshipTypeAccess().getDEPENCYEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='generalization' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getGENERALIZATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationshipTypeAccess().getGENERALIZATIONEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='realization' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getREALIZATIONEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationshipTypeAccess().getREALIZATIONEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='aggregation' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getAGGREGATIONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationshipTypeAccess().getAGGREGATIONEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='composition' 
	{
        $current = grammarAccess.getRelationshipTypeAccess().getCOMPOSITIONEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationshipTypeAccess().getCOMPOSITIONEnumLiteralDeclaration_5()); 
    }
));



// Rule Visibility
ruleVisibility returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='#' 
	{
        $current = grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='~' 
	{
        $current = grammarAccess.getVisibilityAccess().getPACKAGE_PRIVATEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getVisibilityAccess().getPACKAGE_PRIVATEEnumLiteralDeclaration_3()); 
    }
));



RULE_CONSTRAINT : '{' ( options {greedy=false;} : . )*'}';

RULE_TRUE : 'true';

RULE_NULL : 'null';

RULE_FALSE : 'false';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


