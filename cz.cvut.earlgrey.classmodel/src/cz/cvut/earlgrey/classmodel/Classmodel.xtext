grammar cz.cvut.earlgrey.classmodel.Classmodel with cz.cvut.earlgrey.annotation.Annotation

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate classmodel "http://www.cvut.cz/earlgrey/classmodel/Classmodel"

Model:
    //(annotation+=Annotation*) => 
    (imports+=Import)* (elements+=Element)*
;

Import:
    'import' importURI=STRING
;

Element:
    Relationship
    | Package
    | Entity
;

Entity:
    Datatype
    | Classifier
    | Enumeration
;

// e.g.: datatype int
Datatype:
    annotation+=Annotation* =>
    'datatype' name=ID
;

// e.g.: package utils /*..*/ end
Package:
    annotation+=Annotation* =>
    'package' name=ID
        element+=Element*
    'end'
;

// e.g.: class node /*..*/ end
Classifier:
    annotation+=Annotation* =>
    'class' name=ID (=> 'isA' generalization+=Type (',' generalization+=Type)*)? (=> 'in' upperClass=Type)?
        (constraint=CONSTRAINT)?
        feature+=Feature*
    'end'
;

// e.g.: class Apple isA +Fruit
//Generalization:
//    'isA' classifier+=Type (',' classifier+=Type)*
//;

// e.g.: isA +Fruit
Type:
    visibility=Visibility? name=[Entity|ExtendedID]
;

Feature:
    (Attribute | Operation | Constant) (constraint=CONSTRAINT)?
;

// e.g.: enum Weekend Saturday Sunday end
Enumeration:
    annotation+=Annotation* =>
    'enum' name=ID (=> 'in' upperClass=Type)?
        (constraint=CONSTRAINT)?
        enumerator+=Enumerator*
    'end'
;

// An element of an Enumeration
Enumerator returns Feature:
    name=ID (=> '=' value=ImplicitValue)? (constraint=CONSTRAINT)?
;

// e.g.: composition Tree [0..1] Leaf [0..*] end
Relationship:
    Association
    | Aggregation
    | Composition
    | Generalization
    | Dependency
    | Realization
;

//enum AssociationType:
//    ASSOCIATION = 'association'
//    | AGGREGATION = 'aggregation'
//    | COMPOSITION = 'composition'
//;


//ugly, breaking DRY principle!!!
Association:
    annotation+=Annotation* =>
    'association' (label=CompositeID)?
        (headNavigable?='unnavigable')? (headVisibility=Visibility? headLabel=CompositeID ':')?
            head=[Entity|ExtendedID] '[' headMultiplicity=Multiplicity ']'
        (tailNavigable?='unnavigable')? (tailVisibility=Visibility? tailLabel=CompositeID ':')?
            tail=[Entity|ExtendedID] '[' tailMultiplicity=Multiplicity ']'
    'end'
;

Aggregation:
    annotation+=Annotation* =>
    'aggregation' (label=CompositeID)?
        (headNavigable?='unnavigable')? (headVisibility=Visibility? headLabel=CompositeID ':')?
            head=[Entity|ExtendedID] '[' headMultiplicity=Multiplicity ']'
        (tailNavigable?='unnavigable')? (tailVisibility=Visibility? tailLabel=CompositeID ':')?
            tail=[Entity|ExtendedID] '[' tailMultiplicity=Multiplicity ']'
    'end'
;

Composition:
    annotation+=Annotation* =>
    'composition' (label=CompositeID)?
        (headNavigable?='unnavigable')? (headVisibility=Visibility? headLabel=CompositeID ':')?
            head=[Entity|ExtendedID] '[' headMultiplicity=Multiplicity ']'
        (tailNavigable?='unnavigable')? (tailVisibility=Visibility? tailLabel=CompositeID ':')?
            tail=[Entity|ExtendedID] '[' tailMultiplicity=Multiplicity ']'
    'end'
;

Generalization:
    annotation+=Annotation* =>
    'generalization' (label=CompositeID)?
            head=[Entity|ExtendedID]
            tail=[Entity|ExtendedID]
    'end'
;

Dependency:
    annotation+=Annotation* =>
    'dependency' (label=CompositeID)?
            head=[Entity|ExtendedID]
            tail=[Entity|ExtendedID]
    'end'
;

Realization:
    annotation+=Annotation* =>
    'realization' (label=CompositeID)?
            head=[Entity|ExtendedID]
            tail=[Entity|ExtendedID]
    'end'
;

// e.g.: 0..1
Multiplicity:
    lower=MultiplicityValue (=> '..' upper=MultiplicityValue)?
;

MultiplicityValue returns ecore::EString:
    NATURAL | '*'
;

// e.g.: BUFFER_LENGTH = 512
Constant:
    visibility=Visibility? name=ID '=' value=ImplicitValue
;

// e.g.: +add(Name : String) : void
Operation:
    (visibility=Visibility? & static?='static'?) name=ID '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')'
    (':' return = Reference)? (body = BODY)?
;

// e.g.: Name : String = "John"
Parameter:
    name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

// e.g.: +matrix : int[5][5]
Attribute:
    (visibility=Visibility? & static?='static'?) name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

Reference:
    type=[Entity|ExtendedID] array+=Array*
;

Array:
    {Array} '[' size=Multiplicity? ']'
;

ImplicitValue returns ecore::EString:
    NULL
    | BOOLEAN
    | STRING
    | Integer
    | Real
    | ID
;

enum Visibility:
    PUBLIC='+'
    | PRIVATE='-'
    | PROTECTED='#'
    | PACKAGE_PRIVATE='~'
;

// {name.length > 0}
terminal CONSTRAINT:
    '{'->'}'
;

terminal BODY:
    '[[' -> ']]'
;
