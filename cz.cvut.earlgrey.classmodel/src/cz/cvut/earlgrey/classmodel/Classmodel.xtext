grammar cz.cvut.earlgrey.classmodel.Classmodel hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.cvut.cz/earlgrey/annotation/Annotation" as anno

generate classmodel "http://www.cvut.cz/earlgrey/classmodel/Classmodel"

Model:
    (imports+=Import)* (elements+=Element)*
;

Import:
    'import' importURI=STRING
;

Element:
    Relationship
    | Classifier
    | Package
    | Datatype
;

// e.g.: datatype int
Datatype:
    //annotation+=Annotation*
    'datatype' name=ID
;

// e.g.: package utils /*..*/ end
Package:
    'package' name=ID
        element+=Element*
    'end'
;

// e.g.: class node /*..*/ end
Classifier:
    'class' name=ID (=> generalization=Generalization)?
        (constraint=CONSTRAINT)?
        feature+=Feature*
    'end'
;

// e.g.: class Apple isA +Fruit
Generalization:
    'isA' classifier+=Type (',' classifier+=Type)*
;

// e.g.: isA +Fruit
Type:
    visibility=Visibility? name=ExtendedID
;

Feature:
    (Attribute | Operation | Constant) (constraint=CONSTRAINT)?
;

// e.g.: composition 0..1 Tree 0..* Leaft end
Relationship:
    type=RelationshipType (label=STRING)?
        (headNavigable?='navigable')? (headMultiplicity=Multiplicity)? head=ExtendedID (':' headLabel=STRING)? //tip: remove ':'?
        (tailNavigable?='navigable')? (tailMultiplicity=Multiplicity)? tail=ExtendedID (':' tailLabel=STRING)? //tip: remove ':'?
    'end'
;

// e.g.: 0..1
Multiplicity:
    upper=MultiplicityValue ('..' lower=MultiplicityValue)?
;

MultiplicityValue returns ecore::EString:
    INT | '*'
;

// e.g.: BUFFER_LENGTH = 512
Constant:
    visibility=Visibility? name=ID '=' value=ImplicitValue
;

// e.g.: +add(Name : String) : void
Operation:
    (visibility=Visibility? & static?='static'?) name=ID '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')'
    (':' return = Reference)?
;

// e.g.: Name : String = "John"
Parameter:
    name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

// e.g.: +matrix : int[5][5]
Attribute:
    (visibility=Visibility? & static?='static'?) name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

Reference:
    type=ExtendedID array+=Array*
;

Array:
    {Array} '[' size=INT? ']'
;

ImplicitValue returns ecore::EString:
    NULL
    | BOOLEAN
    | STRING
    | INT
    | DOUBLE 
    | ID
;

enum RelationshipType:
    ASSOCIATION = 'association'
    | DEPENCY = 'depency'
    | GENERALIZATION = 'generalization'
    | REALIZATION = 'realization'
    | AGGREGATION = 'aggregation'
    | COMPOSITION = 'composition'
;

enum Visibility:
    PUBLIC='+'
    | PRIVATE='-'
    | PROTECTED='#'
    | PACKAGE_PRIVATE='~'
;

ExtendedID:
    ID ('.' ID)*
;

// {name.length > 0}
terminal CONSTRAINT:
    '{'->'}'
;

terminal BOOLEAN:
    'true' | 'false'
;

terminal NULL:
    'null' | 'nil' | 'NULL'
;

terminal ID:
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;

terminal INT returns ecore::EInt:
    '-'? ('0'..'9')+
;

terminal DOUBLE returns ecore::EDouble:
    '-'? ('0'..'9')+ ('.' ('0'..'9')*) 'd'?
    | '-'? ('0'..'9')+ 'd'
;

terminal STRING: 
    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
    | "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
; 

terminal ML_COMMENT:
    '/*' -> '*/'
;

terminal SL_COMMENT:
    '//' !('\n'|'\r')* ('\r'? '\n')?
;

terminal WS:
    (' '|'\t'|'\r'|'\n')+
;

terminal ANY_OTHER:
    .
;
