grammar cz.cvut.earlgrey.classmodel.Classmodel with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate classmodel "http://www.cvut.cz/earlgrey/classmodel/Classmodel"

Model:
    (imports+=Import)* (elements+=Element)*
;

Import:
    'import' importURI=STRING
;

Element:
//    {Element} (annotation=Annotation)?
        Relationship
        | Classifier
        | Package
        | Datatype
;

// e.g.: datatype int
Datatype:
    'datatype' name=ID
;

// e.g.: package utils /*..*/ end
Package:
    'package' name=ID
        element+=Element*
    'end'
;

// e.g.: class node /*..*/ end
Classifier:
    'class' name=ID (=> generalization=Generalization)?
        (constraint=CONSTRAINT)?
        feature+=Feature*
    'end'
;

//TEST
Annotation:
    '@' name=ID
    ('('
        (annotations+=Annotation)*
    ')')?
;

// e.g.: isA Fruit
Generalization:
    'isA' classifier+=ExtendedID (',' classifier+=ExtendedID)*
;

Feature:
    (Attribute | Operation | Constant) (constraint=CONSTRAINT)?
;

// e.g.: composition 0..1 Tree 0..* Leaft end
Relationship:
    type=RelationshipType (label=STRING)?
        (headNavigable?='navigable')? (headMultiplicity=Multiplicity)? head=ExtendedID (':' headLabel=STRING)? //tip: remove ':'?
        (tailNavigable?='navigable')? (tailMultiplicity=Multiplicity)? tail=ExtendedID (':' tailLabel=STRING)? //tip: remove ':'?
    'end'
;

// e.g.: 0..1
Multiplicity:
    upper=MultiplicityValue ('..' lower=MultiplicityValue)?
;

MultiplicityValue returns ecore::EString:
    Integer | '*'
;

// e.g.: BUFFER_LENGTH = 512
Constant:
    modifier=Visibility? name=ID '=' value=ImplicitValue
;

// e.g.: +add(Name : String) : void
Operation:
    (modifier=Visibility? & static?='static'?) name=ID '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')'
    ':' return = Reference
;

// e.g.: Name : String = "John"
Parameter:
    name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

// e.g.: +matrix : int[5][5]
Attribute:
    (modifier=Visibility? & static?='static'?) name=ID ':' type=Reference (=> '=' implicit+=ImplicitValue (',' implicit+=ImplicitValue)*)?
;

Reference:
    type=ExtendedID array+=Array*
;

Array:
    {Array} '[' size=INT? ']'
;

ImplicitValue returns ecore::EString:
    NULL
    | FALSE
    | TRUE
    | STRING
    | Integer
    | Double 
    | ID
;

Integer returns ecore::EString:
    INT
;

Double returns ecore::EString:
    INT '.' INT
;

enum RelationshipType:
    ASSOCIATION = 'association'
    | DEPENCY = 'depency'
    | GENERALIZATION = 'generalization'
    | REALIZATION = 'realization'
    | AGGREGATION = 'aggregation'
    | COMPOSITION = 'composition'
;

enum Visibility:
    PUBLIC='+'
    | PRIVATE='-'
    | PROTECTED='#'
    | PACKAGE_PRIVATE='~'
;

ExtendedID:
    ID ('.' ID)*
;

// {name.length > 0}
terminal CONSTRAINT:
    '{'->'}'
;

terminal TRUE:
    'true'
;

terminal NULL:
    'null'
;

terminal FALSE:
    'false'
;
