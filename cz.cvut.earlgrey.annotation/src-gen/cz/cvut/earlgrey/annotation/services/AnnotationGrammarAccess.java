/*
* generated by Xtext
*/

package cz.cvut.earlgrey.annotation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AnnotationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_2_2_1_0 = (RuleCall)cParameterAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// e.g.: @Generate(Java)
		//Annotation:
		//	"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ExtendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }

		//(=> "(" parameter+=Parameter ("," parameter+=Parameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_1_0() { return cParameterParameterParserRuleCall_2_1_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_2_2_1() { return cParameterAssignment_2_2_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_2_1_0() { return cParameterParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Parameter:
		//	AssignParameter | ValueParameter;
		public ParserRule getRule() { return rule; }

		//AssignParameter | ValueParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignParameter
		public RuleCall getAssignParameterParserRuleCall_0() { return cAssignParameterParserRuleCall_0; }

		//ValueParameter
		public RuleCall getValueParameterParserRuleCall_1() { return cValueParameterParserRuleCall_1; }
	}

	public class AssignParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// e.g.: @Generate(language = Java)
		//AssignParameter returns Parameter:
		//	name=ExtendedID "=" value=Value;
		public ParserRule getRule() { return rule; }

		//name=ExtendedID "=" value=Value
		public Group getGroup() { return cGroup; }

		//name=ExtendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueParameter");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// e.g.: @Generate(Java)
		//ValueParameter returns Parameter:
		//	value=Value;
		public ParserRule getRule() { return rule; }

		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtendedIDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNULLTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// e.g.: null
		//Value returns ecore::EString:
		//	INT | STRING | ExtendedID | BOOLEAN | NULL | Double;
		public ParserRule getRule() { return rule; }

		//INT | STRING | ExtendedID | BOOLEAN | NULL | Double
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//ExtendedID
		public RuleCall getExtendedIDParserRuleCall_2() { return cExtendedIDParserRuleCall_2; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }

		//NULL
		public RuleCall getNULLTerminalRuleCall_4() { return cNULLTerminalRuleCall_4; }

		//Double
		public RuleCall getDoubleParserRuleCall_5() { return cDoubleParserRuleCall_5; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double returns ecore::EString:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class ExtendedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// e.g.: ElementType.METHOD
		//ExtendedID returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private AnnotationElements pAnnotation;
	private ParameterElements pParameter;
	private AssignParameterElements pAssignParameter;
	private ValueParameterElements pValueParameter;
	private ValueElements pValue;
	private DoubleElements pDouble;
	private ExtendedIDElements pExtendedID;
	private TerminalRule tBOOLEAN;
	private TerminalRule tNULL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnnotationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// e.g.: @Generate(Java)
	//Annotation:
	//	"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Parameter:
	//	AssignParameter | ValueParameter;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// e.g.: @Generate(language = Java)
	//AssignParameter returns Parameter:
	//	name=ExtendedID "=" value=Value;
	public AssignParameterElements getAssignParameterAccess() {
		return (pAssignParameter != null) ? pAssignParameter : (pAssignParameter = new AssignParameterElements());
	}
	
	public ParserRule getAssignParameterRule() {
		return getAssignParameterAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//ValueParameter returns Parameter:
	//	value=Value;
	public ValueParameterElements getValueParameterAccess() {
		return (pValueParameter != null) ? pValueParameter : (pValueParameter = new ValueParameterElements());
	}
	
	public ParserRule getValueParameterRule() {
		return getValueParameterAccess().getRule();
	}

	//// e.g.: null
	//Value returns ecore::EString:
	//	INT | STRING | ExtendedID | BOOLEAN | NULL | Double;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Double returns ecore::EString:
	//	INT "." INT;
	public DoubleElements getDoubleAccess() {
		return (pDouble != null) ? pDouble : (pDouble = new DoubleElements());
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//// e.g.: ElementType.METHOD
	//ExtendedID returns ecore::EString:
	//	ID ("." ID)*;
	public ExtendedIDElements getExtendedIDAccess() {
		return (pExtendedID != null) ? pExtendedID : (pExtendedID = new ExtendedIDElements());
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal NULL:
	//	"null" | "nil";
	public TerminalRule getNULLRule() {
		return (tNULL != null) ? tNULL : (tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
