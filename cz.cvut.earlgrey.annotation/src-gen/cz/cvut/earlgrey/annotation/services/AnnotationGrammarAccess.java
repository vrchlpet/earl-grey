/*
* generated by Xtext
*/

package cz.cvut.earlgrey.annotation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class AnnotationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_1_0 = (RuleCall)cPropertyAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPropertyAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_2_2_1_0 = (RuleCall)cPropertyAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// e.g.: @Generate(Java)
		//
		//Annotation:
		//	"@" name=ExtendedID ("(" property+=Property ("," property+=Property)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=ExtendedID ("(" property+=Property ("," property+=Property)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ExtendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }

		//("(" property+=Property ("," property+=Property)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_1() { return cPropertyAssignment_2_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_1_0() { return cPropertyPropertyParserRuleCall_2_1_0; }

		//("," property+=Property)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//property+=Property
		public Assignment getPropertyAssignment_2_2_1() { return cPropertyAssignment_2_2_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_2_1_0() { return cPropertyPropertyParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	AssignProperty | ValueProperty;
		public ParserRule getRule() { return rule; }

		//AssignProperty | ValueProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignProperty
		public RuleCall getAssignPropertyParserRuleCall_0() { return cAssignPropertyParserRuleCall_0; }

		//ValueProperty
		public RuleCall getValuePropertyParserRuleCall_1() { return cValuePropertyParserRuleCall_1; }
	}

	public class AssignPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExtendedIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// e.g.: @Generate(language = Java)
		//
		//AssignProperty returns Property:
		//	name=ExtendedID "=" value=Value;
		public ParserRule getRule() { return rule; }

		//name=ExtendedID "=" value=Value
		public Group getGroup() { return cGroup; }

		//name=ExtendedID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_0_0() { return cNameExtendedIDParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValuePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueProperty");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// e.g.: @Generate(Java)
		//
		//ValueProperty returns Property:
		//	value=Value;
		public ParserRule getRule() { return rule; }

		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtendedIDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNULLTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRealParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// e.g.: null
		//
		//Value returns ecore::EString:
		//	Integer | STRING | ExtendedID | BOOLEAN | NULL | Real;
		public ParserRule getRule() { return rule; }

		//Integer | STRING | ExtendedID | BOOLEAN | NULL | Real
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//ExtendedID
		public RuleCall getExtendedIDParserRuleCall_2() { return cExtendedIDParserRuleCall_2; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }

		//NULL
		public RuleCall getNULLTerminalRuleCall_4() { return cNULLTerminalRuleCall_4; }

		//Real
		public RuleCall getRealParserRuleCall_5() { return cRealParserRuleCall_5; }
	}

	public class ExtendedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExtendedID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ValueWithSpacesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueWithSpaces");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// e.g.: Extended Value with whitespace support. In order to make
		//
		//// this rule works, use hidden() as in following example:
		//
		//// Guard hidden(): 'if ' expr=Expression ' then';   
		//
		//ValueWithSpaces hidden():
		//	(Value | ANY_OTHER | WS)*;
		public ParserRule getRule() { return rule; }

		//(Value | ANY_OTHER | WS)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}

	public class CompositeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtendedIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CompositeID returns ecore::EString:
		//	ExtendedID | STRING;
		public ParserRule getRule() { return rule; }

		//ExtendedID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExtendedID
		public RuleCall getExtendedIDParserRuleCall_0() { return cExtendedIDParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNATURALTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//Real returns ecore::EDouble:
		//	"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?;
		public ParserRule getRule() { return rule; }

		//"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_1() { return cNATURALTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_3() { return cNATURALTerminalRuleCall_3; }

		//(("e" | "E") ("+" | "-") NATURAL)?
		public Group getGroup_4() { return cGroup_4; }

		//"e" | "E"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"e"
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//"E"
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//"+" | "-"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//"+"
		public Keyword getPlusSignKeyword_4_1_0() { return cPlusSignKeyword_4_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_1_1() { return cHyphenMinusKeyword_4_1_1; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_4_2() { return cNATURALTerminalRuleCall_4_2; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer returns ecore::EInt:
		//	"-"? NATURAL;
		public ParserRule getRule() { return rule; }

		//"-"? NATURAL
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_1() { return cNATURALTerminalRuleCall_1; }
	}
	
	
	private AnnotationElements pAnnotation;
	private PropertyElements pProperty;
	private AssignPropertyElements pAssignProperty;
	private ValuePropertyElements pValueProperty;
	private ValueElements pValue;
	private ExtendedIDElements pExtendedID;
	private ValueWithSpacesElements pValueWithSpaces;
	private CompositeIDElements pCompositeID;
	private RealElements pReal;
	private IntegerElements pInteger;
	private TerminalRule tOPERATOR;
	private TerminalRule tBOOLEAN;
	private TerminalRule tNULL;
	private TerminalRule tID;
	private TerminalRule tNATURAL;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public AnnotationGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//// e.g.: @Generate(Java)
	//
	//Annotation:
	//	"@" name=ExtendedID ("(" property+=Property ("," property+=Property)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Property:
	//	AssignProperty | ValueProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//// e.g.: @Generate(language = Java)
	//
	//AssignProperty returns Property:
	//	name=ExtendedID "=" value=Value;
	public AssignPropertyElements getAssignPropertyAccess() {
		return (pAssignProperty != null) ? pAssignProperty : (pAssignProperty = new AssignPropertyElements());
	}
	
	public ParserRule getAssignPropertyRule() {
		return getAssignPropertyAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//
	//ValueProperty returns Property:
	//	value=Value;
	public ValuePropertyElements getValuePropertyAccess() {
		return (pValueProperty != null) ? pValueProperty : (pValueProperty = new ValuePropertyElements());
	}
	
	public ParserRule getValuePropertyRule() {
		return getValuePropertyAccess().getRule();
	}

	//// e.g.: null
	//
	//Value returns ecore::EString:
	//	Integer | STRING | ExtendedID | BOOLEAN | NULL | Real;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ExtendedID:
	//	ID ("." ID)*;
	public ExtendedIDElements getExtendedIDAccess() {
		return (pExtendedID != null) ? pExtendedID : (pExtendedID = new ExtendedIDElements());
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// e.g.: Extended Value with whitespace support. In order to make
	//
	//// this rule works, use hidden() as in following example:
	//
	//// Guard hidden(): 'if ' expr=Expression ' then';   
	//
	//ValueWithSpaces hidden():
	//	(Value | ANY_OTHER | WS)*;
	public ValueWithSpacesElements getValueWithSpacesAccess() {
		return (pValueWithSpaces != null) ? pValueWithSpaces : (pValueWithSpaces = new ValueWithSpacesElements());
	}
	
	public ParserRule getValueWithSpacesRule() {
		return getValueWithSpacesAccess().getRule();
	}

	//CompositeID returns ecore::EString:
	//	ExtendedID | STRING;
	public CompositeIDElements getCompositeIDAccess() {
		return (pCompositeID != null) ? pCompositeID : (pCompositeID = new CompositeIDElements());
	}
	
	public ParserRule getCompositeIDRule() {
		return getCompositeIDAccess().getRule();
	}

	//Real returns ecore::EDouble:
	//	"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?;
	public RealElements getRealAccess() {
		return (pReal != null) ? pReal : (pReal = new RealElements());
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer returns ecore::EInt:
	//	"-"? NATURAL;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// FIXME: http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B
	//
	//terminal OPERATOR:
	//	"++" | "--" | "==" | ">=" | "<=" | "!=" | "<>" | "||" | "&&" | "-=" | "+=" | "=" | ">>" | "<<" | "|=";
	public TerminalRule getOPERATORRule() {
		return (tOPERATOR != null) ? tOPERATOR : (tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR"));
	} 

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal NULL:
	//	"null" | "nil" | "NULL";
	public TerminalRule getNULLRule() {
		return (tNULL != null) ? tNULL : (tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal NATURAL returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getNATURALRule() {
		return (tNATURAL != null) ? tNATURAL : (tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NATURAL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
