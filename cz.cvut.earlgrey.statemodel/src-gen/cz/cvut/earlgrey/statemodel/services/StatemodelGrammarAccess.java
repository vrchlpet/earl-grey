/*
* generated by Xtext
*/

package cz.cvut.earlgrey.statemodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import cz.cvut.earlgrey.annotation.services.AnnotationGrammarAccess;

@Singleton
public class StatemodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* //(annotation+=Annotation*) => 
		//
		//	elements+=Element*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* //(annotation+=Annotation*) => 
		//
		//elements+=Element*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//elements+=Element*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatemachineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Statemachine | State;
		public ParserRule getRule() { return rule; }

		//Statemachine | State
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statemachine
		public RuleCall getStatemachineParserRuleCall_0() { return cStatemachineParserRuleCall_0; }

		//State
		public RuleCall getStateParserRuleCall_1() { return cStateParserRuleCall_1; }
	}

	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cStatemachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCompositeIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// e.g.: statemachine Node end
		//
		//Statemachine:
		//	annotation+=Annotation* => "statemachine" name=CompositeID state+=State* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "statemachine" name=CompositeID state+=State* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "statemachine"
		public Keyword getStatemachineKeyword_1() { return cStatemachineKeyword_1; }

		//name=CompositeID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CompositeID
		public RuleCall getNameCompositeIDParserRuleCall_2_0() { return cNameCompositeIDParserRuleCall_2_0; }

		//state+=State*
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//State
		public RuleCall getStateStateParserRuleCall_3_0() { return cStateStateParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCompositeIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementActivityParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// e.g.: state BublOn end
		//
		//State:
		//	annotation+=Annotation* => type=StateType name=CompositeID element+=Activity* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => type=StateType name=CompositeID element+=Activity* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> type=StateType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_1_0() { return cTypeStateTypeEnumRuleCall_1_0; }

		//name=CompositeID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CompositeID
		public RuleCall getNameCompositeIDParserRuleCall_2_0() { return cNameCompositeIDParserRuleCall_2_0; }

		//element+=Activity*
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }

		//Activity
		public RuleCall getElementActivityParserRuleCall_3_0() { return cElementActivityParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Activity:
		//	TransitionBlock | State;
		public ParserRule getRule() { return rule; }

		//TransitionBlock | State
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransitionBlock
		public RuleCall getTransitionBlockParserRuleCall_0() { return cTransitionBlockParserRuleCall_0; }

		//State
		public RuleCall getStateParserRuleCall_1() { return cStateParserRuleCall_1; }
	}

	public class TransitionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventValueWithSpacesParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransitionTransitionParserRuleCall_2_0 = (RuleCall)cTransitionAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// e.g.: light down do -> BulbDown end
		//
		//TransitionBlock:
		//	event=ValueWithSpaces "do" transition+=Transition+ "end";
		public ParserRule getRule() { return rule; }

		//event=ValueWithSpaces "do" transition+=Transition+ "end"
		public Group getGroup() { return cGroup; }

		//event=ValueWithSpaces
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//ValueWithSpaces
		public RuleCall getEventValueWithSpacesParserRuleCall_0_0() { return cEventValueWithSpacesParserRuleCall_0_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//transition+=Transition+
		public Assignment getTransitionAssignment_2() { return cTransitionAssignment_2; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_2_0() { return cTransitionTransitionParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cGuardAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cGuardValueWithSpacesParserRuleCall_0_1_0 = (RuleCall)cGuardAssignment_0_1.eContents().get(0);
		private final Keyword cThenKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActionValueWithSpacesParserRuleCall_1_0_0 = (RuleCall)cActionAssignment_1_0.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateCompositeIDParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//Transition:
		//	("if" guard=ValueWithSpaces "then")? => (action=ValueWithSpaces)? => ARROW => state=CompositeID;
		public ParserRule getRule() { return rule; }

		//("if" guard=ValueWithSpaces "then")? => (action=ValueWithSpaces)? => ARROW => state=CompositeID
		public Group getGroup() { return cGroup; }

		//("if" guard=ValueWithSpaces "then")?
		public Group getGroup_0() { return cGroup_0; }

		//"if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//guard=ValueWithSpaces
		public Assignment getGuardAssignment_0_1() { return cGuardAssignment_0_1; }

		//ValueWithSpaces
		public RuleCall getGuardValueWithSpacesParserRuleCall_0_1_0() { return cGuardValueWithSpacesParserRuleCall_0_1_0; }

		//"then"
		public Keyword getThenKeyword_0_2() { return cThenKeyword_0_2; }

		//=> (action=ValueWithSpaces)?
		public Group getGroup_1() { return cGroup_1; }

		//action=ValueWithSpaces
		public Assignment getActionAssignment_1_0() { return cActionAssignment_1_0; }

		//ValueWithSpaces
		public RuleCall getActionValueWithSpacesParserRuleCall_1_0_0() { return cActionValueWithSpacesParserRuleCall_1_0_0; }

		//=> ARROW
		public RuleCall getARROWTerminalRuleCall_2() { return cARROWTerminalRuleCall_2; }

		//=> state=CompositeID
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//CompositeID
		public RuleCall getStateCompositeIDParserRuleCall_3_0() { return cStateCompositeIDParserRuleCall_3_0; }
	}

	public class ValueWithSpacesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueWithSpaces");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueWithSpaces hidden():
		//	(LITERAL | Value | ANY_OTHER | WS)*;
		public ParserRule getRule() { return rule; }

		//(LITERAL | Value | ANY_OTHER | WS)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//LITERAL
		public RuleCall getLITERALTerminalRuleCall_0() { return cLITERALTerminalRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }

		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONEStateKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINITIALInitialKeyword_1_0 = (Keyword)cINITIALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFINALFinalKeyword_2_0 = (Keyword)cFINALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StateType:
		//	NONE="state" | INITIAL="initial" | FINAL="final";
		public EnumRule getRule() { return rule; }

		//NONE="state" | INITIAL="initial" | FINAL="final"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="state"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"state"
		public Keyword getNONEStateKeyword_0_0() { return cNONEStateKeyword_0_0; }

		//INITIAL="initial"
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_1() { return cINITIALEnumLiteralDeclaration_1; }

		//"initial"
		public Keyword getINITIALInitialKeyword_1_0() { return cINITIALInitialKeyword_1_0; }

		//FINAL="final"
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_2() { return cFINALEnumLiteralDeclaration_2; }

		//"final"
		public Keyword getFINALFinalKeyword_2_0() { return cFINALFinalKeyword_2_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private ElementElements pElement;
	private StatemachineElements pStatemachine;
	private StateElements pState;
	private ActivityElements pActivity;
	private TransitionBlockElements pTransitionBlock;
	private TransitionElements pTransition;
	private TerminalRule tLITERAL;
	private ValueWithSpacesElements pValueWithSpaces;
	private StateTypeElements unknownRuleStateType;
	private TerminalRule tARROW;
	
	private final GrammarProvider grammarProvider;

	private AnnotationGrammarAccess gaAnnotation;

	@Inject
	public StatemodelGrammarAccess(GrammarProvider grammarProvider,
		AnnotationGrammarAccess gaAnnotation) {
		this.grammarProvider = grammarProvider;
		this.gaAnnotation = gaAnnotation;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public AnnotationGrammarAccess getAnnotationGrammarAccess() {
		return gaAnnotation;
	}

	
	//Model:
	//	imports+=Import* //(annotation+=Annotation*) => 
	//
	//	elements+=Element*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Element:
	//	Statemachine | State;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//// e.g.: statemachine Node end
	//
	//Statemachine:
	//	annotation+=Annotation* => "statemachine" name=CompositeID state+=State* "end";
	public StatemachineElements getStatemachineAccess() {
		return (pStatemachine != null) ? pStatemachine : (pStatemachine = new StatemachineElements());
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}

	//// e.g.: state BublOn end
	//
	//State:
	//	annotation+=Annotation* => type=StateType name=CompositeID element+=Activity* "end";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Activity:
	//	TransitionBlock | State;
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//// e.g.: light down do -> BulbDown end
	//
	//TransitionBlock:
	//	event=ValueWithSpaces "do" transition+=Transition+ "end";
	public TransitionBlockElements getTransitionBlockAccess() {
		return (pTransitionBlock != null) ? pTransitionBlock : (pTransitionBlock = new TransitionBlockElements());
	}
	
	public ParserRule getTransitionBlockRule() {
		return getTransitionBlockAccess().getRule();
	}

	//Transition:
	//	("if" guard=ValueWithSpaces "then")? => (action=ValueWithSpaces)? => ARROW => state=CompositeID;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	////// e.g.: light is up
	//
	////Event:
	//
	////    name = ValueWithSpaces
	//
	////;
	//
	////
	//
	////// e.g.: if light is down then
	//
	////Guard:
	//
	////    'if' expression = ValueWithSpaces 'then'
	//
	////;
	//
	////
	//
	////// e.g.: light up
	//
	////Action:
	//
	////    value = ValueWithSpaces
	//
	////;
	//
	//terminal LITERAL:
	//	"++" | "--" | "==" | ">=" | "<=" | "!=";
	public TerminalRule getLITERALRule() {
		return (tLITERAL != null) ? tLITERAL : (tLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LITERAL"));
	} 

	//ValueWithSpaces hidden():
	//	(LITERAL | Value | ANY_OTHER | WS)*;
	public ValueWithSpacesElements getValueWithSpacesAccess() {
		return (pValueWithSpaces != null) ? pValueWithSpaces : (pValueWithSpaces = new ValueWithSpacesElements());
	}
	
	public ParserRule getValueWithSpacesRule() {
		return getValueWithSpacesAccess().getRule();
	}

	//enum StateType:
	//	NONE="state" | INITIAL="initial" | FINAL="final";
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//terminal ARROW:
	//	"->" | "goto" | "=>";
	public TerminalRule getARROWRule() {
		return (tARROW != null) ? tARROW : (tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARROW"));
	} 

	//// e.g.: @Generate(Java)
	//Annotation:
	//	"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?;
	public AnnotationGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotation.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Parameter:
	//	AssignParameter | ValueParameter;
	public AnnotationGrammarAccess.ParameterElements getParameterAccess() {
		return gaAnnotation.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// e.g.: @Generate(language = Java)
	//AssignParameter returns Parameter:
	//	name=ExtendedID "=" value=Value;
	public AnnotationGrammarAccess.AssignParameterElements getAssignParameterAccess() {
		return gaAnnotation.getAssignParameterAccess();
	}
	
	public ParserRule getAssignParameterRule() {
		return getAssignParameterAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//ValueParameter returns Parameter:
	//	value=Value;
	public AnnotationGrammarAccess.ValueParameterElements getValueParameterAccess() {
		return gaAnnotation.getValueParameterAccess();
	}
	
	public ParserRule getValueParameterRule() {
		return getValueParameterAccess().getRule();
	}

	//// e.g.: null
	//Value returns ecore::EString:
	//	Integer | STRING | ExtendedID | BOOLEAN | NULL | Real;
	public AnnotationGrammarAccess.ValueElements getValueAccess() {
		return gaAnnotation.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ExtendedID:
	//	ID ("." ID)*;
	public AnnotationGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotation.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//CompositeID returns ecore::EString:
	//	ExtendedID | STRING;
	public AnnotationGrammarAccess.CompositeIDElements getCompositeIDAccess() {
		return gaAnnotation.getCompositeIDAccess();
	}
	
	public ParserRule getCompositeIDRule() {
		return getCompositeIDAccess().getRule();
	}

	//Real returns ecore::EDouble:
	//	"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?;
	public AnnotationGrammarAccess.RealElements getRealAccess() {
		return gaAnnotation.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer returns ecore::EInt:
	//	"-"? NATURAL;
	public AnnotationGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotation.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaAnnotation.getBOOLEANRule();
	} 

	//terminal NULL:
	//	"null" | "nil" | "NULL";
	public TerminalRule getNULLRule() {
		return gaAnnotation.getNULLRule();
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaAnnotation.getIDRule();
	} 

	//terminal NATURAL returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getNATURALRule() {
		return gaAnnotation.getNATURALRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAnnotation.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotation.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotation.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAnnotation.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaAnnotation.getANY_OTHERRule();
	} 
}
