/*
* generated by Xtext
*/
grammar InternalClassmodel;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package cz.cvut.earlgrey.classmodel.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.classmodel.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import cz.cvut.earlgrey.classmodel.services.ClassmodelGrammarAccess;

}

@parser::members {
 
 	private ClassmodelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ClassmodelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatatype
entryRuleDatatype 
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatatypeAccess().getGroup()); }
(rule__Datatype__Group__0)
{ after(grammarAccess.getDatatypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage 
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassifier
entryRuleClassifier 
:
{ before(grammarAccess.getClassifierRule()); }
	 ruleClassifier
{ after(grammarAccess.getClassifierRule()); } 
	 EOF 
;

// Rule Classifier
ruleClassifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassifierAccess().getGroup()); }
(rule__Classifier__Group__0)
{ after(grammarAccess.getClassifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGeneralization
entryRuleGeneralization 
:
{ before(grammarAccess.getGeneralizationRule()); }
	 ruleGeneralization
{ after(grammarAccess.getGeneralizationRule()); } 
	 EOF 
;

// Rule Generalization
ruleGeneralization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneralizationAccess().getGroup()); }
(rule__Generalization__Group__0)
{ after(grammarAccess.getGeneralizationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getGroup()); }
(rule__Feature__Group__0)
{ after(grammarAccess.getFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeration
entryRuleEnumeration 
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationAccess().getGroup()); }
(rule__Enumeration__Group__0)
{ after(grammarAccess.getEnumerationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerator
entryRuleEnumerator 
:
{ before(grammarAccess.getEnumeratorRule()); }
	 ruleEnumerator
{ after(grammarAccess.getEnumeratorRule()); } 
	 EOF 
;

// Rule Enumerator
ruleEnumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratorAccess().getGroup()); }
(rule__Enumerator__Group__0)
{ after(grammarAccess.getEnumeratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getGroup()); }
(rule__Interface__Group__0)
{ after(grammarAccess.getInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceFeature
entryRuleInterfaceFeature 
:
{ before(grammarAccess.getInterfaceFeatureRule()); }
	 ruleInterfaceFeature
{ after(grammarAccess.getInterfaceFeatureRule()); } 
	 EOF 
;

// Rule InterfaceFeature
ruleInterfaceFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceFeatureAccess().getGroup()); }
(rule__InterfaceFeature__Group__0)
{ after(grammarAccess.getInterfaceFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationship
entryRuleRelationship 
:
{ before(grammarAccess.getRelationshipRule()); }
	 ruleRelationship
{ after(grammarAccess.getRelationshipRule()); } 
	 EOF 
;

// Rule Relationship
ruleRelationship
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationshipAccess().getGroup()); }
(rule__Relationship__Group__0)
{ after(grammarAccess.getRelationshipAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicity
entryRuleMultiplicity 
:
{ before(grammarAccess.getMultiplicityRule()); }
	 ruleMultiplicity
{ after(grammarAccess.getMultiplicityRule()); } 
	 EOF 
;

// Rule Multiplicity
ruleMultiplicity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicityAccess().getGroup()); }
(rule__Multiplicity__Group__0)
{ after(grammarAccess.getMultiplicityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicityValue
entryRuleMultiplicityValue 
:
{ before(grammarAccess.getMultiplicityValueRule()); }
	 ruleMultiplicityValue
{ after(grammarAccess.getMultiplicityValueRule()); } 
	 EOF 
;

// Rule MultiplicityValue
ruleMultiplicityValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicityValueAccess().getAlternatives()); }
(rule__MultiplicityValue__Alternatives)
{ after(grammarAccess.getMultiplicityValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getGroup()); }
(rule__Reference__Group__0)
{ after(grammarAccess.getReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArray
entryRuleArray 
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAccess().getGroup()); }
(rule__Array__Group__0)
{ after(grammarAccess.getArrayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplicitValue
entryRuleImplicitValue 
:
{ before(grammarAccess.getImplicitValueRule()); }
	 ruleImplicitValue
{ after(grammarAccess.getImplicitValueRule()); } 
	 EOF 
;

// Rule ImplicitValue
ruleImplicitValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicitValueAccess().getAlternatives()); }
(rule__ImplicitValue__Alternatives)
{ after(grammarAccess.getImplicitValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtendedID
entryRuleExtendedID 
:
{ before(grammarAccess.getExtendedIDRule()); }
	 ruleExtendedID
{ after(grammarAccess.getExtendedIDRule()); } 
	 EOF 
;

// Rule ExtendedID
ruleExtendedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup()); }
(rule__ExtendedID__Group__0)
{ after(grammarAccess.getExtendedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleReal
entryRuleReal 
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealAccess().getGroup()); }
(rule__Real__Group__0)
{ after(grammarAccess.getRealAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule RelationshipType
ruleRelationshipType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipTypeAccess().getAlternatives()); }
(rule__RelationshipType__Alternatives)
{ after(grammarAccess.getRelationshipTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Visibility
ruleVisibility
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityAccess().getAlternatives()); }
(rule__Visibility__Alternatives)
{ after(grammarAccess.getVisibilityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getRelationshipParserRuleCall_0()); }
	ruleRelationship
{ after(grammarAccess.getElementAccess().getRelationshipParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getClassifierParserRuleCall_1()); }
	ruleClassifier
{ after(grammarAccess.getElementAccess().getClassifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getPackageParserRuleCall_2()); }
	rulePackage
{ after(grammarAccess.getElementAccess().getPackageParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getElementAccess().getDatatypeParserRuleCall_3()); }
	ruleDatatype
{ after(grammarAccess.getElementAccess().getDatatypeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getElementAccess().getEnumerationParserRuleCall_4()); }
	ruleEnumeration
{ after(grammarAccess.getElementAccess().getEnumerationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getElementAccess().getInterfaceParserRuleCall_5()); }
	ruleInterface
{ after(grammarAccess.getElementAccess().getInterfaceParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0_0()); }
	ruleAttribute
{ after(grammarAccess.getFeatureAccess().getAttributeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getOperationParserRuleCall_0_1()); }
	ruleOperation
{ after(grammarAccess.getFeatureAccess().getOperationParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getConstantParserRuleCall_0_2()); }
	ruleConstant
{ after(grammarAccess.getFeatureAccess().getConstantParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFeature__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFeatureAccess().getOperationParserRuleCall_0_0()); }
	ruleOperation
{ after(grammarAccess.getInterfaceFeatureAccess().getOperationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getInterfaceFeatureAccess().getConstantParserRuleCall_0_1()); }
	ruleConstant
{ after(grammarAccess.getInterfaceFeatureAccess().getConstantParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicityValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityValueAccess().getNATURALTerminalRuleCall_0()); }
	RULE_NATURAL
{ after(grammarAccess.getMultiplicityValueAccess().getNATURALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMultiplicityValueAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getMultiplicityValueAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImplicitValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicitValueAccess().getNULLTerminalRuleCall_0()); }
	RULE_NULL
{ after(grammarAccess.getImplicitValueAccess().getNULLTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getImplicitValueAccess().getBOOLEANTerminalRuleCall_1()); }
	RULE_BOOLEAN
{ after(grammarAccess.getImplicitValueAccess().getBOOLEANTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getImplicitValueAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getImplicitValueAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getImplicitValueAccess().getIntegerParserRuleCall_3()); }
	ruleInteger
{ after(grammarAccess.getImplicitValueAccess().getIntegerParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getImplicitValueAccess().getRealParserRuleCall_4()); }
	ruleReal
{ after(grammarAccess.getImplicitValueAccess().getRealParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getImplicitValueAccess().getIDTerminalRuleCall_5()); }
	RULE_ID
{ after(grammarAccess.getImplicitValueAccess().getIDTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
	ruleExtendedID
{ after(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
	RULE_BOOLEAN
{ after(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
	RULE_NULL
{ after(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
	ruleReal
{ after(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Real__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }

	'e' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }

	'E' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Alternatives_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }

	'+' 

{ after(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }

	'-' 

{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipTypeAccess().getASSOCIATIONEnumLiteralDeclaration_0()); }
(	'association' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getASSOCIATIONEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationshipTypeAccess().getDEPENCYEnumLiteralDeclaration_1()); }
(	'depency' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getDEPENCYEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationshipTypeAccess().getGENERALIZATIONEnumLiteralDeclaration_2()); }
(	'generalization' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getGENERALIZATIONEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationshipTypeAccess().getREALIZATIONEnumLiteralDeclaration_3()); }
(	'realization' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getREALIZATIONEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationshipTypeAccess().getAGGREGATIONEnumLiteralDeclaration_4()); }
(	'aggregation' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getAGGREGATIONEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationshipTypeAccess().getCOMPOSITIONEnumLiteralDeclaration_5()); }
(	'composition' 
)
{ after(grammarAccess.getRelationshipTypeAccess().getCOMPOSITIONEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
(	'#' 
)
{ after(grammarAccess.getVisibilityAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getVisibilityAccess().getPACKAGE_PRIVATEEnumLiteralDeclaration_3()); }
(	'~' 
)
{ after(grammarAccess.getVisibilityAccess().getPACKAGE_PRIVATEEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsAssignment_1()); }
(rule__Model__ElementsAssignment_1)*
{ after(grammarAccess.getModelAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Datatype__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Datatype__Group__0__Impl
	rule__Datatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getAnnotationAssignment_0()); }
(rule__Datatype__AnnotationAssignment_0)*
{ after(grammarAccess.getDatatypeAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Datatype__Group__1__Impl
	rule__Datatype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getDatatypeKeyword_1()); }
(
	'datatype' 
)
{ after(grammarAccess.getDatatypeAccess().getDatatypeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Datatype__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getNameAssignment_2()); }
(rule__Datatype__NameAssignment_2)
{ after(grammarAccess.getDatatypeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getAnnotationAssignment_0()); }
(rule__Package__AnnotationAssignment_0)*
{ after(grammarAccess.getPackageAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageKeyword_1()); }
(
	'package' 
)
{ after(grammarAccess.getPackageAccess().getPackageKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__2__Impl
	rule__Package__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameAssignment_2()); }
(rule__Package__NameAssignment_2)
{ after(grammarAccess.getPackageAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__3__Impl
	rule__Package__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getElementAssignment_3()); }
(rule__Package__ElementAssignment_3)*
{ after(grammarAccess.getPackageAccess().getElementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getPackageAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Classifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__0__Impl
	rule__Classifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getAnnotationAssignment_0()); }
(rule__Classifier__AnnotationAssignment_0)*
{ after(grammarAccess.getClassifierAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__1__Impl
	rule__Classifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getClassKeyword_1()); }
(
	'class' 
)
{ after(grammarAccess.getClassifierAccess().getClassKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__2__Impl
	rule__Classifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getNameAssignment_2()); }
(rule__Classifier__NameAssignment_2)
{ after(grammarAccess.getClassifierAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__3__Impl
	rule__Classifier__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getGeneralizationAssignment_3()); }
(rule__Classifier__GeneralizationAssignment_3)?
{ after(grammarAccess.getClassifierAccess().getGeneralizationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__4__Impl
	rule__Classifier__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getConstraintAssignment_4()); }
(rule__Classifier__ConstraintAssignment_4)?
{ after(grammarAccess.getClassifierAccess().getConstraintAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__5__Impl
	rule__Classifier__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getFeatureAssignment_5()); }
(rule__Classifier__FeatureAssignment_5)*
{ after(grammarAccess.getClassifierAccess().getFeatureAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Classifier__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Classifier__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getClassifierAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Generalization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generalization__Group__0__Impl
	rule__Generalization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getIsAKeyword_0()); }

	'isA' 

{ after(grammarAccess.getGeneralizationAccess().getIsAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generalization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generalization__Group__1__Impl
	rule__Generalization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getClassifierAssignment_1()); }
(rule__Generalization__ClassifierAssignment_1)
{ after(grammarAccess.getGeneralizationAccess().getClassifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generalization__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generalization__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getGroup_2()); }
(rule__Generalization__Group_2__0)*
{ after(grammarAccess.getGeneralizationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Generalization__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generalization__Group_2__0__Impl
	rule__Generalization__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getGeneralizationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generalization__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generalization__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getClassifierAssignment_2_1()); }
(rule__Generalization__ClassifierAssignment_2_1)
{ after(grammarAccess.getGeneralizationAccess().getClassifierAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getVisibilityAssignment_0()); }
(rule__Type__VisibilityAssignment_0)?
{ after(grammarAccess.getTypeAccess().getVisibilityAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_1()); }
(rule__Type__NameAssignment_1)
{ after(grammarAccess.getTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Feature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getAlternatives_0()); }
(rule__Feature__Alternatives_0)
{ after(grammarAccess.getFeatureAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getConstraintAssignment_1()); }
(rule__Feature__ConstraintAssignment_1)?
{ after(grammarAccess.getFeatureAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Enumeration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getAnnotationAssignment_0()); }
(rule__Enumeration__AnnotationAssignment_0)*
{ after(grammarAccess.getEnumerationAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumKeyword_1()); }
(
	'enum' 
)
{ after(grammarAccess.getEnumerationAccess().getEnumKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
(rule__Enumeration__NameAssignment_2)
{ after(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getConstraintAssignment_3()); }
(rule__Enumeration__ConstraintAssignment_3)?
{ after(grammarAccess.getEnumerationAccess().getConstraintAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__4__Impl
	rule__Enumeration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumeratorAssignment_4()); }
(rule__Enumeration__EnumeratorAssignment_4)*
{ after(grammarAccess.getEnumerationAccess().getEnumeratorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getEnumerationAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Enumerator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__0__Impl
	rule__Enumerator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getNameAssignment_0()); }
(rule__Enumerator__NameAssignment_0)
{ after(grammarAccess.getEnumeratorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__1__Impl
	rule__Enumerator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getGroup_1()); }
(rule__Enumerator__Group_1__0)?
{ after(grammarAccess.getEnumeratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getConstraintAssignment_2()); }
(rule__Enumerator__ConstraintAssignment_2)?
{ after(grammarAccess.getEnumeratorAccess().getConstraintAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Enumerator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group_1__0__Impl
	rule__Enumerator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_0()); }
(
	'=' 
)
{ after(grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumerator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getValueAssignment_1_1()); }
(rule__Enumerator__ValueAssignment_1_1)
{ after(grammarAccess.getEnumeratorAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Interface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getAnnotationAssignment_0()); }
(rule__Interface__AnnotationAssignment_0)*
{ after(grammarAccess.getInterfaceAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_1()); }
(
	'interface' 
)
{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__2__Impl
	rule__Interface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameAssignment_2()); }
(rule__Interface__NameAssignment_2)
{ after(grammarAccess.getInterfaceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__3__Impl
	rule__Interface__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGeneralizationAssignment_3()); }
(rule__Interface__GeneralizationAssignment_3)?
{ after(grammarAccess.getInterfaceAccess().getGeneralizationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__4__Impl
	rule__Interface__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getConstraintAssignment_4()); }
(rule__Interface__ConstraintAssignment_4)?
{ after(grammarAccess.getInterfaceAccess().getConstraintAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__5__Impl
	rule__Interface__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getFeatureAssignment_5()); }
(rule__Interface__FeatureAssignment_5)*
{ after(grammarAccess.getInterfaceAccess().getFeatureAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getInterfaceAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InterfaceFeature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFeature__Group__0__Impl
	rule__InterfaceFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFeature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFeatureAccess().getAlternatives_0()); }
(rule__InterfaceFeature__Alternatives_0)
{ after(grammarAccess.getInterfaceFeatureAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceFeature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFeature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFeatureAccess().getConstraintAssignment_1()); }
(rule__InterfaceFeature__ConstraintAssignment_1)?
{ after(grammarAccess.getInterfaceFeatureAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relationship__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__0__Impl
	rule__Relationship__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getAnnotationAssignment_0()); }
(rule__Relationship__AnnotationAssignment_0)*
{ after(grammarAccess.getRelationshipAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__1__Impl
	rule__Relationship__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTypeAssignment_1()); }
(rule__Relationship__TypeAssignment_1)
{ after(grammarAccess.getRelationshipAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__2__Impl
	rule__Relationship__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getLabelAssignment_2()); }
(rule__Relationship__LabelAssignment_2)?
{ after(grammarAccess.getRelationshipAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__3__Impl
	rule__Relationship__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadNavigableAssignment_3()); }
(rule__Relationship__HeadNavigableAssignment_3)?
{ after(grammarAccess.getRelationshipAccess().getHeadNavigableAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__4__Impl
	rule__Relationship__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadMultiplicityAssignment_4()); }
(rule__Relationship__HeadMultiplicityAssignment_4)?
{ after(grammarAccess.getRelationshipAccess().getHeadMultiplicityAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__5__Impl
	rule__Relationship__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadAssignment_5()); }
(rule__Relationship__HeadAssignment_5)
{ after(grammarAccess.getRelationshipAccess().getHeadAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__6__Impl
	rule__Relationship__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadLabelAssignment_6()); }
(rule__Relationship__HeadLabelAssignment_6)?
{ after(grammarAccess.getRelationshipAccess().getHeadLabelAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__7__Impl
	rule__Relationship__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailNavigableAssignment_7()); }
(rule__Relationship__TailNavigableAssignment_7)?
{ after(grammarAccess.getRelationshipAccess().getTailNavigableAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__8__Impl
	rule__Relationship__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailMultiplicityAssignment_8()); }
(rule__Relationship__TailMultiplicityAssignment_8)?
{ after(grammarAccess.getRelationshipAccess().getTailMultiplicityAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__9__Impl
	rule__Relationship__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailAssignment_9()); }
(rule__Relationship__TailAssignment_9)
{ after(grammarAccess.getRelationshipAccess().getTailAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__10__Impl
	rule__Relationship__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailLabelAssignment_10()); }
(rule__Relationship__TailLabelAssignment_10)?
{ after(grammarAccess.getRelationshipAccess().getTailLabelAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relationship__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relationship__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getEndKeyword_11()); }

	'end' 

{ after(grammarAccess.getRelationshipAccess().getEndKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Multiplicity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplicity__Group__0__Impl
	rule__Multiplicity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getUpperAssignment_0()); }
(rule__Multiplicity__UpperAssignment_0)
{ after(grammarAccess.getMultiplicityAccess().getUpperAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplicity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getGroup_1()); }
(rule__Multiplicity__Group_1__0)?
{ after(grammarAccess.getMultiplicityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplicity__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplicity__Group_1__0__Impl
	rule__Multiplicity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0()); }
(
	'..' 
)
{ after(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplicity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getLowerAssignment_1_1()); }
(rule__Multiplicity__LowerAssignment_1_1)
{ after(grammarAccess.getMultiplicityAccess().getLowerAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getVisibilityAssignment_0()); }
(rule__Constant__VisibilityAssignment_0)?
{ after(grammarAccess.getConstantAccess().getVisibilityAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment_1()); }
(rule__Constant__NameAssignment_1)
{ after(grammarAccess.getConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueAssignment_3()); }
(rule__Constant__ValueAssignment_3)
{ after(grammarAccess.getConstantAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getUnorderedGroup_0()); }
(rule__Operation__UnorderedGroup_0)
{ after(grammarAccess.getOperationAccess().getUnorderedGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_1()); }
(rule__Operation__NameAssignment_1)
{ after(grammarAccess.getOperationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_3()); }
(rule__Operation__Group_3__0)?
{ after(grammarAccess.getOperationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__4__Impl
	rule__Operation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_5()); }
(rule__Operation__Group_5__0)?
{ after(grammarAccess.getOperationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Operation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3__0__Impl
	rule__Operation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParameterAssignment_3_0()); }
(rule__Operation__ParameterAssignment_3_0)
{ after(grammarAccess.getOperationAccess().getParameterAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_3_1()); }
(rule__Operation__Group_3_1__0)*
{ after(grammarAccess.getOperationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3_1__0__Impl
	rule__Operation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParameterAssignment_3_1_1()); }
(rule__Operation__ParameterAssignment_3_1_1)
{ after(grammarAccess.getOperationAccess().getParameterAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_5__0__Impl
	rule__Operation__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getColonKeyword_5_0()); }

	':' 

{ after(grammarAccess.getOperationAccess().getColonKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getReturnAssignment_5_1()); }
(rule__Operation__ReturnAssignment_5_1)
{ after(grammarAccess.getOperationAccess().getReturnAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
(rule__Parameter__NameAssignment_0)
{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
(rule__Parameter__TypeAssignment_2)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_3()); }
(rule__Parameter__Group_3__0)?
{ after(grammarAccess.getParameterAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Parameter__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__0__Impl
	rule__Parameter__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_3_0()); }
(
	'=' 
)
{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__1__Impl
	rule__Parameter__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getImplicitAssignment_3_1()); }
(rule__Parameter__ImplicitAssignment_3_1)
{ after(grammarAccess.getParameterAccess().getImplicitAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_3_2()); }
(rule__Parameter__Group_3_2__0)*
{ after(grammarAccess.getParameterAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3_2__0__Impl
	rule__Parameter__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getParameterAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getImplicitAssignment_3_2_1()); }
(rule__Parameter__ImplicitAssignment_3_2_1)
{ after(grammarAccess.getParameterAccess().getImplicitAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getUnorderedGroup_0()); }
(rule__Attribute__UnorderedGroup_0)
{ after(grammarAccess.getAttributeAccess().getUnorderedGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
(rule__Attribute__NameAssignment_1)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getAttributeAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
(rule__Attribute__TypeAssignment_3)
{ after(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_4()); }
(rule__Attribute__Group_4__0)?
{ after(grammarAccess.getAttributeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Attribute__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_4__0__Impl
	rule__Attribute__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_4_0()); }
(
	'=' 
)
{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_4__1__Impl
	rule__Attribute__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getImplicitAssignment_4_1()); }
(rule__Attribute__ImplicitAssignment_4_1)
{ after(grammarAccess.getAttributeAccess().getImplicitAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_4_2()); }
(rule__Attribute__Group_4_2__0)*
{ after(grammarAccess.getAttributeAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_4_2__0__Impl
	rule__Attribute__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getCommaKeyword_4_2_0()); }

	',' 

{ after(grammarAccess.getAttributeAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getImplicitAssignment_4_2_1()); }
(rule__Attribute__ImplicitAssignment_4_2_1)
{ after(grammarAccess.getAttributeAccess().getImplicitAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getTypeAssignment_0()); }
(rule__Reference__TypeAssignment_0)
{ after(grammarAccess.getReferenceAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getArrayAssignment_1()); }
(rule__Reference__ArrayAssignment_1)*
{ after(grammarAccess.getReferenceAccess().getArrayAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Array__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getArrayAction_0()); }
(

)
{ after(grammarAccess.getArrayAccess().getArrayAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__2__Impl
	rule__Array__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getSizeAssignment_2()); }
(rule__Array__SizeAssignment_2)?
{ after(grammarAccess.getArrayAccess().getSizeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
(rule__Annotation__NameAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
(
	'(' 
)
{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
(rule__Annotation__ParameterAssignment_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
	rule__Annotation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
(rule__Annotation__Group_2_2__0)*
{ after(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Annotation__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__0__Impl
	rule__Annotation__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
(rule__Annotation__ParameterAssignment_2_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ExtendedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__0__Impl
	rule__ExtendedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup_1()); }
(rule__ExtendedID__Group_1__0)*
{ after(grammarAccess.getExtendedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__0__Impl
	rule__ExtendedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Real__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__1__Impl
	rule__Real__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__2__Impl
	rule__Real__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRealAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__3__Impl
	rule__Real__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getGroup_4()); }
(rule__Real__Group_4__0)?
{ after(grammarAccess.getRealAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Real__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__0__Impl
	rule__Real__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_0()); }
(rule__Real__Alternatives_4_0)
{ after(grammarAccess.getRealAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__1__Impl
	rule__Real__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_1()); }
(rule__Real__Alternatives_4_1)
{ after(grammarAccess.getRealAccess().getAlternatives_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Operation__UnorderedGroup_0
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getOperationAccess().getUnorderedGroup_0());
    }
:
	rule__Operation__UnorderedGroup_0__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Operation__UnorderedGroup_0__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getOperationAccess().getVisibilityAssignment_0_0()); }
						(rule__Operation__VisibilityAssignment_0_0)
						{ after(grammarAccess.getOperationAccess().getVisibilityAssignment_0_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_0(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getOperationAccess().getStaticAssignment_0_1()); }
						(rule__Operation__StaticAssignment_0_1)
						{ after(grammarAccess.getOperationAccess().getStaticAssignment_0_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperationAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Operation__UnorderedGroup_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__UnorderedGroup_0__Impl
	rule__Operation__UnorderedGroup_0__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__UnorderedGroup_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__UnorderedGroup_0__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__UnorderedGroup_0
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
    }
:
	rule__Attribute__UnorderedGroup_0__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Attribute__UnorderedGroup_0__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getAttributeAccess().getVisibilityAssignment_0_0()); }
						(rule__Attribute__VisibilityAssignment_0_0)
						{ after(grammarAccess.getAttributeAccess().getVisibilityAssignment_0_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getAttributeAccess().getUnorderedGroup_0(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getAttributeAccess().getStaticAssignment_0_1()); }
						(rule__Attribute__StaticAssignment_0_1)
						{ after(grammarAccess.getAttributeAccess().getStaticAssignment_0_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAttributeAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Attribute__UnorderedGroup_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__UnorderedGroup_0__Impl
	rule__Attribute__UnorderedGroup_0__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__UnorderedGroup_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__UnorderedGroup_0__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsElementParserRuleCall_1_0()); }
	ruleElement{ after(grammarAccess.getModelAccess().getElementsElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getDatatypeAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getPackageAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__ElementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getElementElementParserRuleCall_3_0()); }
	ruleElement{ after(grammarAccess.getPackageAccess().getElementElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getClassifierAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getClassifierAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__GeneralizationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getGeneralizationGeneralizationParserRuleCall_3_0()); }
	ruleGeneralization{ after(grammarAccess.getClassifierAccess().getGeneralizationGeneralizationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__ConstraintAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getConstraintCONSTRAINTTerminalRuleCall_4_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getClassifierAccess().getConstraintCONSTRAINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__FeatureAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassifierAccess().getFeatureFeatureParserRuleCall_5_0()); }
	ruleFeature{ after(grammarAccess.getClassifierAccess().getFeatureFeatureParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__ClassifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getClassifierTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getGeneralizationAccess().getClassifierTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__ClassifierAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralizationAccess().getClassifierTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getGeneralizationAccess().getClassifierTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__VisibilityAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
	ruleVisibility{ after(grammarAccess.getTypeAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getTypeAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getConstraintCONSTRAINTTerminalRuleCall_1_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getFeatureAccess().getConstraintCONSTRAINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getEnumerationAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ConstraintAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getConstraintCONSTRAINTTerminalRuleCall_3_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getEnumerationAccess().getConstraintCONSTRAINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__EnumeratorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumeratorEnumeratorParserRuleCall_4_0()); }
	ruleEnumerator{ after(grammarAccess.getEnumerationAccess().getEnumeratorEnumeratorParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEnumeratorAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getValueImplicitValueParserRuleCall_1_1_0()); }
	ruleImplicitValue{ after(grammarAccess.getEnumeratorAccess().getValueImplicitValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerator__ConstraintAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorAccess().getConstraintCONSTRAINTTerminalRuleCall_2_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getEnumeratorAccess().getConstraintCONSTRAINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getInterfaceAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__GeneralizationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGeneralizationGeneralizationParserRuleCall_3_0()); }
	ruleGeneralization{ after(grammarAccess.getInterfaceAccess().getGeneralizationGeneralizationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__ConstraintAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getConstraintCONSTRAINTTerminalRuleCall_4_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getInterfaceAccess().getConstraintCONSTRAINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__FeatureAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getFeatureInterfaceFeatureParserRuleCall_5_0()); }
	ruleInterfaceFeature{ after(grammarAccess.getInterfaceAccess().getFeatureInterfaceFeatureParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFeature__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFeatureAccess().getConstraintCONSTRAINTTerminalRuleCall_1_0()); }
	RULE_CONSTRAINT{ after(grammarAccess.getInterfaceFeatureAccess().getConstraintCONSTRAINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getRelationshipAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTypeRelationshipTypeEnumRuleCall_1_0()); }
	ruleRelationshipType{ after(grammarAccess.getRelationshipAccess().getTypeRelationshipTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getRelationshipAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__HeadNavigableAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadNavigableNavigableKeyword_3_0()); }
(
{ before(grammarAccess.getRelationshipAccess().getHeadNavigableNavigableKeyword_3_0()); }

	'navigable' 

{ after(grammarAccess.getRelationshipAccess().getHeadNavigableNavigableKeyword_3_0()); }
)

{ after(grammarAccess.getRelationshipAccess().getHeadNavigableNavigableKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__HeadMultiplicityAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadMultiplicityMultiplicityParserRuleCall_4_0()); }
	ruleMultiplicity{ after(grammarAccess.getRelationshipAccess().getHeadMultiplicityMultiplicityParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__HeadAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadExtendedIDParserRuleCall_5_0()); }
	ruleExtendedID{ after(grammarAccess.getRelationshipAccess().getHeadExtendedIDParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__HeadLabelAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getHeadLabelSTRINGTerminalRuleCall_6_0()); }
	RULE_STRING{ after(grammarAccess.getRelationshipAccess().getHeadLabelSTRINGTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__TailNavigableAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailNavigableNavigableKeyword_7_0()); }
(
{ before(grammarAccess.getRelationshipAccess().getTailNavigableNavigableKeyword_7_0()); }

	'navigable' 

{ after(grammarAccess.getRelationshipAccess().getTailNavigableNavigableKeyword_7_0()); }
)

{ after(grammarAccess.getRelationshipAccess().getTailNavigableNavigableKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__TailMultiplicityAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailMultiplicityMultiplicityParserRuleCall_8_0()); }
	ruleMultiplicity{ after(grammarAccess.getRelationshipAccess().getTailMultiplicityMultiplicityParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__TailAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailExtendedIDParserRuleCall_9_0()); }
	ruleExtendedID{ after(grammarAccess.getRelationshipAccess().getTailExtendedIDParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relationship__TailLabelAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipAccess().getTailLabelSTRINGTerminalRuleCall_10_0()); }
	RULE_STRING{ after(grammarAccess.getRelationshipAccess().getTailLabelSTRINGTerminalRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__UpperAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getUpperMultiplicityValueParserRuleCall_0_0()); }
	ruleMultiplicityValue{ after(grammarAccess.getMultiplicityAccess().getUpperMultiplicityValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__LowerAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicityAccess().getLowerMultiplicityValueParserRuleCall_1_1_0()); }
	ruleMultiplicityValue{ after(grammarAccess.getMultiplicityAccess().getLowerMultiplicityValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__VisibilityAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
	ruleVisibility{ after(grammarAccess.getConstantAccess().getVisibilityVisibilityEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueImplicitValueParserRuleCall_3_0()); }
	ruleImplicitValue{ after(grammarAccess.getConstantAccess().getValueImplicitValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__VisibilityAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getVisibilityVisibilityEnumRuleCall_0_0_0()); }
	ruleVisibility{ after(grammarAccess.getOperationAccess().getVisibilityVisibilityEnumRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__StaticAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getStaticStaticKeyword_0_1_0()); }
(
{ before(grammarAccess.getOperationAccess().getStaticStaticKeyword_0_1_0()); }

	'static' 

{ after(grammarAccess.getOperationAccess().getStaticStaticKeyword_0_1_0()); }
)

{ after(grammarAccess.getOperationAccess().getStaticStaticKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParameterAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_0_0()); }
	ruleParameter{ after(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParameterAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_1_1_0()); }
	ruleParameter{ after(grammarAccess.getOperationAccess().getParameterParameterParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ReturnAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getReturnReferenceParserRuleCall_5_1_0()); }
	ruleReference{ after(grammarAccess.getOperationAccess().getReturnReferenceParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeReferenceParserRuleCall_2_0()); }
	ruleReference{ after(grammarAccess.getParameterAccess().getTypeReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ImplicitAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_1_0()); }
	ruleImplicitValue{ after(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ImplicitAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_2_1_0()); }
	ruleImplicitValue{ after(grammarAccess.getParameterAccess().getImplicitImplicitValueParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__VisibilityAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getVisibilityVisibilityEnumRuleCall_0_0_0()); }
	ruleVisibility{ after(grammarAccess.getAttributeAccess().getVisibilityVisibilityEnumRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__StaticAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getStaticStaticKeyword_0_1_0()); }
(
{ before(grammarAccess.getAttributeAccess().getStaticStaticKeyword_0_1_0()); }

	'static' 

{ after(grammarAccess.getAttributeAccess().getStaticStaticKeyword_0_1_0()); }
)

{ after(grammarAccess.getAttributeAccess().getStaticStaticKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeReferenceParserRuleCall_3_0()); }
	ruleReference{ after(grammarAccess.getAttributeAccess().getTypeReferenceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ImplicitAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_1_0()); }
	ruleImplicitValue{ after(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ImplicitAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_2_1_0()); }
	ruleImplicitValue{ after(grammarAccess.getAttributeAccess().getImplicitImplicitValueParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getTypeExtendedIDParserRuleCall_0_0()); }
	ruleExtendedID{ after(grammarAccess.getReferenceAccess().getTypeExtendedIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__ArrayAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getArrayArrayParserRuleCall_1_0()); }
	ruleArray{ after(grammarAccess.getReferenceAccess().getArrayArrayParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__SizeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getSizeNATURALTerminalRuleCall_2_0()); }
	RULE_NATURAL{ after(grammarAccess.getArrayAccess().getSizeNATURALTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





RULE_CONSTRAINT : '{' ( options {greedy=false;} : . )*'}';

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : ('null'|'nil'|'NULL');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NATURAL : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


