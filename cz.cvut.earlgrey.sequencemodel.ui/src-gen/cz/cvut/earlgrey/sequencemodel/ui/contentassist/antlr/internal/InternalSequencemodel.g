/*
* generated by Xtext
*/
grammar InternalSequencemodel;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package cz.cvut.earlgrey.sequencemodel.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.sequencemodel.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import cz.cvut.earlgrey.sequencemodel.services.SequencemodelGrammarAccess;

}

@parser::members {
 
 	private SequencemodelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SequencemodelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequence
entryRuleSequence 
:
{ before(grammarAccess.getSequenceRule()); }
	 ruleSequence
{ after(grammarAccess.getSequenceRule()); } 
	 EOF 
;

// Rule Sequence
ruleSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParticipant
entryRuleParticipant 
:
{ before(grammarAccess.getParticipantRule()); }
	 ruleParticipant
{ after(grammarAccess.getParticipantRule()); } 
	 EOF 
;

// Rule Participant
ruleParticipant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParticipantAccess().getGroup()); }
(rule__Participant__Group__0)
{ after(grammarAccess.getParticipantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getAlternatives()); }
(rule__Transition__Alternatives)
{ after(grammarAccess.getTransitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionBlock
entryRuleTransitionBlock 
:
{ before(grammarAccess.getTransitionBlockRule()); }
	 ruleTransitionBlock
{ after(grammarAccess.getTransitionBlockRule()); } 
	 EOF 
;

// Rule TransitionBlock
ruleTransitionBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionBlockAccess().getGroup()); }
(rule__TransitionBlock__Group__0)
{ after(grammarAccess.getTransitionBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleIfElseFragment
entryRuleIfElseFragment 
:
{ before(grammarAccess.getIfElseFragmentRule()); }
	 ruleIfElseFragment
{ after(grammarAccess.getIfElseFragmentRule()); } 
	 EOF 
;

// Rule IfElseFragment
ruleIfElseFragment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfElseFragmentAccess().getGroup()); }
(rule__IfElseFragment__Group__0)
{ after(grammarAccess.getIfElseFragmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeachFragment
entryRuleForeachFragment 
:
{ before(grammarAccess.getForeachFragmentRule()); }
	 ruleForeachFragment
{ after(grammarAccess.getForeachFragmentRule()); } 
	 EOF 
;

// Rule ForeachFragment
ruleForeachFragment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeachFragmentAccess().getGroup()); }
(rule__ForeachFragment__Group__0)
{ after(grammarAccess.getForeachFragmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsserFragment
entryRuleAsserFragment 
:
{ before(grammarAccess.getAsserFragmentRule()); }
	 ruleAsserFragment
{ after(grammarAccess.getAsserFragmentRule()); } 
	 EOF 
;

// Rule AsserFragment
ruleAsserFragment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsserFragmentAccess().getGroup()); }
(rule__AsserFragment__Group__0)
{ after(grammarAccess.getAsserFragmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMessage
entryRuleMessage 
:
{ before(grammarAccess.getMessageRule()); }
	 ruleMessage
{ after(grammarAccess.getMessageRule()); } 
	 EOF 
;

// Rule Message
ruleMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMessageAccess().getAlternatives()); }
(rule__Message__Alternatives)
{ after(grammarAccess.getMessageAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCallMessage
entryRuleCallMessage 
:
{ before(grammarAccess.getCallMessageRule()); }
	 ruleCallMessage
{ after(grammarAccess.getCallMessageRule()); } 
	 EOF 
;

// Rule CallMessage
ruleCallMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallMessageAccess().getGroup()); }
(rule__CallMessage__Group__0)
{ after(grammarAccess.getCallMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewMessage
entryRuleNewMessage 
:
{ before(grammarAccess.getNewMessageRule()); }
	 ruleNewMessage
{ after(grammarAccess.getNewMessageRule()); } 
	 EOF 
;

// Rule NewMessage
ruleNewMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewMessageAccess().getGroup()); }
(rule__NewMessage__Group__0)
{ after(grammarAccess.getNewMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnMessage
entryRuleReturnMessage 
:
{ before(grammarAccess.getReturnMessageRule()); }
	 ruleReturnMessage
{ after(grammarAccess.getReturnMessageRule()); } 
	 EOF 
;

// Rule ReturnMessage
ruleReturnMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnMessageAccess().getGroup()); }
(rule__ReturnMessage__Group__0)
{ after(grammarAccess.getReturnMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueWithSpaces
entryRuleValueWithSpaces 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getValueWithSpacesRule()); }
	 ruleValueWithSpaces
{ after(grammarAccess.getValueWithSpacesRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ValueWithSpaces
ruleValueWithSpaces
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueWithSpacesAccess().getAlternatives()); }
(rule__ValueWithSpaces__Alternatives)*
{ after(grammarAccess.getValueWithSpacesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignParameter
entryRuleAssignParameter 
:
{ before(grammarAccess.getAssignParameterRule()); }
	 ruleAssignParameter
{ after(grammarAccess.getAssignParameterRule()); } 
	 EOF 
;

// Rule AssignParameter
ruleAssignParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignParameterAccess().getGroup()); }
(rule__AssignParameter__Group__0)
{ after(grammarAccess.getAssignParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueParameter
entryRuleValueParameter 
:
{ before(grammarAccess.getValueParameterRule()); }
	 ruleValueParameter
{ after(grammarAccess.getValueParameterRule()); } 
	 EOF 
;

// Rule ValueParameter
ruleValueParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueParameterAccess().getValueAssignment()); }
(rule__ValueParameter__ValueAssignment)
{ after(grammarAccess.getValueParameterAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtendedID
entryRuleExtendedID 
:
{ before(grammarAccess.getExtendedIDRule()); }
	 ruleExtendedID
{ after(grammarAccess.getExtendedIDRule()); } 
	 EOF 
;

// Rule ExtendedID
ruleExtendedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup()); }
(rule__ExtendedID__Group__0)
{ after(grammarAccess.getExtendedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleReal
entryRuleReal 
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealAccess().getGroup()); }
(rule__Real__Group__0)
{ after(grammarAccess.getRealAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Transition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionBlockParserRuleCall_0()); }
	ruleTransitionBlock
{ after(grammarAccess.getTransitionAccess().getTransitionBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTransitionAccess().getMessageParserRuleCall_1()); }
	ruleMessage
{ after(grammarAccess.getTransitionAccess().getMessageParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Message__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageAccess().getCallMessageParserRuleCall_0()); }
	ruleCallMessage
{ after(grammarAccess.getMessageAccess().getCallMessageParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMessageAccess().getNewMessageParserRuleCall_1()); }
	ruleNewMessage
{ after(grammarAccess.getMessageAccess().getNewMessageParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMessageAccess().getReturnMessageParserRuleCall_2()); }
	ruleReturnMessage
{ after(grammarAccess.getMessageAccess().getReturnMessageParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueWithSpaces__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueWithSpacesAccess().getOPERATORTerminalRuleCall_0()); }
	RULE_OPERATOR
{ after(grammarAccess.getValueWithSpacesAccess().getOPERATORTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueWithSpacesAccess().getValueParserRuleCall_1()); }
	ruleValue
{ after(grammarAccess.getValueWithSpacesAccess().getValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueWithSpacesAccess().getANY_OTHERTerminalRuleCall_2()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getValueWithSpacesAccess().getANY_OTHERTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueWithSpacesAccess().getWSTerminalRuleCall_3()); }
	RULE_WS
{ after(grammarAccess.getValueWithSpacesAccess().getWSTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAssignParameterParserRuleCall_0()); }
	ruleAssignParameter
{ after(grammarAccess.getParameterAccess().getAssignParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getValueParameterParserRuleCall_1()); }
	ruleValueParameter
{ after(grammarAccess.getParameterAccess().getValueParameterParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
	ruleExtendedID
{ after(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
	RULE_BOOLEAN
{ after(grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
	RULE_NULL
{ after(grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
	ruleReal
{ after(grammarAccess.getValueAccess().getRealParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }

	'e' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }

	'E' 

{ after(grammarAccess.getRealAccess().getEKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Alternatives_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }

	'+' 

{ after(grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }

	'-' 

{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSequenceAssignment_1()); }
(rule__Model__SequenceAssignment_1)*
{ after(grammarAccess.getModelAccess().getSequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__0__Impl
	rule__Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getAnnotationAssignment_0()); }
(rule__Sequence__AnnotationAssignment_0)*
{ after(grammarAccess.getSequenceAccess().getAnnotationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__1__Impl
	rule__Sequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getSequenceKeyword_1()); }
(
	'sequence' 
)
{ after(grammarAccess.getSequenceAccess().getSequenceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__2__Impl
	rule__Sequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getNameAssignment_2()); }
(rule__Sequence__NameAssignment_2)
{ after(grammarAccess.getSequenceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__3__Impl
	rule__Sequence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParticipantAssignment_3()); }
(rule__Sequence__ParticipantAssignment_3)*
{ after(grammarAccess.getSequenceAccess().getParticipantAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getSequenceAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Participant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Participant__Group__0__Impl
	rule__Participant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParticipantAccess().getNameAssignment_0()); }
(rule__Participant__NameAssignment_0)
{ after(grammarAccess.getParticipantAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Participant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Participant__Group__1__Impl
	rule__Participant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParticipantAccess().getTransitionAssignment_1()); }
(rule__Participant__TransitionAssignment_1)*
{ after(grammarAccess.getParticipantAccess().getTransitionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Participant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Participant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParticipantAccess().getEndKeyword_2()); }

	'end' 

{ after(grammarAccess.getParticipantAccess().getEndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TransitionBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionBlock__Group__0__Impl
	rule__TransitionBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getNameAssignment_0()); }
(rule__TransitionBlock__NameAssignment_0)
{ after(grammarAccess.getTransitionBlockAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionBlock__Group__1__Impl
	rule__TransitionBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTransitionBlockAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionBlock__Group__2__Impl
	rule__TransitionBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getTransitionAssignment_2()); }
(rule__TransitionBlock__TransitionAssignment_2)*
{ after(grammarAccess.getTransitionBlockAccess().getTransitionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getTransitionBlockAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfElseFragment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__0__Impl
	rule__IfElseFragment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfElseFragmentAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__1__Impl
	rule__IfElseFragment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getExprAssignment_1()); }
(rule__IfElseFragment__ExprAssignment_1)
{ after(grammarAccess.getIfElseFragmentAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__2__Impl
	rule__IfElseFragment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getIfElseFragmentAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__3__Impl
	rule__IfElseFragment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getTransitionAssignment_3()); }
(rule__IfElseFragment__TransitionAssignment_3)*
{ after(grammarAccess.getIfElseFragmentAccess().getTransitionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__4__Impl
	rule__IfElseFragment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getGroup_4()); }
(rule__IfElseFragment__Group_4__0)?
{ after(grammarAccess.getIfElseFragmentAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getIfElseFragmentAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfElseFragment__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group_4__0__Impl
	rule__IfElseFragment__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getElseKeyword_4_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfElseFragmentAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseFragment__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseFragment__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getElseTransitionAssignment_4_1()); }
(rule__IfElseFragment__ElseTransitionAssignment_4_1)*
{ after(grammarAccess.getIfElseFragmentAccess().getElseTransitionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForeachFragment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachFragment__Group__0__Impl
	rule__ForeachFragment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getForeachKeyword_0()); }

	'foreach' 

{ after(grammarAccess.getForeachFragmentAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachFragment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachFragment__Group__1__Impl
	rule__ForeachFragment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getExprAssignment_1()); }
(rule__ForeachFragment__ExprAssignment_1)
{ after(grammarAccess.getForeachFragmentAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachFragment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachFragment__Group__2__Impl
	rule__ForeachFragment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getDoKeyword_2()); }

	'do' 

{ after(grammarAccess.getForeachFragmentAccess().getDoKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachFragment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachFragment__Group__3__Impl
	rule__ForeachFragment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getTransitionAssignment_3()); }
(rule__ForeachFragment__TransitionAssignment_3)*
{ after(grammarAccess.getForeachFragmentAccess().getTransitionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachFragment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachFragment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getForeachFragmentAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AsserFragment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsserFragment__Group__0__Impl
	rule__AsserFragment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getAssertKeyword_0()); }

	'assert' 

{ after(grammarAccess.getAsserFragmentAccess().getAssertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsserFragment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsserFragment__Group__1__Impl
	rule__AsserFragment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getExprAssignment_1()); }
(rule__AsserFragment__ExprAssignment_1)
{ after(grammarAccess.getAsserFragmentAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsserFragment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsserFragment__Group__2__Impl
	rule__AsserFragment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getAsserFragmentAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsserFragment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsserFragment__Group__3__Impl
	rule__AsserFragment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getTransitionAssignment_3()); }
(rule__AsserFragment__TransitionAssignment_3)*
{ after(grammarAccess.getAsserFragmentAccess().getTransitionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsserFragment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsserFragment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getAsserFragmentAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CallMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group__0__Impl
	rule__CallMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getNameAssignment_0()); }
(rule__CallMessage__NameAssignment_0)
{ after(grammarAccess.getCallMessageAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group__1__Impl
	rule__CallMessage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getGroup_1()); }
(rule__CallMessage__Group_1__0)?
{ after(grammarAccess.getCallMessageAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParticipantAssignment_2()); }
(rule__CallMessage__ParticipantAssignment_2)?
{ after(grammarAccess.getCallMessageAccess().getParticipantAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CallMessage__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1__0__Impl
	rule__CallMessage__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getLeftParenthesisKeyword_1_0()); }
(
	'(' 
)
{ after(grammarAccess.getCallMessageAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1__1__Impl
	rule__CallMessage__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getGroup_1_1()); }
(rule__CallMessage__Group_1_1__0)?
{ after(grammarAccess.getCallMessageAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getCallMessageAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CallMessage__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1_1__0__Impl
	rule__CallMessage__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParamAssignment_1_1_0()); }
(rule__CallMessage__ParamAssignment_1_1_0)
{ after(grammarAccess.getCallMessageAccess().getParamAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getGroup_1_1_1()); }
(rule__CallMessage__Group_1_1_1__0)*
{ after(grammarAccess.getCallMessageAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CallMessage__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1_1_1__0__Impl
	rule__CallMessage__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getCommaSpaceKeyword_1_1_1_0()); }
(
	', ' 
)
{ after(grammarAccess.getCallMessageAccess().getCommaSpaceKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallMessage__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallMessage__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParamAssignment_1_1_1_1()); }
(rule__CallMessage__ParamAssignment_1_1_1_1)
{ after(grammarAccess.getCallMessageAccess().getParamAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NewMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewMessage__Group__0__Impl
	rule__NewMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewMessage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewMessageAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getNewMessageAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewMessage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewMessage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewMessageAccess().getParticipantAssignment_1()); }
(rule__NewMessage__ParticipantAssignment_1)
{ after(grammarAccess.getNewMessageAccess().getParticipantAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group__0__Impl
	rule__ReturnMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getReturnKeyword_0()); }

	'return ' 

{ after(grammarAccess.getReturnMessageAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group__1__Impl
	rule__ReturnMessage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getNameAssignment_1()); }
(rule__ReturnMessage__NameAssignment_1)
{ after(grammarAccess.getReturnMessageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getGroup_2()); }
(rule__ReturnMessage__Group_2__0)?
{ after(grammarAccess.getReturnMessageAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReturnMessage__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2__0__Impl
	rule__ReturnMessage__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getLeftParenthesisKeyword_2_0()); }
(
	'(' 
)
{ after(grammarAccess.getReturnMessageAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2__1__Impl
	rule__ReturnMessage__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getGroup_2_1()); }
(rule__ReturnMessage__Group_2_1__0)?
{ after(grammarAccess.getReturnMessageAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getReturnMessageAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReturnMessage__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2_1__0__Impl
	rule__ReturnMessage__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getParamAssignment_2_1_0()); }
(rule__ReturnMessage__ParamAssignment_2_1_0)
{ after(grammarAccess.getReturnMessageAccess().getParamAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getGroup_2_1_1()); }
(rule__ReturnMessage__Group_2_1_1__0)*
{ after(grammarAccess.getReturnMessageAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnMessage__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2_1_1__0__Impl
	rule__ReturnMessage__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getCommaSpaceKeyword_2_1_1_0()); }
(
	', ' 
)
{ after(grammarAccess.getReturnMessageAccess().getCommaSpaceKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnMessage__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnMessage__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getParamAssignment_2_1_1_1()); }
(rule__ReturnMessage__ParamAssignment_2_1_1_1)
{ after(grammarAccess.getReturnMessageAccess().getParamAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
(rule__Annotation__NameAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
(
	'(' 
)
{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
(rule__Annotation__ParameterAssignment_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
	rule__Annotation__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
(rule__Annotation__Group_2_2__0)*
{ after(grammarAccess.getAnnotationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Annotation__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__0__Impl
	rule__Annotation__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
(rule__Annotation__ParameterAssignment_2_2_1)
{ after(grammarAccess.getAnnotationAccess().getParameterAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__0__Impl
	rule__AssignParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getNameAssignment_0()); }
(rule__AssignParameter__NameAssignment_0)
{ after(grammarAccess.getAssignParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__1__Impl
	rule__AssignParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignParameterAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getValueAssignment_2()); }
(rule__AssignParameter__ValueAssignment_2)
{ after(grammarAccess.getAssignParameterAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtendedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__0__Impl
	rule__ExtendedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup_1()); }
(rule__ExtendedID__Group_1__0)*
{ after(grammarAccess.getExtendedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__0__Impl
	rule__ExtendedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Real__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__1__Impl
	rule__Real__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__2__Impl
	rule__Real__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRealAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__3__Impl
	rule__Real__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getGroup_4()); }
(rule__Real__Group_4__0)?
{ after(grammarAccess.getRealAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Real__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__0__Impl
	rule__Real__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_0()); }
(rule__Real__Alternatives_4_0)
{ after(grammarAccess.getRealAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__1__Impl
	rule__Real__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getAlternatives_4_1()); }
(rule__Real__Alternatives_4_1)
{ after(grammarAccess.getRealAccess().getAlternatives_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Real__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
	RULE_NATURAL
{ after(grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
	RULE_NATURAL
{ after(grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSequenceSequenceParserRuleCall_1_0()); }
	ruleSequence{ after(grammarAccess.getModelAccess().getSequenceSequenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__AnnotationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getSequenceAccess().getAnnotationAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__ParticipantAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParticipantParticipantParserRuleCall_3_0()); }
	ruleParticipant{ after(grammarAccess.getSequenceAccess().getParticipantParticipantParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Participant__TransitionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParticipantAccess().getTransitionTransitionParserRuleCall_1_0()); }
	ruleTransition{ after(grammarAccess.getParticipantAccess().getTransitionTransitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTransitionBlockAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionBlock__TransitionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionBlockAccess().getTransitionMessageParserRuleCall_2_0()); }
	ruleMessage{ after(grammarAccess.getTransitionBlockAccess().getTransitionMessageParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
	ruleValueWithSpaces{ after(grammarAccess.getIfElseFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__TransitionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
	ruleMessage{ after(grammarAccess.getIfElseFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseFragment__ElseTransitionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseFragmentAccess().getElseTransitionMessageParserRuleCall_4_1_0()); }
	ruleMessage{ after(grammarAccess.getIfElseFragmentAccess().getElseTransitionMessageParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
	ruleValueWithSpaces{ after(grammarAccess.getForeachFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachFragment__TransitionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
	ruleMessage{ after(grammarAccess.getForeachFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
	ruleValueWithSpaces{ after(grammarAccess.getAsserFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsserFragment__TransitionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsserFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
	ruleMessage{ after(grammarAccess.getAsserFragmentAccess().getTransitionMessageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getCallMessageAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__ParamAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_0_0()); }
	RULE_ID{ after(grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__ParamAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_1_1_0()); }
	RULE_ID{ after(grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallMessage__ParticipantAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallMessageAccess().getParticipantIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getCallMessageAccess().getParticipantIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewMessage__ParticipantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewMessageAccess().getParticipantIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNewMessageAccess().getParticipantIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getReturnMessageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__ParamAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_0_0()); }
	RULE_ID{ after(grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnMessage__ParamAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_1_1_0()); }
	RULE_ID{ after(grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ParameterAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
	ruleParameter{ after(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getNameExtendedIDParserRuleCall_0_0()); }
	ruleExtendedID{ after(grammarAccess.getAssignParameterAccess().getNameExtendedIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignParameter__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignParameterAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getAssignParameterAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueParameter__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueParameterAccess().getValueValueParserRuleCall_0()); }
	ruleValue{ after(grammarAccess.getValueParameterAccess().getValueValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OPERATOR : ('++'|'--'|'=='|'>='|'<='|'!='|'<>'|'||'|'&&'|'-='|'+='|'='|'>>'|'<<'|'|=');

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : ('null'|'nil'|'NULL');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NATURAL : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


