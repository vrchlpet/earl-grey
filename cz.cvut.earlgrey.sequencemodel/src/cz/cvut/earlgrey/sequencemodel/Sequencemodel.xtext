grammar cz.cvut.earlgrey.sequencemodel.Sequencemodel with cz.cvut.earlgrey.annotation.Annotation

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate sequencemodel "http://www.cvut.cz/earlgrey/sequencemodel/Sequencemodel"

Model:
    (imports+=Import)* (sequence+=Sequence)*;

Import:
    'import' importURI=STRING;
    

Sequence:
    annotation+=Annotation* =>
    'sequence' name=ID
        participant+=Participant*
    'end'
;

Participant:
    name=ID
        transition+=Transition*
    'end'
;

Transition:
    TransitionBlock | Message
;

TransitionBlock:
    name=ID ':'
        transition+=Message*
    'end'
;

Fragment:
    IfElseFragment
    | ForeachFragment
    | AsserFragment
;

IfElseFragment:
    'if' expr=ValueWithSpaces 'then'
        transition+=Message*
     (=> 'else' elseTransition+=Message*)? 
    'end'
;

ForeachFragment:
    'foreach' expr=ValueWithSpaces 'do'
        transition+=Message*
    'end'
;

AsserFragment:
    'assert' expr=ValueWithSpaces 'then'
        transition+=Message*
    'end'
;

Message:
    CallMessage | NewMessage | ReturnMessage
;

CallMessage:
    name=ID (=> '(' (param+=ID (=> ', ' param+=ID)*)? ')')? participant=ID?
;

NewMessage:
    'new' participant=ID
;

ReturnMessage:
    'return ' name=ID (=> '(' (param+=ID (=> ', ' param+=ID)*)? ')')?
;

ValueWithSpaces hidden():
    (OPERATOR | Value | ANY_OTHER | WS)*
;
