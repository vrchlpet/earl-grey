grammar cz.cvut.earlgrey.sequencemodel.Sequencemodel with cz.cvut.earlgrey.annotation.Annotation

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate sequencemodel "http://www.cvut.cz/earlgrey/sequencemodel/Sequencemodel"

Model:
    (imports+=Import)* (sequence+=Sequence)*;

Import:
    'import' importURI=STRING;
    

Sequence:
    annotation+=Annotation* =>
    'sequence' name=ID
        participant+=Participant*
    'end'
;

Participant:
    annotation+=Annotation* =>
    name=ID
        transition+=Transition*
    'end'
;

Transition:
    TransitionBlock | Message | Fragment
;

// e.g.: def append(child : Node) end
TransitionBlock:
    'def' name=ID (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')? //':'
        transition+=FragmentBody*
    'end'
;

Fragment:
    IfElseFragment
    | ForeachFragment
    | AssertFragment
    | LoopFragment
;

FragmentBody returns Transition:
    Fragment | Message
;

IfElseFragment: //alt/opt
    'if' expr=ValueWithSpaces 'then'
        transition+=FragmentBody*
     (=> 'elsif' elseIfExpr+=ValueWithSpaces 'then'
         elseIftransition+=FragmentBody*
     )*
     (=> 'else'
        elseTransition+=FragmentBody*
     )? 
    'end'
;

// e.g.: foreach node do /*..*/ end
ForeachFragment:
    'foreach' expr=ValueWithSpacesExpr 'do'
        transition+=FragmentBody*
    'end'
;

// e.g.: while i < 0 do /*..*/ end
LoopFragment: //loop
    'while' expr=ValueWithSpaces 'do'
        transition+=FragmentBody*
    'end'
;

AssertFragment: //assert
    'assert' expr=ValueWithSpaces 'then'
        transition+=FragmentBody*
    'end'
;


//
Message:
    CallMessage | NewMessage | ReturnMessage
;

// e.g.: Node.getChild()
CallMessage:
    (participant=ID '.')? => name=ID (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')?
;

// e.g.: new Node
// TODO: implicitValues? "new Node(null, 5, 8)" -- child, x, y
NewMessage:
    'new' participant=ID (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')?
;

// e.g.: return childs
ReturnMessage:
    'return ' name=Reference (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')?
;

// e.g.: Name : String = "John"
Parameter:
    name=ID (':' type=Reference)?
;

Reference:
    type=ID array+=Array*
;

Array:
    {Array} '[' size=NATURAL? ']'
;

ValueWithSpacesExpr hidden():
    (OPERATOR | (NATURAL '..' NATURAL) | Value | ANY_OTHER | WS)*
;

ValueWithSpaces hidden():
    (OPERATOR | Value | ANY_OTHER | WS)*
;
