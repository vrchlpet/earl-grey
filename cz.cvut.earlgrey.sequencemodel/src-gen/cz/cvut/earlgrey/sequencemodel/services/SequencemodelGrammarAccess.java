/*
* generated by Xtext
*/

package cz.cvut.earlgrey.sequencemodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import cz.cvut.earlgrey.annotation.services.AnnotationGrammarAccess;

@Singleton
public class SequencemodelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequenceSequenceParserRuleCall_1_0 = (RuleCall)cSequenceAssignment_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* sequence+=Sequence*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* sequence+=Sequence*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//sequence+=Sequence*
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }

		//Sequence
		public RuleCall getSequenceSequenceParserRuleCall_1_0() { return cSequenceSequenceParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParticipantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParticipantParticipantParserRuleCall_3_0 = (RuleCall)cParticipantAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParticipantAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParticipantParticipantParserRuleCall_4_1_0 = (RuleCall)cParticipantAssignment_4_1.eContents().get(0);
		private final Assignment cTransitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransitionTransitionParserRuleCall_5_0 = (RuleCall)cTransitionAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Sequence:
		//	annotation+=Annotation* => "sequence" name=ID participant+=Participant ("," participant+=Participant)*
		//	transition+=Transition* "end";
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation* => "sequence" name=ID participant+=Participant ("," participant+=Participant)*
		//transition+=Transition* "end"
		public Group getGroup() { return cGroup; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//=> "sequence"
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//participant+=Participant
		public Assignment getParticipantAssignment_3() { return cParticipantAssignment_3; }

		//Participant
		public RuleCall getParticipantParticipantParserRuleCall_3_0() { return cParticipantParticipantParserRuleCall_3_0; }

		//(=> "," participant+=Participant)*
		public Group getGroup_4() { return cGroup_4; }

		//=> ","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//participant+=Participant
		public Assignment getParticipantAssignment_4_1() { return cParticipantAssignment_4_1; }

		//Participant
		public RuleCall getParticipantParticipantParserRuleCall_4_1_0() { return cParticipantParticipantParserRuleCall_4_1_0; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_5() { return cTransitionAssignment_5; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_5_0() { return cTransitionTransitionParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Participant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cClassifierEntityCrossReference_1_1_0 = (CrossReference)cClassifierAssignment_1_1.eContents().get(0);
		private final RuleCall cClassifierEntityExtendedIDParserRuleCall_1_1_0_1 = (RuleCall)cClassifierEntityCrossReference_1_1_0.eContents().get(1);
		
		//// e.g.: Node
		//
		//Participant:
		//	name=ID (":" classifier=[cls::Entity|ExtendedID])?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" classifier=[cls::Entity|ExtendedID])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" classifier=[cls::Entity|ExtendedID])?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//classifier=[cls::Entity|ExtendedID]
		public Assignment getClassifierAssignment_1_1() { return cClassifierAssignment_1_1; }

		//[cls::Entity|ExtendedID]
		public CrossReference getClassifierEntityCrossReference_1_1_0() { return cClassifierEntityCrossReference_1_1_0; }

		//ExtendedID
		public RuleCall getClassifierEntityExtendedIDParserRuleCall_1_1_0_1() { return cClassifierEntityExtendedIDParserRuleCall_1_1_0_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Transition:
		//	Message | Fragment;
		public ParserRule getRule() { return rule; }

		//Message | Fragment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }

		//Fragment
		public RuleCall getFragmentParserRuleCall_1() { return cFragmentParserRuleCall_1; }
	}

	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfElseFragmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForeachFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLoopFragmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBreakFragmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNextFragmentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////// e.g.: def append(child : Node) end
		//
		////TransitionBlock:
		//
		////    'def' name=ID (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')? //':'
		//
		////        transition+=Transition*
		//
		////    'end'
		//
		////;
		//
		//Fragment:
		//	IfElseFragment | ForeachFragment | AssertFragment | LoopFragment | BreakFragment | NextFragment;
		public ParserRule getRule() { return rule; }

		//IfElseFragment | ForeachFragment | AssertFragment | LoopFragment | BreakFragment | NextFragment
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfElseFragment
		public RuleCall getIfElseFragmentParserRuleCall_0() { return cIfElseFragmentParserRuleCall_0; }

		//ForeachFragment
		public RuleCall getForeachFragmentParserRuleCall_1() { return cForeachFragmentParserRuleCall_1; }

		//AssertFragment
		public RuleCall getAssertFragmentParserRuleCall_2() { return cAssertFragmentParserRuleCall_2; }

		//LoopFragment
		public RuleCall getLoopFragmentParserRuleCall_3() { return cLoopFragmentParserRuleCall_3; }

		//BreakFragment
		public RuleCall getBreakFragmentParserRuleCall_4() { return cBreakFragmentParserRuleCall_4; }

		//NextFragment
		public RuleCall getNextFragmentParserRuleCall_5() { return cNextFragmentParserRuleCall_5; }
	}

	public class IfElseFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfElseFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprValueWithSpacesParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0 = (RuleCall)cTransitionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElsifKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseIfExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseIfExprValueWithSpacesParserRuleCall_4_1_0 = (RuleCall)cElseIfExprAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cElseIftransitionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cElseIftransitionTransitionParserRuleCall_4_3_0 = (RuleCall)cElseIftransitionAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseTransitionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseTransitionTransitionParserRuleCall_5_1_0 = (RuleCall)cElseTransitionAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////alt/opt
		//
		//IfElseFragment:
		//	"if" expr=ValueWithSpaces "then" transition+=Transition* ("elsif" elseIfExpr+=ValueWithSpaces "then"
		//	elseIftransition+=Transition*)* ("else" elseTransition+=Transition*)? "end";
		public ParserRule getRule() { return rule; }

		//"if" expr=ValueWithSpaces "then" transition+=Transition* ("elsif" elseIfExpr+=ValueWithSpaces "then"
		//elseIftransition+=Transition*)* ("else" elseTransition+=Transition*)? "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expr=ValueWithSpaces
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ValueWithSpaces
		public RuleCall getExprValueWithSpacesParserRuleCall_1_0() { return cExprValueWithSpacesParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0() { return cTransitionTransitionParserRuleCall_3_0; }

		//(=> "elsif" elseIfExpr+=ValueWithSpaces "then" elseIftransition+=Transition*)*
		public Group getGroup_4() { return cGroup_4; }

		//=> "elsif"
		public Keyword getElsifKeyword_4_0() { return cElsifKeyword_4_0; }

		//elseIfExpr+=ValueWithSpaces
		public Assignment getElseIfExprAssignment_4_1() { return cElseIfExprAssignment_4_1; }

		//ValueWithSpaces
		public RuleCall getElseIfExprValueWithSpacesParserRuleCall_4_1_0() { return cElseIfExprValueWithSpacesParserRuleCall_4_1_0; }

		//"then"
		public Keyword getThenKeyword_4_2() { return cThenKeyword_4_2; }

		//elseIftransition+=Transition*
		public Assignment getElseIftransitionAssignment_4_3() { return cElseIftransitionAssignment_4_3; }

		//Transition
		public RuleCall getElseIftransitionTransitionParserRuleCall_4_3_0() { return cElseIftransitionTransitionParserRuleCall_4_3_0; }

		//(=> "else" elseTransition+=Transition*)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseTransition+=Transition*
		public Assignment getElseTransitionAssignment_5_1() { return cElseTransitionAssignment_5_1; }

		//Transition
		public RuleCall getElseTransitionTransitionParserRuleCall_5_1_0() { return cElseTransitionTransitionParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class ForeachFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprForeachExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0 = (RuleCall)cTransitionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// e.g.: foreach node in Nodes do / *..* / end
		//
		//// e.g.: foreach i in 0..5 do / *..* / end
		//
		//ForeachFragment:
		//	"foreach" expr=ForeachExpression "do" transition+=Transition* "end";
		public ParserRule getRule() { return rule; }

		//"foreach" expr=ForeachExpression "do" transition+=Transition* "end"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//expr=ForeachExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ForeachExpression
		public RuleCall getExprForeachExpressionParserRuleCall_1_0() { return cExprForeachExpressionParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0() { return cTransitionTransitionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class LoopFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprValueWithSpacesParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0 = (RuleCall)cTransitionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// e.g.: while i < 0 do / *..* / end
		//
		////loop
		//
		//LoopFragment:
		//	"while" expr=ValueWithSpaces "do" transition+=Transition* "end";
		public ParserRule getRule() { return rule; }

		//"while" expr=ValueWithSpaces "do" transition+=Transition* "end"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//expr=ValueWithSpaces
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ValueWithSpaces
		public RuleCall getExprValueWithSpacesParserRuleCall_1_0() { return cExprValueWithSpacesParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0() { return cTransitionTransitionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class AssertFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprValueWithSpacesParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0 = (RuleCall)cTransitionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////assert
		//
		//AssertFragment:
		//	"assert" expr=ValueWithSpaces "then" transition+=Transition* "end";
		public ParserRule getRule() { return rule; }

		//"assert" expr=ValueWithSpaces "then" transition+=Transition* "end"
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//expr=ValueWithSpaces
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ValueWithSpaces
		public RuleCall getExprValueWithSpacesParserRuleCall_1_0() { return cExprValueWithSpacesParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0() { return cTransitionTransitionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class BreakFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprValueWithSpacesParserRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Keyword cThenKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTransitionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTransitionTransitionParserRuleCall_2_2_0 = (RuleCall)cTransitionAssignment_2_2.eContents().get(0);
		private final Keyword cEndKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// use this instead of:
		//
		////   if i > 0 then break end
		//
		//// e.g.: break i > 0 then / *..* / end
		//
		//BreakFragment:
		//	{BreakFragment} "break" (expr=ValueWithSpaces "then" transition+=Transition* "end")?;
		public ParserRule getRule() { return rule; }

		//{BreakFragment} "break" (expr=ValueWithSpaces "then" transition+=Transition* "end")?
		public Group getGroup() { return cGroup; }

		//{BreakFragment}
		public Action getBreakFragmentAction_0() { return cBreakFragmentAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//(expr=ValueWithSpaces "then" transition+=Transition* "end")?
		public Group getGroup_2() { return cGroup_2; }

		//expr=ValueWithSpaces
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }

		//ValueWithSpaces
		public RuleCall getExprValueWithSpacesParserRuleCall_2_0_0() { return cExprValueWithSpacesParserRuleCall_2_0_0; }

		//"then"
		public Keyword getThenKeyword_2_1() { return cThenKeyword_2_1; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_2_2() { return cTransitionAssignment_2_2; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_2_2_0() { return cTransitionTransitionParserRuleCall_2_2_0; }

		//"end"
		public Keyword getEndKeyword_2_3() { return cEndKeyword_2_3; }
	}

	public class NextFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNextFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprValueWithSpacesParserRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Keyword cThenKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTransitionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTransitionTransitionParserRuleCall_2_2_0 = (RuleCall)cTransitionAssignment_2_2.eContents().get(0);
		private final Keyword cEndKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// use this instead of:
		//
		////   if i > 0 then continue end
		//
		//// e.g.: next i % 5 then / *..* / end
		//
		//NextFragment:
		//	{NextFragment} "next" (expr=ValueWithSpaces "then" transition+=Transition* "end")?;
		public ParserRule getRule() { return rule; }

		//{NextFragment} "next" (expr=ValueWithSpaces "then" transition+=Transition* "end")?
		public Group getGroup() { return cGroup; }

		//{NextFragment}
		public Action getNextFragmentAction_0() { return cNextFragmentAction_0; }

		//"next"
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }

		//(expr=ValueWithSpaces "then" transition+=Transition* "end")?
		public Group getGroup_2() { return cGroup_2; }

		//expr=ValueWithSpaces
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }

		//ValueWithSpaces
		public RuleCall getExprValueWithSpacesParserRuleCall_2_0_0() { return cExprValueWithSpacesParserRuleCall_2_0_0; }

		//"then"
		public Keyword getThenKeyword_2_1() { return cThenKeyword_2_1; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_2_2() { return cTransitionAssignment_2_2; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_2_2_0() { return cTransitionTransitionParserRuleCall_2_2_0; }

		//"end"
		public Keyword getEndKeyword_2_3() { return cEndKeyword_2_3; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeleteMessageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelfMessageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFoundMessageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////
		//
		//Message:
		//	CallMessage //    | ReturnMessage
		//
		//	| NewMessage | DeleteMessage | SelfMessage | FoundMessage;
		public ParserRule getRule() { return rule; }

		//CallMessage //    | ReturnMessage
		//
		//| NewMessage | DeleteMessage | SelfMessage | FoundMessage
		public Alternatives getAlternatives() { return cAlternatives; }

		//CallMessage
		public RuleCall getCallMessageParserRuleCall_0() { return cCallMessageParserRuleCall_0; }

		//NewMessage
		public RuleCall getNewMessageParserRuleCall_1() { return cNewMessageParserRuleCall_1; }

		//DeleteMessage
		public RuleCall getDeleteMessageParserRuleCall_2() { return cDeleteMessageParserRuleCall_2; }

		//SelfMessage
		public RuleCall getSelfMessageParserRuleCall_3() { return cSelfMessageParserRuleCall_3; }

		//FoundMessage
		public RuleCall getFoundMessageParserRuleCall_4() { return cFoundMessageParserRuleCall_4; }
	}

	public class FoundMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FoundMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTargetParticipantAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTargetParticipantParticipantCrossReference_1_0_0 = (CrossReference)cTargetParticipantAssignment_1_0.eContents().get(0);
		private final RuleCall cTargetParticipantParticipantIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTargetParticipantParticipantCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParameterAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0_0 = (RuleCall)cParameterAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParameterAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cReturnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnReturnMessageParserRuleCall_4_0 = (RuleCall)cReturnAssignment_4.eContents().get(0);
		
		//FoundMessage:
		//	"calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)?
		//	")")? return=ReturnMessage?;
		public ParserRule getRule() { return rule; }

		//"calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)?
		//")")? return=ReturnMessage?
		public Group getGroup() { return cGroup; }

		//"calls"
		public Keyword getCallsKeyword_0() { return cCallsKeyword_0; }

		//(targetParticipant=[Participant] ".")?
		public Group getGroup_1() { return cGroup_1; }

		//targetParticipant=[Participant]
		public Assignment getTargetParticipantAssignment_1_0() { return cTargetParticipantAssignment_1_0; }

		//[Participant]
		public CrossReference getTargetParticipantParticipantCrossReference_1_0_0() { return cTargetParticipantParticipantCrossReference_1_0_0; }

		//ID
		public RuleCall getTargetParticipantParticipantIDTerminalRuleCall_1_0_0_1() { return cTargetParticipantParticipantIDTerminalRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//=> name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_3_1_0() { return cParameterAssignment_3_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0_0() { return cParameterParameterParserRuleCall_3_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1_1_1() { return cParameterAssignment_3_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_1_1_0() { return cParameterParameterParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//return=ReturnMessage?
		public Assignment getReturnAssignment_4() { return cReturnAssignment_4; }

		//ReturnMessage
		public RuleCall getReturnReturnMessageParserRuleCall_4_0() { return cReturnReturnMessageParserRuleCall_4_0; }
	}

	public class CallMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceParticipantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceParticipantParticipantCrossReference_0_0 = (CrossReference)cSourceParticipantAssignment_0.eContents().get(0);
		private final RuleCall cSourceParticipantParticipantIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceParticipantParticipantCrossReference_0_0.eContents().get(1);
		private final Keyword cCallsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTargetParticipantAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cTargetParticipantParticipantCrossReference_2_0_0 = (CrossReference)cTargetParticipantAssignment_2_0.eContents().get(0);
		private final RuleCall cTargetParticipantParticipantIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTargetParticipantParticipantCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParameterAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_4_1_0_0 = (RuleCall)cParameterAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_4_1_1_1_0 = (RuleCall)cParameterAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cReturnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnReturnMessageParserRuleCall_5_0 = (RuleCall)cReturnAssignment_5.eContents().get(0);
		
		//// e.g.: Handler calls Node.getChild()
		//
		//CallMessage:
		//	sourceParticipant=[Participant] "calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=>
		//	parameter+=Parameter ("," parameter+=Parameter)*)? ")")? return=ReturnMessage?;
		public ParserRule getRule() { return rule; }

		//sourceParticipant=[Participant] "calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=> parameter+=Parameter
		//("," parameter+=Parameter)*)? ")")? return=ReturnMessage?
		public Group getGroup() { return cGroup; }

		//sourceParticipant=[Participant]
		public Assignment getSourceParticipantAssignment_0() { return cSourceParticipantAssignment_0; }

		//[Participant]
		public CrossReference getSourceParticipantParticipantCrossReference_0_0() { return cSourceParticipantParticipantCrossReference_0_0; }

		//ID
		public RuleCall getSourceParticipantParticipantIDTerminalRuleCall_0_0_1() { return cSourceParticipantParticipantIDTerminalRuleCall_0_0_1; }

		//"calls"
		public Keyword getCallsKeyword_1() { return cCallsKeyword_1; }

		//(targetParticipant=[Participant] ".")?
		public Group getGroup_2() { return cGroup_2; }

		//targetParticipant=[Participant]
		public Assignment getTargetParticipantAssignment_2_0() { return cTargetParticipantAssignment_2_0; }

		//[Participant]
		public CrossReference getTargetParticipantParticipantCrossReference_2_0_0() { return cTargetParticipantParticipantCrossReference_2_0_0; }

		//ID
		public RuleCall getTargetParticipantParticipantIDTerminalRuleCall_2_0_0_1() { return cTargetParticipantParticipantIDTerminalRuleCall_2_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//=> name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_4_1_0() { return cParameterAssignment_4_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_1_0_0() { return cParameterParameterParserRuleCall_4_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_4_1_1_1() { return cParameterAssignment_4_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_1_1_1_0() { return cParameterParameterParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//return=ReturnMessage?
		public Assignment getReturnAssignment_5() { return cReturnAssignment_5; }

		//ReturnMessage
		public RuleCall getReturnReturnMessageParserRuleCall_5_0() { return cReturnReturnMessageParserRuleCall_5_0; }
	}

	public class NewMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceParticipantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceParticipantParticipantCrossReference_0_0 = (CrossReference)cSourceParticipantAssignment_0.eContents().get(0);
		private final RuleCall cSourceParticipantParticipantIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceParticipantParticipantCrossReference_0_0.eContents().get(1);
		private final Keyword cCreatesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetParticipantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetParticipantParticipantCrossReference_2_0 = (CrossReference)cTargetParticipantAssignment_2.eContents().get(0);
		private final RuleCall cTargetParticipantParticipantIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetParticipantParticipantCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParameterAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0_0 = (RuleCall)cParameterAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParameterAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// e.g.: new Node
		//
		//// TODO: implicitValues? "new Node(null, 5, 8)" -- child, x, y
		//
		//NewMessage:
		//	sourceParticipant=[Participant] "creates" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
		//	parameter+=Parameter)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//sourceParticipant=[Participant] "creates" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
		//parameter+=Parameter)*)? ")")?
		public Group getGroup() { return cGroup; }

		//sourceParticipant=[Participant]
		public Assignment getSourceParticipantAssignment_0() { return cSourceParticipantAssignment_0; }

		//[Participant]
		public CrossReference getSourceParticipantParticipantCrossReference_0_0() { return cSourceParticipantParticipantCrossReference_0_0; }

		//ID
		public RuleCall getSourceParticipantParticipantIDTerminalRuleCall_0_0_1() { return cSourceParticipantParticipantIDTerminalRuleCall_0_0_1; }

		//"creates"
		public Keyword getCreatesKeyword_1() { return cCreatesKeyword_1; }

		//targetParticipant=[Participant]
		public Assignment getTargetParticipantAssignment_2() { return cTargetParticipantAssignment_2; }

		//[Participant]
		public CrossReference getTargetParticipantParticipantCrossReference_2_0() { return cTargetParticipantParticipantCrossReference_2_0; }

		//ID
		public RuleCall getTargetParticipantParticipantIDTerminalRuleCall_2_0_1() { return cTargetParticipantParticipantIDTerminalRuleCall_2_0_1; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_3_1_0() { return cParameterAssignment_3_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0_0() { return cParameterParameterParserRuleCall_3_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1_1_1() { return cParameterAssignment_3_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_1_1_0() { return cParameterParameterParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ReturnMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReferenceParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_2_1_0_0 = (RuleCall)cParameterAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// e.g.: return childs
		//
		//ReturnMessage:
		//	"returns" name=Reference ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//"returns" name=Reference ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup() { return cGroup; }

		//"returns"
		public Keyword getReturnsKeyword_0() { return cReturnsKeyword_0; }

		//name=Reference
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Reference
		public RuleCall getNameReferenceParserRuleCall_1_0() { return cNameReferenceParserRuleCall_1_0; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_2_1_0() { return cParameterAssignment_2_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_1_0_0() { return cParameterParameterParserRuleCall_2_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_2_1_1_1() { return cParameterAssignment_2_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_1_1_1_0() { return cParameterParameterParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class DeleteMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceParticipantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceParticipantParticipantCrossReference_0_0 = (CrossReference)cSourceParticipantAssignment_0.eContents().get(0);
		private final RuleCall cSourceParticipantParticipantIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceParticipantParticipantCrossReference_0_0.eContents().get(1);
		private final Keyword cDestroysKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetParticipantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetParticipantParticipantCrossReference_2_0 = (CrossReference)cTargetParticipantAssignment_2.eContents().get(0);
		private final RuleCall cTargetParticipantParticipantIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetParticipantParticipantCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParameterAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_3_1_0_0 = (RuleCall)cParameterAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParameterAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DeleteMessage:
		//	sourceParticipant=[Participant] "destroys" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
		//	parameter+=Parameter)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//sourceParticipant=[Participant] "destroys" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
		//parameter+=Parameter)*)? ")")?
		public Group getGroup() { return cGroup; }

		//sourceParticipant=[Participant]
		public Assignment getSourceParticipantAssignment_0() { return cSourceParticipantAssignment_0; }

		//[Participant]
		public CrossReference getSourceParticipantParticipantCrossReference_0_0() { return cSourceParticipantParticipantCrossReference_0_0; }

		//ID
		public RuleCall getSourceParticipantParticipantIDTerminalRuleCall_0_0_1() { return cSourceParticipantParticipantIDTerminalRuleCall_0_0_1; }

		//"destroys"
		public Keyword getDestroysKeyword_1() { return cDestroysKeyword_1; }

		//targetParticipant=[Participant]
		public Assignment getTargetParticipantAssignment_2() { return cTargetParticipantAssignment_2; }

		//[Participant]
		public CrossReference getTargetParticipantParticipantCrossReference_2_0() { return cTargetParticipantParticipantCrossReference_2_0; }

		//ID
		public RuleCall getTargetParticipantParticipantIDTerminalRuleCall_2_0_1() { return cTargetParticipantParticipantIDTerminalRuleCall_2_0_1; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_3_1_0() { return cParameterAssignment_3_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_0_0() { return cParameterParameterParserRuleCall_3_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_3_1_1_1() { return cParameterAssignment_3_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_1_1_1_0() { return cParameterParameterParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class SelfMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceParticipantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceParticipantParticipantCrossReference_0_0 = (CrossReference)cSourceParticipantAssignment_0.eContents().get(0);
		private final RuleCall cSourceParticipantParticipantIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceParticipantParticipantCrossReference_0_0.eContents().get(1);
		private final Keyword cSelfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParameterAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_4_1_0_0 = (RuleCall)cParameterAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_4_1_1_1_0 = (RuleCall)cParameterAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cReturnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnReturnMessageParserRuleCall_5_0 = (RuleCall)cReturnAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cBeginKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTransitionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTransitionTransitionParserRuleCall_6_1_0 = (RuleCall)cTransitionAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		////TODO: rewrite this rule, do we really need begin-end?
		//
		//SelfMessage:
		//	sourceParticipant=[Participant] "self" "." name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		//	return=ReturnMessage? ("begin" transition+=Transition* "end")?;
		public ParserRule getRule() { return rule; }

		//sourceParticipant=[Participant] "self" "." name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		//return=ReturnMessage? ("begin" transition+=Transition* "end")?
		public Group getGroup() { return cGroup; }

		//sourceParticipant=[Participant]
		public Assignment getSourceParticipantAssignment_0() { return cSourceParticipantAssignment_0; }

		//[Participant]
		public CrossReference getSourceParticipantParticipantCrossReference_0_0() { return cSourceParticipantParticipantCrossReference_0_0; }

		//ID
		public RuleCall getSourceParticipantParticipantIDTerminalRuleCall_0_0_1() { return cSourceParticipantParticipantIDTerminalRuleCall_0_0_1; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(=> "(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(=> parameter+=Parameter ("," parameter+=Parameter)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//=> parameter+=Parameter
		public Assignment getParameterAssignment_4_1_0() { return cParameterAssignment_4_1_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_1_0_0() { return cParameterParameterParserRuleCall_4_1_0_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_4_1_1_1() { return cParameterAssignment_4_1_1_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_1_1_1_0() { return cParameterParameterParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//return=ReturnMessage?
		public Assignment getReturnAssignment_5() { return cReturnAssignment_5; }

		//ReturnMessage
		public RuleCall getReturnReturnMessageParserRuleCall_5_0() { return cReturnReturnMessageParserRuleCall_5_0; }

		//(=> "begin" transition+=Transition* "end")?
		public Group getGroup_6() { return cGroup_6; }

		//=> "begin"
		public Keyword getBeginKeyword_6_0() { return cBeginKeyword_6_0; }

		//transition+=Transition*
		public Assignment getTransitionAssignment_6_1() { return cTransitionAssignment_6_1; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_6_1_0() { return cTransitionTransitionParserRuleCall_6_1_0; }

		//"end"
		public Keyword getEndKeyword_6_2() { return cEndKeyword_6_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//// e.g.: Name : String = "John"
		//
		//Parameter:
		//	name=ID (":" type=Reference)?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=Reference)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=Reference)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=Reference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Reference
		public RuleCall getTypeReferenceParserRuleCall_1_1_0() { return cTypeReferenceParserRuleCall_1_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEntityExtendedIDParserRuleCall_0_0_1 = (RuleCall)cTypeEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		//Reference:
		//	type=[cls::Entity|ExtendedID] array+=Array*;
		public ParserRule getRule() { return rule; }

		//type=[cls::Entity|ExtendedID] array+=Array*
		public Group getGroup() { return cGroup; }

		//type=[cls::Entity|ExtendedID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[cls::Entity|ExtendedID]
		public CrossReference getTypeEntityCrossReference_0_0() { return cTypeEntityCrossReference_0_0; }

		//ExtendedID
		public RuleCall getTypeEntityExtendedIDParserRuleCall_0_0_1() { return cTypeEntityExtendedIDParserRuleCall_0_0_1; }

		//array+=Array*
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_1_0() { return cArrayArrayParserRuleCall_1_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeNATURALTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	{Array} "[" size=NATURAL? "]";
		public ParserRule getRule() { return rule; }

		//{Array} "[" size=NATURAL? "]"
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=NATURAL?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//NATURAL
		public RuleCall getSizeNATURALTerminalRuleCall_2_0() { return cSizeNATURALTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ForeachExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//ForeachExpression hidden(WS):
		//	ID "in" (NATURAL ".." NATURAL | ID);
		public ParserRule getRule() { return rule; }

		//ID "in" (NATURAL ".." NATURAL | ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//NATURAL ".." NATURAL | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//NATURAL ".." NATURAL
		public Group getGroup_2_0() { return cGroup_2_0; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_2_0_0() { return cNATURALTerminalRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_0_1() { return cFullStopFullStopKeyword_2_0_1; }

		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_2_0_2() { return cNATURALTerminalRuleCall_2_0_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class ValueWithSpacesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueWithSpaces");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPERATORTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////ValueWithSpacesExpr hidden():
		//
		////    (OPERATOR | (NATURAL '..' NATURAL) | Value | ANY_OTHER | WS)*
		//
		////;
		//
		//ValueWithSpaces hidden():
		//	(OPERATOR | Value | ANY_OTHER | WS)*;
		public ParserRule getRule() { return rule; }

		//(OPERATOR | Value | ANY_OTHER | WS)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//OPERATOR
		public RuleCall getOPERATORTerminalRuleCall_0() { return cOPERATORTerminalRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }

		//WS
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private SequenceElements pSequence;
	private ParticipantElements pParticipant;
	private TransitionElements pTransition;
	private FragmentElements pFragment;
	private IfElseFragmentElements pIfElseFragment;
	private ForeachFragmentElements pForeachFragment;
	private LoopFragmentElements pLoopFragment;
	private AssertFragmentElements pAssertFragment;
	private BreakFragmentElements pBreakFragment;
	private NextFragmentElements pNextFragment;
	private MessageElements pMessage;
	private FoundMessageElements pFoundMessage;
	private CallMessageElements pCallMessage;
	private NewMessageElements pNewMessage;
	private ReturnMessageElements pReturnMessage;
	private DeleteMessageElements pDeleteMessage;
	private SelfMessageElements pSelfMessage;
	private ParameterElements pParameter;
	private ReferenceElements pReference;
	private ArrayElements pArray;
	private ForeachExpressionElements pForeachExpression;
	private ValueWithSpacesElements pValueWithSpaces;
	
	private final GrammarProvider grammarProvider;

	private AnnotationGrammarAccess gaAnnotation;

	@Inject
	public SequencemodelGrammarAccess(GrammarProvider grammarProvider,
		AnnotationGrammarAccess gaAnnotation) {
		this.grammarProvider = grammarProvider;
		this.gaAnnotation = gaAnnotation;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public AnnotationGrammarAccess getAnnotationGrammarAccess() {
		return gaAnnotation;
	}

	
	//Model:
	//	imports+=Import* sequence+=Sequence*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Sequence:
	//	annotation+=Annotation* => "sequence" name=ID participant+=Participant ("," participant+=Participant)*
	//	transition+=Transition* "end";
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//// e.g.: Node
	//
	//Participant:
	//	name=ID (":" classifier=[cls::Entity|ExtendedID])?;
	public ParticipantElements getParticipantAccess() {
		return (pParticipant != null) ? pParticipant : (pParticipant = new ParticipantElements());
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}

	//Transition:
	//	Message | Fragment;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	////// e.g.: def append(child : Node) end
	//
	////TransitionBlock:
	//
	////    'def' name=ID (=> '(' (=> parameter+=Parameter (',' parameter+=Parameter)*)? ')')? //':'
	//
	////        transition+=Transition*
	//
	////    'end'
	//
	////;
	//
	//Fragment:
	//	IfElseFragment | ForeachFragment | AssertFragment | LoopFragment | BreakFragment | NextFragment;
	public FragmentElements getFragmentAccess() {
		return (pFragment != null) ? pFragment : (pFragment = new FragmentElements());
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}

	////alt/opt
	//
	//IfElseFragment:
	//	"if" expr=ValueWithSpaces "then" transition+=Transition* ("elsif" elseIfExpr+=ValueWithSpaces "then"
	//	elseIftransition+=Transition*)* ("else" elseTransition+=Transition*)? "end";
	public IfElseFragmentElements getIfElseFragmentAccess() {
		return (pIfElseFragment != null) ? pIfElseFragment : (pIfElseFragment = new IfElseFragmentElements());
	}
	
	public ParserRule getIfElseFragmentRule() {
		return getIfElseFragmentAccess().getRule();
	}

	//// e.g.: foreach node in Nodes do / *..* / end
	//
	//// e.g.: foreach i in 0..5 do / *..* / end
	//
	//ForeachFragment:
	//	"foreach" expr=ForeachExpression "do" transition+=Transition* "end";
	public ForeachFragmentElements getForeachFragmentAccess() {
		return (pForeachFragment != null) ? pForeachFragment : (pForeachFragment = new ForeachFragmentElements());
	}
	
	public ParserRule getForeachFragmentRule() {
		return getForeachFragmentAccess().getRule();
	}

	//// e.g.: while i < 0 do / *..* / end
	//
	////loop
	//
	//LoopFragment:
	//	"while" expr=ValueWithSpaces "do" transition+=Transition* "end";
	public LoopFragmentElements getLoopFragmentAccess() {
		return (pLoopFragment != null) ? pLoopFragment : (pLoopFragment = new LoopFragmentElements());
	}
	
	public ParserRule getLoopFragmentRule() {
		return getLoopFragmentAccess().getRule();
	}

	////assert
	//
	//AssertFragment:
	//	"assert" expr=ValueWithSpaces "then" transition+=Transition* "end";
	public AssertFragmentElements getAssertFragmentAccess() {
		return (pAssertFragment != null) ? pAssertFragment : (pAssertFragment = new AssertFragmentElements());
	}
	
	public ParserRule getAssertFragmentRule() {
		return getAssertFragmentAccess().getRule();
	}

	//// use this instead of:
	//
	////   if i > 0 then break end
	//
	//// e.g.: break i > 0 then / *..* / end
	//
	//BreakFragment:
	//	{BreakFragment} "break" (expr=ValueWithSpaces "then" transition+=Transition* "end")?;
	public BreakFragmentElements getBreakFragmentAccess() {
		return (pBreakFragment != null) ? pBreakFragment : (pBreakFragment = new BreakFragmentElements());
	}
	
	public ParserRule getBreakFragmentRule() {
		return getBreakFragmentAccess().getRule();
	}

	//// use this instead of:
	//
	////   if i > 0 then continue end
	//
	//// e.g.: next i % 5 then / *..* / end
	//
	//NextFragment:
	//	{NextFragment} "next" (expr=ValueWithSpaces "then" transition+=Transition* "end")?;
	public NextFragmentElements getNextFragmentAccess() {
		return (pNextFragment != null) ? pNextFragment : (pNextFragment = new NextFragmentElements());
	}
	
	public ParserRule getNextFragmentRule() {
		return getNextFragmentAccess().getRule();
	}

	////
	//
	//Message:
	//	CallMessage //    | ReturnMessage
	//
	//	| NewMessage | DeleteMessage | SelfMessage | FoundMessage;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//FoundMessage:
	//	"calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)?
	//	")")? return=ReturnMessage?;
	public FoundMessageElements getFoundMessageAccess() {
		return (pFoundMessage != null) ? pFoundMessage : (pFoundMessage = new FoundMessageElements());
	}
	
	public ParserRule getFoundMessageRule() {
		return getFoundMessageAccess().getRule();
	}

	//// e.g.: Handler calls Node.getChild()
	//
	//CallMessage:
	//	sourceParticipant=[Participant] "calls" (targetParticipant=[Participant] ".")? => name=ID ("(" (=>
	//	parameter+=Parameter ("," parameter+=Parameter)*)? ")")? return=ReturnMessage?;
	public CallMessageElements getCallMessageAccess() {
		return (pCallMessage != null) ? pCallMessage : (pCallMessage = new CallMessageElements());
	}
	
	public ParserRule getCallMessageRule() {
		return getCallMessageAccess().getRule();
	}

	//// e.g.: new Node
	//
	//// TODO: implicitValues? "new Node(null, 5, 8)" -- child, x, y
	//
	//NewMessage:
	//	sourceParticipant=[Participant] "creates" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
	//	parameter+=Parameter)*)? ")")?;
	public NewMessageElements getNewMessageAccess() {
		return (pNewMessage != null) ? pNewMessage : (pNewMessage = new NewMessageElements());
	}
	
	public ParserRule getNewMessageRule() {
		return getNewMessageAccess().getRule();
	}

	//// e.g.: return childs
	//
	//ReturnMessage:
	//	"returns" name=Reference ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?;
	public ReturnMessageElements getReturnMessageAccess() {
		return (pReturnMessage != null) ? pReturnMessage : (pReturnMessage = new ReturnMessageElements());
	}
	
	public ParserRule getReturnMessageRule() {
		return getReturnMessageAccess().getRule();
	}

	//DeleteMessage:
	//	sourceParticipant=[Participant] "destroys" targetParticipant=[Participant] ("(" (=> parameter+=Parameter (","
	//	parameter+=Parameter)*)? ")")?;
	public DeleteMessageElements getDeleteMessageAccess() {
		return (pDeleteMessage != null) ? pDeleteMessage : (pDeleteMessage = new DeleteMessageElements());
	}
	
	public ParserRule getDeleteMessageRule() {
		return getDeleteMessageAccess().getRule();
	}

	////TODO: rewrite this rule, do we really need begin-end?
	//
	//SelfMessage:
	//	sourceParticipant=[Participant] "self" "." name=ID ("(" (=> parameter+=Parameter ("," parameter+=Parameter)*)? ")")?
	//	return=ReturnMessage? ("begin" transition+=Transition* "end")?;
	public SelfMessageElements getSelfMessageAccess() {
		return (pSelfMessage != null) ? pSelfMessage : (pSelfMessage = new SelfMessageElements());
	}
	
	public ParserRule getSelfMessageRule() {
		return getSelfMessageAccess().getRule();
	}

	//// e.g.: Name : String = "John"
	//
	//Parameter:
	//	name=ID (":" type=Reference)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Reference:
	//	type=[cls::Entity|ExtendedID] array+=Array*;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Array:
	//	{Array} "[" size=NATURAL? "]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//ForeachExpression hidden(WS):
	//	ID "in" (NATURAL ".." NATURAL | ID);
	public ForeachExpressionElements getForeachExpressionAccess() {
		return (pForeachExpression != null) ? pForeachExpression : (pForeachExpression = new ForeachExpressionElements());
	}
	
	public ParserRule getForeachExpressionRule() {
		return getForeachExpressionAccess().getRule();
	}

	////ValueWithSpacesExpr hidden():
	//
	////    (OPERATOR | (NATURAL '..' NATURAL) | Value | ANY_OTHER | WS)*
	//
	////;
	//
	//ValueWithSpaces hidden():
	//	(OPERATOR | Value | ANY_OTHER | WS)*;
	public ValueWithSpacesElements getValueWithSpacesAccess() {
		return (pValueWithSpaces != null) ? pValueWithSpaces : (pValueWithSpaces = new ValueWithSpacesElements());
	}
	
	public ParserRule getValueWithSpacesRule() {
		return getValueWithSpacesAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//
	//Annotation:
	//	"@" name=ExtendedID ("(" parameter+=Parameter ("," parameter+=Parameter)* ")")?;
	public AnnotationGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotation.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// e.g.: @Generate(language = Java)
	//
	//AssignParameter returns Parameter:
	//	name=ExtendedID "=" value=Value;
	public AnnotationGrammarAccess.AssignParameterElements getAssignParameterAccess() {
		return gaAnnotation.getAssignParameterAccess();
	}
	
	public ParserRule getAssignParameterRule() {
		return getAssignParameterAccess().getRule();
	}

	//// e.g.: @Generate(Java)
	//
	//ValueParameter returns Parameter:
	//	value=Value;
	public AnnotationGrammarAccess.ValueParameterElements getValueParameterAccess() {
		return gaAnnotation.getValueParameterAccess();
	}
	
	public ParserRule getValueParameterRule() {
		return getValueParameterAccess().getRule();
	}

	//// e.g.: null
	//
	//Value returns ecore::EString:
	//	Integer | STRING | ExtendedID | BOOLEAN | NULL | Real;
	public AnnotationGrammarAccess.ValueElements getValueAccess() {
		return gaAnnotation.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ExtendedID:
	//	ID ("." ID)*;
	public AnnotationGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotation.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//CompositeID returns ecore::EString:
	//	ExtendedID | STRING;
	public AnnotationGrammarAccess.CompositeIDElements getCompositeIDAccess() {
		return gaAnnotation.getCompositeIDAccess();
	}
	
	public ParserRule getCompositeIDRule() {
		return getCompositeIDAccess().getRule();
	}

	//Real returns ecore::EDouble:
	//	"-"? NATURAL "." NATURAL (("e" | "E") ("+" | "-") NATURAL)?;
	public AnnotationGrammarAccess.RealElements getRealAccess() {
		return gaAnnotation.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer returns ecore::EInt:
	//	"-"? NATURAL;
	public AnnotationGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotation.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// FIXME: http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B
	//
	//terminal OPERATOR:
	//	"++" | "--" | "==" | ">=" | "<=" | "!=" | "<>" | "||" | "&&" | "-=" | "+=" | "=" | ">>" | "<<" | "|=";
	public TerminalRule getOPERATORRule() {
		return gaAnnotation.getOPERATORRule();
	} 

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaAnnotation.getBOOLEANRule();
	} 

	//terminal NULL:
	//	"null" | "nil" | "NULL";
	public TerminalRule getNULLRule() {
		return gaAnnotation.getNULLRule();
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaAnnotation.getIDRule();
	} 

	//terminal NATURAL returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getNATURALRule() {
		return gaAnnotation.getNATURALRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAnnotation.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotation.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotation.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAnnotation.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaAnnotation.getANY_OTHERRule();
	} 
}
