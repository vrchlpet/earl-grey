/*
* generated by Xtext
*/
grammar InternalSequencemodel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cz.cvut.earlgrey.sequencemodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.sequencemodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cz.cvut.earlgrey.sequencemodel.services.SequencemodelGrammarAccess;

}

@parser::members {

 	private SequencemodelGrammarAccess grammarAccess;
 	
    public InternalSequencemodelParser(TokenStream input, SequencemodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SequencemodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSequenceSequenceParserRuleCall_1_0()); 
	    }
		lv_sequence_1_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"sequence",
        		lv_sequence_1_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	'sequence' 
)=>	otherlv_1='sequence' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getSequenceKeyword_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getParticipantParticipantParserRuleCall_3_0()); 
	    }
		lv_participant_3_0=ruleParticipant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"participant",
        		lv_participant_3_0, 
        		"Participant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getParticipantParticipantParserRuleCall_4_1_0()); 
	    }
		lv_participant_5_0=ruleParticipant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"participant",
        		lv_participant_5_0, 
        		"Participant");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getTransitionTransitionParserRuleCall_5_0()); 
	    }
		lv_transition_6_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_6_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSequenceAccess().getEndKeyword_6());
    }
)
;





// Entry rule entryRuleParticipant
entryRuleParticipant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantRule()); }
	 iv_ruleParticipant=ruleParticipant 
	 { $current=$iv_ruleParticipant.current; } 
	 EOF 
;

// Rule Participant
ruleParticipant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParticipantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getMessageParserRuleCall_0()); 
    }
    this_Message_0=ruleMessage
    { 
        $current = $this_Message_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getFragmentParserRuleCall_1()); 
    }
    this_Fragment_1=ruleFragment
    { 
        $current = $this_Fragment_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFragment
entryRuleFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFragmentRule()); }
	 iv_ruleFragment=ruleFragment 
	 { $current=$iv_ruleFragment.current; } 
	 EOF 
;

// Rule Fragment
ruleFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getIfElseFragmentParserRuleCall_0()); 
    }
    this_IfElseFragment_0=ruleIfElseFragment
    { 
        $current = $this_IfElseFragment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getForeachFragmentParserRuleCall_1()); 
    }
    this_ForeachFragment_1=ruleForeachFragment
    { 
        $current = $this_ForeachFragment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getAssertFragmentParserRuleCall_2()); 
    }
    this_AssertFragment_2=ruleAssertFragment
    { 
        $current = $this_AssertFragment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getLoopFragmentParserRuleCall_3()); 
    }
    this_LoopFragment_3=ruleLoopFragment
    { 
        $current = $this_LoopFragment_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getBreakFragmentParserRuleCall_4()); 
    }
    this_BreakFragment_4=ruleBreakFragment
    { 
        $current = $this_BreakFragment_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFragmentAccess().getNextFragmentParserRuleCall_5()); 
    }
    this_NextFragment_5=ruleNextFragment
    { 
        $current = $this_NextFragment_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIfElseFragment
entryRuleIfElseFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfElseFragmentRule()); }
	 iv_ruleIfElseFragment=ruleIfElseFragment 
	 { $current=$iv_ruleIfElseFragment.current; } 
	 EOF 
;

// Rule IfElseFragment
ruleIfElseFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfElseFragmentAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfElseFragmentAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getTransitionTransitionParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((	'elsif' 
)=>	otherlv_4='elsif' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfElseFragmentAccess().getElsifKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getElseIfExprValueWithSpacesParserRuleCall_4_1_0()); 
	    }
		lv_elseIfExpr_5_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"elseIfExpr",
        		lv_elseIfExpr_5_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='then' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfElseFragmentAccess().getThenKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getElseIftransitionTransitionParserRuleCall_4_3_0()); 
	    }
		lv_elseIftransition_7_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"elseIftransition",
        		lv_elseIftransition_7_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*(((	'else' 
)=>	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfElseFragmentAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getElseTransitionTransitionParserRuleCall_5_1_0()); 
	    }
		lv_elseTransition_9_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"elseTransition",
        		lv_elseTransition_9_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIfElseFragmentAccess().getEndKeyword_6());
    }
)
;





// Entry rule entryRuleForeachFragment
entryRuleForeachFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachFragmentRule()); }
	 iv_ruleForeachFragment=ruleForeachFragment 
	 { $current=$iv_ruleForeachFragment.current; } 
	 EOF 
;

// Rule ForeachFragment
ruleForeachFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachFragmentAccess().getForeachKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachFragmentAccess().getExprForeachExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleForeachExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ForeachExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForeachFragmentAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachFragmentAccess().getTransitionTransitionParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForeachFragmentAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleLoopFragment
entryRuleLoopFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopFragmentRule()); }
	 iv_ruleLoopFragment=ruleLoopFragment 
	 { $current=$iv_ruleLoopFragment.current; } 
	 EOF 
;

// Rule LoopFragment
ruleLoopFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopFragmentAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopFragmentAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopFragmentAccess().getTransitionTransitionParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopFragmentAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleAssertFragment
entryRuleAssertFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertFragmentRule()); }
	 iv_ruleAssertFragment=ruleAssertFragment 
	 { $current=$iv_ruleAssertFragment.current; } 
	 EOF 
;

// Rule AssertFragment
ruleAssertFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssertFragmentAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssertFragmentAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertFragmentAccess().getTransitionTransitionParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssertFragmentAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleBreakFragment
entryRuleBreakFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakFragmentRule()); }
	 iv_ruleBreakFragment=ruleBreakFragment 
	 { $current=$iv_ruleBreakFragment.current; } 
	 EOF 
;

// Rule BreakFragment
ruleBreakFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakFragmentAccess().getBreakFragmentAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakFragmentAccess().getBreakKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBreakFragmentAccess().getExprValueWithSpacesParserRuleCall_2_0_0()); 
	    }
		lv_expr_2_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBreakFragmentAccess().getThenKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakFragmentAccess().getTransitionTransitionParserRuleCall_2_2_0()); 
	    }
		lv_transition_4_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_4_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBreakFragmentAccess().getEndKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleNextFragment
entryRuleNextFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextFragmentRule()); }
	 iv_ruleNextFragment=ruleNextFragment 
	 { $current=$iv_ruleNextFragment.current; } 
	 EOF 
;

// Rule NextFragment
ruleNextFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNextFragmentAccess().getNextFragmentAction_0(),
            $current);
    }
)	otherlv_1='next' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNextFragmentAccess().getNextKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNextFragmentAccess().getExprValueWithSpacesParserRuleCall_2_0_0()); 
	    }
		lv_expr_2_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNextFragmentAccess().getThenKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextFragmentAccess().getTransitionTransitionParserRuleCall_2_2_0()); 
	    }
		lv_transition_4_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_4_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNextFragmentAccess().getEndKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getCallMessageParserRuleCall_0()); 
    }
    this_CallMessage_0=ruleCallMessage
    { 
        $current = $this_CallMessage_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getNewMessageParserRuleCall_1()); 
    }
    this_NewMessage_1=ruleNewMessage
    { 
        $current = $this_NewMessage_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getDeleteMessageParserRuleCall_2()); 
    }
    this_DeleteMessage_2=ruleDeleteMessage
    { 
        $current = $this_DeleteMessage_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getSelfMessageParserRuleCall_3()); 
    }
    this_SelfMessage_3=ruleSelfMessage
    { 
        $current = $this_SelfMessage_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getFoundMessageParserRuleCall_4()); 
    }
    this_FoundMessage_4=ruleFoundMessage
    { 
        $current = $this_FoundMessage_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFoundMessage
entryRuleFoundMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFoundMessageRule()); }
	 iv_ruleFoundMessage=ruleFoundMessage 
	 { $current=$iv_ruleFoundMessage.current; } 
	 EOF 
;

// Rule FoundMessage
ruleFoundMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='calls' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFoundMessageAccess().getCallsKeyword_0());
    }
((
(
		lv_targetParticipant_1_0=RULE_ID
		{
			newLeafNode(lv_targetParticipant_1_0, grammarAccess.getFoundMessageAccess().getTargetParticipantIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFoundMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"targetParticipant",
        		lv_targetParticipant_1_0, 
        		"ID");
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFoundMessageAccess().getFullStopKeyword_1_1());
    }
)?((
(
RULE_ID

)
)=>
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFoundMessageAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFoundMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFoundMessageAccess().getLeftParenthesisKeyword_3_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getFoundMessageAccess().getParameterParameterParserRuleCall_3_1_0_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoundMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFoundMessageAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoundMessageAccess().getParameterParameterParserRuleCall_3_1_1_1_0()); 
	    }
		lv_parameter_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoundMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFoundMessageAccess().getRightParenthesisKeyword_3_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFoundMessageAccess().getReturnReturnMessageParserRuleCall_4_0()); 
	    }
		lv_return_9_0=ruleReturnMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoundMessageRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_9_0, 
        		"ReturnMessage");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCallMessage
entryRuleCallMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallMessageRule()); }
	 iv_ruleCallMessage=ruleCallMessage 
	 { $current=$iv_ruleCallMessage.current; } 
	 EOF 
;

// Rule CallMessage
ruleCallMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sourceParticipant_0_0=RULE_ID
		{
			newLeafNode(lv_sourceParticipant_0_0, grammarAccess.getCallMessageAccess().getSourceParticipantIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sourceParticipant",
        		lv_sourceParticipant_0_0, 
        		"ID");
	    }

)
)	otherlv_1='calls' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallMessageAccess().getCallsKeyword_1());
    }
((
(
		lv_targetParticipant_2_0=RULE_ID
		{
			newLeafNode(lv_targetParticipant_2_0, grammarAccess.getCallMessageAccess().getTargetParticipantIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"targetParticipant",
        		lv_targetParticipant_2_0, 
        		"ID");
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallMessageAccess().getFullStopKeyword_2_1());
    }
)?((
(
RULE_ID

)
)=>
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getCallMessageAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallMessageAccess().getLeftParenthesisKeyword_4_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getCallMessageAccess().getParameterParameterParserRuleCall_4_1_0_0()); 
	    }
		lv_parameter_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallMessageAccess().getCommaKeyword_4_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallMessageAccess().getParameterParameterParserRuleCall_4_1_1_1_0()); 
	    }
		lv_parameter_8_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_8_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCallMessageAccess().getRightParenthesisKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCallMessageAccess().getReturnReturnMessageParserRuleCall_5_0()); 
	    }
		lv_return_10_0=ruleReturnMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallMessageRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_10_0, 
        		"ReturnMessage");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleNewMessage
entryRuleNewMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewMessageRule()); }
	 iv_ruleNewMessage=ruleNewMessage 
	 { $current=$iv_ruleNewMessage.current; } 
	 EOF 
;

// Rule NewMessage
ruleNewMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sourceParticipant_0_0=RULE_ID
		{
			newLeafNode(lv_sourceParticipant_0_0, grammarAccess.getNewMessageAccess().getSourceParticipantIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sourceParticipant",
        		lv_sourceParticipant_0_0, 
        		"ID");
	    }

)
)	otherlv_1='creates' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNewMessageAccess().getCreatesKeyword_1());
    }
(
(
		lv_targetParticipant_2_0=RULE_ID
		{
			newLeafNode(lv_targetParticipant_2_0, grammarAccess.getNewMessageAccess().getTargetParticipantIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"targetParticipant",
        		lv_targetParticipant_2_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNewMessageAccess().getLeftParenthesisKeyword_3_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getNewMessageAccess().getParameterParameterParserRuleCall_3_1_0_0()); 
	    }
		lv_parameter_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNewMessageAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNewMessageAccess().getParameterParameterParserRuleCall_3_1_1_1_0()); 
	    }
		lv_parameter_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNewMessageAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleReturnMessage
entryRuleReturnMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnMessageRule()); }
	 iv_ruleReturnMessage=ruleReturnMessage 
	 { $current=$iv_ruleReturnMessage.current; } 
	 EOF 
;

// Rule ReturnMessage
ruleReturnMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='returns' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnMessageAccess().getReturnsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnMessageAccess().getNameReferenceParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnMessageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnMessageAccess().getLeftParenthesisKeyword_2_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getReturnMessageAccess().getParameterParameterParserRuleCall_2_1_0_0()); 
	    }
		lv_parameter_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReturnMessageAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnMessageAccess().getParameterParameterParserRuleCall_2_1_1_1_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReturnMessageAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleDeleteMessage
entryRuleDeleteMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeleteMessageRule()); }
	 iv_ruleDeleteMessage=ruleDeleteMessage 
	 { $current=$iv_ruleDeleteMessage.current; } 
	 EOF 
;

// Rule DeleteMessage
ruleDeleteMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sourceParticipant_0_0=RULE_ID
		{
			newLeafNode(lv_sourceParticipant_0_0, grammarAccess.getDeleteMessageAccess().getSourceParticipantIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeleteMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sourceParticipant",
        		lv_sourceParticipant_0_0, 
        		"ID");
	    }

)
)	otherlv_1='destroys' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeleteMessageAccess().getDestroysKeyword_1());
    }
(
(
		lv_targetParticipant_2_0=RULE_ID
		{
			newLeafNode(lv_targetParticipant_2_0, grammarAccess.getDeleteMessageAccess().getTargetParticipantIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeleteMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"targetParticipant",
        		lv_targetParticipant_2_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeleteMessageAccess().getLeftParenthesisKeyword_3_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteMessageAccess().getParameterParameterParserRuleCall_3_1_0_0()); 
	    }
		lv_parameter_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeleteMessageAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeleteMessageAccess().getParameterParameterParserRuleCall_3_1_1_1_0()); 
	    }
		lv_parameter_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeleteMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDeleteMessageAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleSelfMessage
entryRuleSelfMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelfMessageRule()); }
	 iv_ruleSelfMessage=ruleSelfMessage 
	 { $current=$iv_ruleSelfMessage.current; } 
	 EOF 
;

// Rule SelfMessage
ruleSelfMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sourceParticipant_0_0=RULE_ID
		{
			newLeafNode(lv_sourceParticipant_0_0, grammarAccess.getSelfMessageAccess().getSourceParticipantIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelfMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sourceParticipant",
        		lv_sourceParticipant_0_0, 
        		"ID");
	    }

)
)	otherlv_1='self' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfMessageAccess().getSelfKeyword_1());
    }
	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelfMessageAccess().getFullStopKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getSelfMessageAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelfMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelfMessageAccess().getLeftParenthesisKeyword_4_0());
    }
)(((
(
ruleParameter
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getSelfMessageAccess().getParameterParameterParserRuleCall_4_1_0_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelfMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelfMessageAccess().getCommaKeyword_4_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelfMessageAccess().getParameterParameterParserRuleCall_4_1_1_1_0()); 
	    }
		lv_parameter_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelfMessageRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelfMessageAccess().getRightParenthesisKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelfMessageAccess().getReturnReturnMessageParserRuleCall_5_0()); 
	    }
		lv_return_9_0=ruleReturnMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelfMessageRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_9_0, 
        		"ReturnMessage");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getReferenceAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getArrayArrayParserRuleCall_1_0()); 
	    }
		lv_array_1_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		add(
       			$current, 
       			"array",
        		lv_array_1_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayAccess().getArrayAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_size_2_0=RULE_NATURAL
		{
			newLeafNode(lv_size_2_0, grammarAccess.getArrayAccess().getSizeNATURALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"NATURAL");
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleForeachExpression
entryRuleForeachExpression returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getForeachExpressionRule()); } 
	 iv_ruleForeachExpression=ruleForeachExpression 
	 { $current=$iv_ruleForeachExpression.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ForeachExpression
ruleForeachExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getForeachExpressionAccess().getIDTerminalRuleCall_0()); 
    }

	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachExpressionAccess().getInKeyword_1()); 
    }
((    this_NATURAL_2=RULE_NATURAL    {
		$current.merge(this_NATURAL_2);
    }

    { 
    newLeafNode(this_NATURAL_2, grammarAccess.getForeachExpressionAccess().getNATURALTerminalRuleCall_2_0_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForeachExpressionAccess().getFullStopFullStopKeyword_2_0_1()); 
    }
    this_NATURAL_4=RULE_NATURAL    {
		$current.merge(this_NATURAL_4);
    }

    { 
    newLeafNode(this_NATURAL_4, grammarAccess.getForeachExpressionAccess().getNATURALTerminalRuleCall_2_0_2()); 
    }
)
    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getForeachExpressionAccess().getIDTerminalRuleCall_2_1()); 
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleValueWithSpaces
entryRuleValueWithSpaces returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getValueWithSpacesRule()); } 
	 iv_ruleValueWithSpaces=ruleValueWithSpaces 
	 { $current=$iv_ruleValueWithSpaces.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ValueWithSpaces
ruleValueWithSpaces returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_OPERATOR_0=RULE_OPERATOR    {
		$current.merge(this_OPERATOR_0);
    }

    { 
    newLeafNode(this_OPERATOR_0, grammarAccess.getValueWithSpacesAccess().getOPERATORTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueWithSpacesAccess().getValueParserRuleCall_1()); 
    }
    this_Value_1=ruleValue    {
		$current.merge(this_Value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ANY_OTHER_2=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_2);
    }

    { 
    newLeafNode(this_ANY_OTHER_2, grammarAccess.getValueWithSpacesAccess().getANY_OTHERTerminalRuleCall_2()); 
    }

    |    this_WS_3=RULE_WS    {
		$current.merge(this_WS_3);
    }

    { 
    newLeafNode(this_WS_3, grammarAccess.getValueWithSpacesAccess().getWSTerminalRuleCall_3()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); 
	    }
		lv_parameter_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;









// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); 
    }
    this_Integer_0=ruleInteger    {
		$current.merge(this_Integer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); 
    }
    this_ExtendedID_2=ruleExtendedID    {
		$current.merge(this_ExtendedID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_BOOLEAN_3=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_3);
    }

    { 
    newLeafNode(this_BOOLEAN_3, grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); 
    }

    |    this_NULL_4=RULE_NULL    {
		$current.merge(this_NULL_4);
    }

    { 
    newLeafNode(this_NULL_4, grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getRealParserRuleCall_5()); 
    }
    this_Real_5=ruleReal    {
		$current.merge(this_Real_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleReal
entryRuleReal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealRule()); } 
	 iv_ruleReal=ruleReal 
	 { $current=$iv_ruleReal.current.getText(); }  
	 EOF 
;

// Rule Real
ruleReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NATURAL_1=RULE_NATURAL    {
		$current.merge(this_NATURAL_1);
    }

    { 
    newLeafNode(this_NATURAL_1, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_2()); 
    }
    this_NATURAL_3=RULE_NATURAL    {
		$current.merge(this_NATURAL_3);
    }

    { 
    newLeafNode(this_NATURAL_3, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); 
    }
((
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); 
    }
)    this_NATURAL_8=RULE_NATURAL    {
		$current.merge(this_NATURAL_8);
    }

    { 
    newLeafNode(this_NATURAL_8, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); 
    }
)?)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NATURAL_1=RULE_NATURAL    {
		$current.merge(this_NATURAL_1);
    }

    { 
    newLeafNode(this_NATURAL_1, grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); 
    }
)
    ;





RULE_OPERATOR : ('++'|'--'|'=='|'>='|'<='|'!='|'<>'|'||'|'&&'|'-='|'+='|'='|'>>'|'<<'|'|=');

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : ('null'|'nil'|'NULL');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NATURAL : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


