/*
* generated by Xtext
*/
grammar InternalSequencemodel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package cz.cvut.earlgrey.sequencemodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cz.cvut.earlgrey.sequencemodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cz.cvut.earlgrey.sequencemodel.services.SequencemodelGrammarAccess;

}

@parser::members {

 	private SequencemodelGrammarAccess grammarAccess;
 	
    public InternalSequencemodelParser(TokenStream input, SequencemodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SequencemodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSequenceSequenceParserRuleCall_1_0()); 
	    }
		lv_sequence_1_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"sequence",
        		lv_sequence_1_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getAnnotationAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	'sequence' 
)=>	otherlv_1='sequence' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getSequenceKeyword_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getParticipantParticipantParserRuleCall_3_0()); 
	    }
		lv_participant_3_0=ruleParticipant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"participant",
        		lv_participant_3_0, 
        		"Participant");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleParticipant
entryRuleParticipant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantRule()); }
	 iv_ruleParticipant=ruleParticipant 
	 { $current=$iv_ruleParticipant.current; } 
	 EOF 
;

// Rule Participant
ruleParticipant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParticipantAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParticipantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantAccess().getTransitionTransitionParserRuleCall_1_0()); 
	    }
		lv_transition_1_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_1_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParticipantAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getTransitionBlockParserRuleCall_0()); 
    }
    this_TransitionBlock_0=ruleTransitionBlock
    { 
        $current = $this_TransitionBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getMessageParserRuleCall_1()); 
    }
    this_Message_1=ruleMessage
    { 
        $current = $this_Message_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTransitionBlock
entryRuleTransitionBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionBlockRule()); }
	 iv_ruleTransitionBlock=ruleTransitionBlock 
	 { $current=$iv_ruleTransitionBlock.current; } 
	 EOF 
;

// Rule TransitionBlock
ruleTransitionBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTransitionBlockAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionBlockAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionBlockAccess().getTransitionMessageParserRuleCall_2_0()); 
	    }
		lv_transition_2_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionBlockRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_2_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionBlockAccess().getEndKeyword_3());
    }
)
;







// Entry rule entryRuleIfElseFragment
entryRuleIfElseFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfElseFragmentRule()); }
	 iv_ruleIfElseFragment=ruleIfElseFragment 
	 { $current=$iv_ruleIfElseFragment.current; } 
	 EOF 
;

// Rule IfElseFragment
ruleIfElseFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfElseFragmentAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfElseFragmentAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getTransitionMessageParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((	'else' 
)=>	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfElseFragmentAccess().getElseKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseFragmentAccess().getElseTransitionMessageParserRuleCall_4_1_0()); 
	    }
		lv_elseTransition_5_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseFragmentRule());
	        }
       		add(
       			$current, 
       			"elseTransition",
        		lv_elseTransition_5_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_6='end' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfElseFragmentAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleForeachFragment
entryRuleForeachFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachFragmentRule()); }
	 iv_ruleForeachFragment=ruleForeachFragment 
	 { $current=$iv_ruleForeachFragment.current; } 
	 EOF 
;

// Rule ForeachFragment
ruleForeachFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachFragmentAccess().getForeachKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForeachFragmentAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachFragmentAccess().getTransitionMessageParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForeachFragmentAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleAsserFragment
entryRuleAsserFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAsserFragmentRule()); }
	 iv_ruleAsserFragment=ruleAsserFragment 
	 { $current=$iv_ruleAsserFragment.current; } 
	 EOF 
;

// Rule AsserFragment
ruleAsserFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAsserFragmentAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAsserFragmentAccess().getExprValueWithSpacesParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleValueWithSpaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAsserFragmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ValueWithSpaces");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAsserFragmentAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAsserFragmentAccess().getTransitionMessageParserRuleCall_3_0()); 
	    }
		lv_transition_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAsserFragmentRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_3_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAsserFragmentAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getCallMessageParserRuleCall_0()); 
    }
    this_CallMessage_0=ruleCallMessage
    { 
        $current = $this_CallMessage_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getNewMessageParserRuleCall_1()); 
    }
    this_NewMessage_1=ruleNewMessage
    { 
        $current = $this_NewMessage_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageAccess().getReturnMessageParserRuleCall_2()); 
    }
    this_ReturnMessage_2=ruleReturnMessage
    { 
        $current = $this_ReturnMessage_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCallMessage
entryRuleCallMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallMessageRule()); }
	 iv_ruleCallMessage=ruleCallMessage 
	 { $current=$iv_ruleCallMessage.current; } 
	 EOF 
;

// Rule CallMessage
ruleCallMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCallMessageAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallMessageAccess().getLeftParenthesisKeyword_1_0());
    }
)((
(
		lv_param_2_0=RULE_ID
		{
			newLeafNode(lv_param_2_0, grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_2_0, 
        		"ID");
	    }

)
)(((	', ' 
)=>	otherlv_3=', ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallMessageAccess().getCommaSpaceKeyword_1_1_1_0());
    }
)(
(
		lv_param_4_0=RULE_ID
		{
			newLeafNode(lv_param_4_0, grammarAccess.getCallMessageAccess().getParamIDTerminalRuleCall_1_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_4_0, 
        		"ID");
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCallMessageAccess().getRightParenthesisKeyword_1_2());
    }
)?(
(
		lv_participant_6_0=RULE_ID
		{
			newLeafNode(lv_participant_6_0, grammarAccess.getCallMessageAccess().getParticipantIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"participant",
        		lv_participant_6_0, 
        		"ID");
	    }

)
)?)
;





// Entry rule entryRuleNewMessage
entryRuleNewMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewMessageRule()); }
	 iv_ruleNewMessage=ruleNewMessage 
	 { $current=$iv_ruleNewMessage.current; } 
	 EOF 
;

// Rule NewMessage
ruleNewMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNewMessageAccess().getNewKeyword_0());
    }
(
(
		lv_participant_1_0=RULE_ID
		{
			newLeafNode(lv_participant_1_0, grammarAccess.getNewMessageAccess().getParticipantIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"participant",
        		lv_participant_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleReturnMessage
entryRuleReturnMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnMessageRule()); }
	 iv_ruleReturnMessage=ruleReturnMessage 
	 { $current=$iv_ruleReturnMessage.current; } 
	 EOF 
;

// Rule ReturnMessage
ruleReturnMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnMessageAccess().getReturnKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getReturnMessageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnMessageAccess().getLeftParenthesisKeyword_2_0());
    }
)((
(
		lv_param_3_0=RULE_ID
		{
			newLeafNode(lv_param_3_0, grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnMessageRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"ID");
	    }

)
)(((	', ' 
)=>	otherlv_4=', ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReturnMessageAccess().getCommaSpaceKeyword_2_1_1_0());
    }
)(
(
		lv_param_5_0=RULE_ID
		{
			newLeafNode(lv_param_5_0, grammarAccess.getReturnMessageAccess().getParamIDTerminalRuleCall_2_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnMessageRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_5_0, 
        		"ID");
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReturnMessageAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleValueWithSpaces
entryRuleValueWithSpaces returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getValueWithSpacesRule()); } 
	 iv_ruleValueWithSpaces=ruleValueWithSpaces 
	 { $current=$iv_ruleValueWithSpaces.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ValueWithSpaces
ruleValueWithSpaces returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_OPERATOR_0=RULE_OPERATOR    {
		$current.merge(this_OPERATOR_0);
    }

    { 
    newLeafNode(this_OPERATOR_0, grammarAccess.getValueWithSpacesAccess().getOPERATORTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueWithSpacesAccess().getValueParserRuleCall_1()); 
    }
    this_Value_1=ruleValue    {
		$current.merge(this_Value_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ANY_OTHER_2=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_2);
    }

    { 
    newLeafNode(this_ANY_OTHER_2, grammarAccess.getValueWithSpacesAccess().getANY_OTHERTerminalRuleCall_2()); 
    }

    |    this_WS_3=RULE_WS    {
		$current.merge(this_WS_3);
    }

    { 
    newLeafNode(this_WS_3, grammarAccess.getValueWithSpacesAccess().getWSTerminalRuleCall_3()); 
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_1_0()); 
	    }
		lv_parameter_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getParameterParameterParserRuleCall_2_2_1_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getAssignParameterParserRuleCall_0()); 
    }
    this_AssignParameter_0=ruleAssignParameter
    { 
        $current = $this_AssignParameter_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getValueParameterParserRuleCall_1()); 
    }
    this_ValueParameter_1=ruleValueParameter
    { 
        $current = $this_ValueParameter_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignParameter
entryRuleAssignParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignParameterRule()); }
	 iv_ruleAssignParameter=ruleAssignParameter 
	 { $current=$iv_ruleAssignParameter.current; } 
	 EOF 
;

// Rule AssignParameter
ruleAssignParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignParameterAccess().getNameExtendedIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignParameterAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignParameterAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueParameter
entryRuleValueParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueParameterRule()); }
	 iv_ruleValueParameter=ruleValueParameter 
	 { $current=$iv_ruleValueParameter.current; } 
	 EOF 
;

// Rule ValueParameter
ruleValueParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueParameterAccess().getValueValueParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntegerParserRuleCall_0()); 
    }
    this_Integer_0=ruleInteger    {
		$current.merge(this_Integer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getExtendedIDParserRuleCall_2()); 
    }
    this_ExtendedID_2=ruleExtendedID    {
		$current.merge(this_ExtendedID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_BOOLEAN_3=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_3);
    }

    { 
    newLeafNode(this_BOOLEAN_3, grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_3()); 
    }

    |    this_NULL_4=RULE_NULL    {
		$current.merge(this_NULL_4);
    }

    { 
    newLeafNode(this_NULL_4, grammarAccess.getValueAccess().getNULLTerminalRuleCall_4()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getRealParserRuleCall_5()); 
    }
    this_Real_5=ruleReal    {
		$current.merge(this_Real_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleReal
entryRuleReal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealRule()); } 
	 iv_ruleReal=ruleReal 
	 { $current=$iv_ruleReal.current.getText(); }  
	 EOF 
;

// Rule Real
ruleReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NATURAL_1=RULE_NATURAL    {
		$current.merge(this_NATURAL_1);
    }

    { 
    newLeafNode(this_NATURAL_1, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_1()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_2()); 
    }
    this_NATURAL_3=RULE_NATURAL    {
		$current.merge(this_NATURAL_3);
    }

    { 
    newLeafNode(this_NATURAL_3, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_3()); 
    }
((
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getPlusSignKeyword_4_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_4_1_1()); 
    }
)    this_NATURAL_8=RULE_NATURAL    {
		$current.merge(this_NATURAL_8);
    }

    { 
    newLeafNode(this_NATURAL_8, grammarAccess.getRealAccess().getNATURALTerminalRuleCall_4_2()); 
    }
)?)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_NATURAL_1=RULE_NATURAL    {
		$current.merge(this_NATURAL_1);
    }

    { 
    newLeafNode(this_NATURAL_1, grammarAccess.getIntegerAccess().getNATURALTerminalRuleCall_1()); 
    }
)
    ;





RULE_OPERATOR : ('++'|'--'|'=='|'>='|'<='|'!='|'<>'|'||'|'&&'|'-='|'+='|'='|'>>'|'<<'|'|=');

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : ('null'|'nil'|'NULL');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NATURAL : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


